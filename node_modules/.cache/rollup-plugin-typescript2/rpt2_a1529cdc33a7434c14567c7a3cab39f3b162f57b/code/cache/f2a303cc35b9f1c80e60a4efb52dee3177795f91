{"code":"export const STORAGE_AVAILABLE_KEY = '__sak';\r\n//# sourceMappingURL=index.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/persistence/index.ts\"],\"names\":[],\"mappings\":\"AAgCA,MAAM,CAAC,MAAM,qBAAqB,GAAG,OAAO,CAAC\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/persistence/index.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Persistence } from '../../model/public_types';\r\nexport declare const enum PersistenceType {\r\n    SESSION = \"SESSION\",\r\n    LOCAL = \"LOCAL\",\r\n    NONE = \"NONE\"\r\n}\r\nexport declare type PersistedBlob = Record<string, unknown>;\r\nexport interface Instantiator<T> {\r\n    (blob: PersistedBlob): T;\r\n}\r\nexport declare type PersistenceValue = PersistedBlob | string;\r\nexport declare const STORAGE_AVAILABLE_KEY = \"__sak\";\r\nexport interface StorageEventListener {\r\n    (value: PersistenceValue | null): void;\r\n}\r\nexport interface PersistenceInternal extends Persistence {\r\n    type: PersistenceType;\r\n    _isAvailable(): Promise<boolean>;\r\n    _set(key: string, value: PersistenceValue): Promise<void>;\r\n    _get<T extends PersistenceValue>(key: string): Promise<T | null>;\r\n    _remove(key: string): Promise<void>;\r\n    _addListener(key: string, listener: StorageEventListener): void;\r\n    _removeListener(key: string, listener: StorageEventListener): void;\r\n    _shouldAllowMigration?: boolean;\r\n}\r\n"}}
