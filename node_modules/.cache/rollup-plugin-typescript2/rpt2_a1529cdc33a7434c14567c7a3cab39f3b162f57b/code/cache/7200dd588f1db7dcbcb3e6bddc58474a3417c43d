{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { _parseEnforcementState } from '../../api/index';\r\nexport function isV2(grecaptcha) {\r\n    return (grecaptcha !== undefined &&\r\n        grecaptcha.getResponse !== undefined);\r\n}\r\nexport function isEnterprise(grecaptcha) {\r\n    return (grecaptcha !== undefined &&\r\n        grecaptcha.enterprise !== undefined);\r\n}\r\nexport class RecaptchaConfig {\r\n    constructor(response) {\r\n        /**\r\n         * The reCAPTCHA site key.\r\n         */\r\n        this.siteKey = '';\r\n        /**\r\n         * The list of providers and their enablement status for reCAPTCHA Enterprise.\r\n         */\r\n        this.recaptchaEnforcementState = [];\r\n        if (response.recaptchaKey === undefined) {\r\n            throw new Error('recaptchaKey undefined');\r\n        }\r\n        // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\r\n        this.siteKey = response.recaptchaKey.split('/')[3];\r\n        this.recaptchaEnforcementState = response.recaptchaEnforcementState;\r\n    }\r\n    /**\r\n     * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\r\n     *\r\n     * @param providerStr - The provider whose enforcement state is to be returned.\r\n     * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\r\n     */\r\n    getProviderEnforcementState(providerStr) {\r\n        if (!this.recaptchaEnforcementState ||\r\n            this.recaptchaEnforcementState.length === 0) {\r\n            return null;\r\n        }\r\n        for (const recaptchaEnforcementState of this.recaptchaEnforcementState) {\r\n            if (recaptchaEnforcementState.provider &&\r\n                recaptchaEnforcementState.provider === providerStr) {\r\n                return _parseEnforcementState(recaptchaEnforcementState.enforcementState);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\r\n     *\r\n     * @param providerStr - The provider whose enablement state is to be returned.\r\n     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\r\n     */\r\n    isProviderEnabled(providerStr) {\r\n        return (this.getProviderEnforcementState(providerStr) ===\r\n            \"ENFORCE\" /* EnforcementState.ENFORCE */ ||\r\n            this.getProviderEnforcementState(providerStr) === \"AUDIT\" /* EnforcementState.AUDIT */);\r\n    }\r\n}\r\n//# sourceMappingURL=recaptcha.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/recaptcha.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/index.ts"],"map":"{\"version\":3,\"file\":\"recaptcha.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/platform_browser/recaptcha/recaptcha.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;AAOH,OAAO,EAAoB,sBAAsB,EAAE,MAAM,iBAAiB,CAAC;AAU3E,MAAM,UAAU,IAAI,CAClB,UAA8C;IAE9C,OAAO,CACL,UAAU,KAAK,SAAS;QACvB,UAAwB,CAAC,WAAW,KAAK,SAAS,CACpD,CAAC;AACJ,CAAC;AAsBD,MAAM,UAAU,YAAY,CAC1B,UAA8C;IAE9C,OAAO,CACL,UAAU,KAAK,SAAS;QACvB,UAAiC,CAAC,UAAU,KAAK,SAAS,CAC5D,CAAC;AACJ,CAAC;AASD,MAAM,OAAO,eAAe;IAW1B,YAAY,QAAoC;QAVhD;;WAEG;QACH,YAAO,GAAW,EAAE,CAAC;QAErB;;WAEG;QACH,8BAAyB,GAAwC,EAAE,CAAC;QAGlE,IAAI,QAAQ,CAAC,YAAY,KAAK,SAAS,EAAE;YACvC,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC3C;QACD,oEAAoE;QACpE,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,yBAAyB,GAAG,QAAQ,CAAC,yBAAyB,CAAC;IACtE,CAAC;IAED;;;;;OAKG;IACH,2BAA2B,CAAC,WAAmB;QAC7C,IACE,CAAC,IAAI,CAAC,yBAAyB;YAC/B,IAAI,CAAC,yBAAyB,CAAC,MAAM,KAAK,CAAC,EAC3C;YACA,OAAO,IAAI,CAAC;SACb;QAED,KAAK,MAAM,yBAAyB,IAAI,IAAI,CAAC,yBAAyB,EAAE;YACtE,IACE,yBAAyB,CAAC,QAAQ;gBAClC,yBAAyB,CAAC,QAAQ,KAAK,WAAW,EAClD;gBACA,OAAO,sBAAsB,CAC3B,yBAAyB,CAAC,gBAAgB,CAC3C,CAAC;aACH;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACH,iBAAiB,CAAC,WAAmB;QACnC,OAAO,CACL,IAAI,CAAC,2BAA2B,CAAC,WAAW,CAAC;oDACnB;YAC1B,IAAI,CAAC,2BAA2B,CAAC,WAAW,CAAC,yCAA2B,CACzE,CAAC;IACJ,CAAC;CACF\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/platform_browser/recaptcha/recaptcha.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { RecaptchaParameters } from '../../model/public_types';\r\nimport { GetRecaptchaConfigResponse, RecaptchaEnforcementProviderState } from '../../api/authentication/recaptcha';\r\nimport { EnforcementState } from '../../api/index';\r\nexport interface Recaptcha {\r\n    render: (container: HTMLElement, parameters: RecaptchaParameters) => number;\r\n    getResponse: (id: number) => string;\r\n    execute: (id: number) => unknown;\r\n    reset: (id: number) => unknown;\r\n}\r\nexport declare function isV2(grecaptcha: Recaptcha | GreCAPTCHA | undefined): grecaptcha is Recaptcha;\r\nexport interface GreCAPTCHATopLevel extends GreCAPTCHA {\r\n    enterprise: GreCAPTCHA;\r\n}\r\nexport interface GreCAPTCHA {\r\n    ready: (callback: () => void) => void;\r\n    execute: (siteKey: string, options: {\r\n        action: string;\r\n    }) => Promise<string>;\r\n    render: (container: string | HTMLElement, parameters: GreCAPTCHARenderOption) => string;\r\n}\r\nexport interface GreCAPTCHARenderOption {\r\n    sitekey: string;\r\n    size: 'invisible';\r\n}\r\nexport declare function isEnterprise(grecaptcha: Recaptcha | GreCAPTCHA | undefined): grecaptcha is GreCAPTCHATopLevel;\r\ndeclare global {\r\n    interface Window {\r\n        grecaptcha?: Recaptcha | GreCAPTCHATopLevel;\r\n    }\r\n}\r\nexport declare class RecaptchaConfig {\r\n    /**\r\n     * The reCAPTCHA site key.\r\n     */\r\n    siteKey: string;\r\n    /**\r\n     * The list of providers and their enablement status for reCAPTCHA Enterprise.\r\n     */\r\n    recaptchaEnforcementState: RecaptchaEnforcementProviderState[];\r\n    constructor(response: GetRecaptchaConfigResponse);\r\n    /**\r\n     * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\r\n     *\r\n     * @param providerStr - The provider whose enforcement state is to be returned.\r\n     * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\r\n     */\r\n    getProviderEnforcementState(providerStr: string): EnforcementState | null;\r\n    /**\r\n     * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\r\n     *\r\n     * @param providerStr - The provider whose enablement state is to be returned.\r\n     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\r\n     */\r\n    isProviderEnabled(providerStr: string): boolean;\r\n}\r\n"}}
