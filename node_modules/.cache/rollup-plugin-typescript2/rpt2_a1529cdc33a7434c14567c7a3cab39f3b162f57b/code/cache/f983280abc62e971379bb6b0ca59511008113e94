{"code":"/* eslint-disable @typescript-eslint/no-require-imports */\r\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { isEnterprise, RecaptchaConfig } from './recaptcha';\r\nimport { getRecaptchaConfig } from '../../api/authentication/recaptcha';\r\nimport { _castAuth } from '../../core/auth/auth_impl';\r\nimport * as jsHelpers from '../load_js';\r\nconst RECAPTCHA_ENTERPRISE_URL = 'https://www.google.com/recaptcha/enterprise.js?render=';\r\nexport const RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\r\nexport const FAKE_TOKEN = 'NO_RECAPTCHA';\r\nexport class RecaptchaEnterpriseVerifier {\r\n    /**\r\n     *\r\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\r\n     *\r\n     */\r\n    constructor(authExtern) {\r\n        /**\r\n         * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\r\n         */\r\n        this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\r\n        this.auth = _castAuth(authExtern);\r\n    }\r\n    /**\r\n     * Executes the verification process.\r\n     *\r\n     * @returns A Promise for a token that can be used to assert the validity of a request.\r\n     */\r\n    async verify(action = 'verify', forceRefresh = false) {\r\n        async function retrieveSiteKey(auth) {\r\n            if (!forceRefresh) {\r\n                if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\r\n                    return auth._agentRecaptchaConfig.siteKey;\r\n                }\r\n                if (auth.tenantId != null &&\r\n                    auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) {\r\n                    return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\r\n                }\r\n            }\r\n            return new Promise(async (resolve, reject) => {\r\n                getRecaptchaConfig(auth, {\r\n                    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\r\n                    version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\r\n                })\r\n                    .then(response => {\r\n                    if (response.recaptchaKey === undefined) {\r\n                        reject(new Error('recaptcha Enterprise site key undefined'));\r\n                    }\r\n                    else {\r\n                        const config = new RecaptchaConfig(response);\r\n                        if (auth.tenantId == null) {\r\n                            auth._agentRecaptchaConfig = config;\r\n                        }\r\n                        else {\r\n                            auth._tenantRecaptchaConfigs[auth.tenantId] = config;\r\n                        }\r\n                        return resolve(config.siteKey);\r\n                    }\r\n                })\r\n                    .catch(error => {\r\n                    reject(error);\r\n                });\r\n            });\r\n        }\r\n        function retrieveRecaptchaToken(siteKey, resolve, reject) {\r\n            const grecaptcha = window.grecaptcha;\r\n            if (isEnterprise(grecaptcha)) {\r\n                grecaptcha.enterprise.ready(() => {\r\n                    grecaptcha.enterprise\r\n                        .execute(siteKey, { action })\r\n                        .then(token => {\r\n                        resolve(token);\r\n                    })\r\n                        .catch(() => {\r\n                        resolve(FAKE_TOKEN);\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                reject(Error('No reCAPTCHA enterprise script loaded.'));\r\n            }\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            retrieveSiteKey(this.auth)\r\n                .then(siteKey => {\r\n                if (!forceRefresh && isEnterprise(window.grecaptcha)) {\r\n                    retrieveRecaptchaToken(siteKey, resolve, reject);\r\n                }\r\n                else {\r\n                    if (typeof window === 'undefined') {\r\n                        reject(new Error('RecaptchaVerifier is only supported in browser'));\r\n                        return;\r\n                    }\r\n                    jsHelpers\r\n                        ._loadJS(RECAPTCHA_ENTERPRISE_URL + siteKey)\r\n                        .then(() => {\r\n                        retrieveRecaptchaToken(siteKey, resolve, reject);\r\n                    })\r\n                        .catch(error => {\r\n                        reject(error);\r\n                    });\r\n                }\r\n            })\r\n                .catch(error => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n}\r\nexport async function injectRecaptchaFields(auth, request, action, captchaResp = false) {\r\n    const verifier = new RecaptchaEnterpriseVerifier(auth);\r\n    let captchaResponse;\r\n    try {\r\n        captchaResponse = await verifier.verify(action);\r\n    }\r\n    catch (error) {\r\n        captchaResponse = await verifier.verify(action, true);\r\n    }\r\n    const newRequest = Object.assign({}, request);\r\n    if (!captchaResp) {\r\n        Object.assign(newRequest, { captchaResponse });\r\n    }\r\n    else {\r\n        Object.assign(newRequest, { 'captchaResp': captchaResponse });\r\n    }\r\n    Object.assign(newRequest, { 'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */ });\r\n    Object.assign(newRequest, {\r\n        'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\r\n    });\r\n    return newRequest;\r\n}\r\nexport async function handleRecaptchaFlow(authInstance, request, actionName, actionMethod) {\r\n    var _a;\r\n    if ((_a = authInstance\r\n        ._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaProvider.EMAIL_PASSWORD_PROVIDER */)) {\r\n        const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\r\n        return actionMethod(authInstance, requestWithRecaptcha);\r\n    }\r\n    else {\r\n        return actionMethod(authInstance, request).catch(async (error) => {\r\n            if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {\r\n                console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);\r\n                const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\r\n                return actionMethod(authInstance, requestWithRecaptcha);\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n}\r\nexport async function _initializeRecaptchaConfig(auth) {\r\n    const authInternal = _castAuth(auth);\r\n    const response = await getRecaptchaConfig(authInternal, {\r\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\r\n        version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\r\n    });\r\n    const config = new RecaptchaConfig(response);\r\n    if (authInternal.tenantId == null) {\r\n        authInternal._agentRecaptchaConfig = config;\r\n    }\r\n    else {\r\n        authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\r\n    }\r\n    if (config.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaProvider.EMAIL_PASSWORD_PROVIDER */)) {\r\n        const verifier = new RecaptchaEnterpriseVerifier(authInternal);\r\n        void verifier.verify();\r\n    }\r\n}\r\n//# sourceMappingURL=recaptcha_enterprise_verifier.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/recaptcha/recaptcha.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/recaptcha.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/index.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/auth.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/auth/auth_impl.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/load_js.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/errors.ts"],"map":"{\"version\":3,\"file\":\"recaptcha_enterprise_verifier.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/platform_browser/recaptcha/recaptcha_enterprise_verifier.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/platform_browser/recaptcha/recaptcha_enterprise_verifier.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { RecaptchaActionName } from '../../api';\r\nimport { Auth } from '../../model/public_types';\r\nimport { AuthInternal } from '../../model/auth';\r\nexport declare const RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = \"recaptcha-enterprise\";\r\nexport declare const FAKE_TOKEN = \"NO_RECAPTCHA\";\r\nexport declare class RecaptchaEnterpriseVerifier {\r\n    /**\r\n     * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\r\n     */\r\n    readonly type = \"recaptcha-enterprise\";\r\n    private readonly auth;\r\n    /**\r\n     *\r\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\r\n     *\r\n     */\r\n    constructor(authExtern: Auth);\r\n    /**\r\n     * Executes the verification process.\r\n     *\r\n     * @returns A Promise for a token that can be used to assert the validity of a request.\r\n     */\r\n    verify(action?: string, forceRefresh?: boolean): Promise<string>;\r\n}\r\nexport declare function injectRecaptchaFields<T>(auth: AuthInternal, request: T, action: RecaptchaActionName, captchaResp?: boolean): Promise<T>;\r\ndeclare type ActionMethod<TRequest, TResponse> = (auth: Auth, request: TRequest) => Promise<TResponse>;\r\nexport declare function handleRecaptchaFlow<TRequest, TResponse>(authInstance: AuthInternal, request: TRequest, actionName: RecaptchaActionName, actionMethod: ActionMethod<TRequest, TResponse>): Promise<TResponse>;\r\nexport declare function _initializeRecaptchaConfig(auth: Auth): Promise<void>;\r\nexport {};\r\n"}}
