{"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nexport class InMemoryPersistence {\r\n    constructor() {\r\n        this.type = \"NONE\" /* PersistenceType.NONE */;\r\n        this.storage = {};\r\n    }\r\n    async _isAvailable() {\r\n        return true;\r\n    }\r\n    async _set(key, value) {\r\n        this.storage[key] = value;\r\n    }\r\n    async _get(key) {\r\n        const value = this.storage[key];\r\n        return value === undefined ? null : value;\r\n    }\r\n    async _remove(key) {\r\n        delete this.storage[key];\r\n    }\r\n    _addListener(_key, _listener) {\r\n        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\r\n        return;\r\n    }\r\n    _removeListener(_key, _listener) {\r\n        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\r\n        return;\r\n    }\r\n}\r\nInMemoryPersistence.type = 'NONE';\r\n/**\r\n * An implementation of {@link Persistence} of type 'NONE'.\r\n *\r\n * @public\r\n */\r\nexport const inMemoryPersistence = InMemoryPersistence;\r\n//# sourceMappingURL=in_memory.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/persistence/index.ts"],"map":"{\"version\":3,\"file\":\"in_memory.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/persistence/in_memory.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;AAWH,MAAM,OAAO,mBAAmB;IAAhC;QAEW,SAAI,qCAAwB;QACrC,YAAO,GAAqC,EAAE,CAAC;IA4BjD,CAAC;IA1BC,KAAK,CAAC,YAAY;QAChB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,GAAW,EAAE,KAAuB;QAC7C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,IAAI,CAA6B,GAAW;QAChD,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAChC,OAAO,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAE,KAAW,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,GAAW;QACvB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;IAED,YAAY,CAAC,IAAY,EAAE,SAA+B;QACxD,qGAAqG;QACrG,OAAO;IACT,CAAC;IAED,eAAe,CAAC,IAAY,EAAE,SAA+B;QAC3D,qGAAqG;QACrG,OAAO;IACT,CAAC;;AA7BM,wBAAI,GAAW,MAAM,CAAC;AAgC/B;;;;GAIG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAgB,mBAAmB,CAAC\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/persistence/in_memory.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Persistence } from '../../model/public_types';\r\nimport { PersistenceInternal, PersistenceType, PersistenceValue, StorageEventListener } from '../persistence';\r\nexport declare class InMemoryPersistence implements PersistenceInternal {\r\n    static type: 'NONE';\r\n    readonly type = PersistenceType.NONE;\r\n    storage: Record<string, PersistenceValue>;\r\n    _isAvailable(): Promise<boolean>;\r\n    _set(key: string, value: PersistenceValue): Promise<void>;\r\n    _get<T extends PersistenceValue>(key: string): Promise<T | null>;\r\n    _remove(key: string): Promise<void>;\r\n    _addListener(_key: string, _listener: StorageEventListener): void;\r\n    _removeListener(_key: string, _listener: StorageEventListener): void;\r\n}\r\n/**\r\n * An implementation of {@link Persistence} of type 'NONE'.\r\n *\r\n * @public\r\n */\r\nexport declare const inMemoryPersistence: Persistence;\r\n"}}
