{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { _fail } from '../core/util/assert';\r\nexport class MultiFactorInfoImpl {\r\n    constructor(factorId, response) {\r\n        this.factorId = factorId;\r\n        this.uid = response.mfaEnrollmentId;\r\n        this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\r\n        this.displayName = response.displayName;\r\n    }\r\n    static _fromServerResponse(auth, enrollment) {\r\n        if ('phoneInfo' in enrollment) {\r\n            return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\r\n        }\r\n        else if ('totpInfo' in enrollment) {\r\n            return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\r\n        }\r\n        return _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    }\r\n}\r\nexport class PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl {\r\n    constructor(response) {\r\n        super(\"phone\" /* FactorId.PHONE */, response);\r\n        this.phoneNumber = response.phoneInfo;\r\n    }\r\n    static _fromServerResponse(_auth, enrollment) {\r\n        return new PhoneMultiFactorInfoImpl(enrollment);\r\n    }\r\n}\r\nexport class TotpMultiFactorInfoImpl extends MultiFactorInfoImpl {\r\n    constructor(response) {\r\n        super(\"totp\" /* FactorId.TOTP */, response);\r\n    }\r\n    static _fromServerResponse(_auth, enrollment) {\r\n        return new TotpMultiFactorInfoImpl(enrollment);\r\n    }\r\n}\r\n//# sourceMappingURL=mfa_info.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/account_management/mfa.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/errors.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/assert.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/auth.ts"],"map":"{\"version\":3,\"file\":\"mfa_info.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/mfa/mfa_info.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;AAcH,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAG5C,MAAM,OAAgB,mBAAmB;IAKvC,YAA+B,QAAkB,EAAE,QAAuB;QAA3C,aAAQ,GAAR,QAAQ,CAAU;QAC/C,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,eAAe,CAAC;QACpC,IAAI,CAAC,cAAc,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;QAClE,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;IAC1C,CAAC;IAED,MAAM,CAAC,mBAAmB,CACxB,IAAkB,EAClB,UAAyB;QAEzB,IAAI,WAAW,IAAI,UAAU,EAAE;YAC7B,OAAO,wBAAwB,CAAC,mBAAmB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;SACvE;aAAM,IAAI,UAAU,IAAI,UAAU,EAAE;YACnC,OAAO,uBAAuB,CAAC,mBAAmB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;SACtE;QACD,OAAO,KAAK,CAAC,IAAI,sDAA+B,CAAC;IACnD,CAAC;CACF;AAED,MAAM,OAAO,wBACX,SAAQ,mBAAmB;IAK3B,YAAoB,QAA4B;QAC9C,KAAK,+BAAiB,QAAQ,CAAC,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,SAAS,CAAC;IACxC,CAAC;IAED,MAAM,CAAC,mBAAmB,CACxB,KAAmB,EACnB,UAAyB;QAEzB,OAAO,IAAI,wBAAwB,CAAC,UAAgC,CAAC,CAAC;IACxE,CAAC;CACF;AACD,MAAM,OAAO,uBACX,SAAQ,mBAAmB;IAG3B,YAAoB,QAA2B;QAC7C,KAAK,6BAAgB,QAAQ,CAAC,CAAC;IACjC,CAAC;IAED,MAAM,CAAC,mBAAmB,CACxB,KAAmB,EACnB,UAAyB;QAEzB,OAAO,IAAI,uBAAuB,CAAC,UAA+B,CAAC,CAAC;IACtE,CAAC;CACF\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/mfa/mfa_info.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { FactorId, MultiFactorInfo, PhoneMultiFactorInfo, TotpMultiFactorInfo } from '../model/public_types';\r\nimport { MfaEnrollment } from '../api/account_management/mfa';\r\nimport { AuthInternal } from '../model/auth';\r\nexport declare abstract class MultiFactorInfoImpl implements MultiFactorInfo {\r\n    readonly factorId: FactorId;\r\n    readonly uid: string;\r\n    readonly displayName?: string | null;\r\n    readonly enrollmentTime: string;\r\n    protected constructor(factorId: FactorId, response: MfaEnrollment);\r\n    static _fromServerResponse(auth: AuthInternal, enrollment: MfaEnrollment): MultiFactorInfoImpl;\r\n}\r\nexport declare class PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl implements PhoneMultiFactorInfo {\r\n    readonly phoneNumber: string;\r\n    private constructor();\r\n    static _fromServerResponse(_auth: AuthInternal, enrollment: MfaEnrollment): PhoneMultiFactorInfoImpl;\r\n}\r\nexport declare class TotpMultiFactorInfoImpl extends MultiFactorInfoImpl implements TotpMultiFactorInfo {\r\n    private constructor();\r\n    static _fromServerResponse(_auth: AuthInternal, enrollment: MfaEnrollment): TotpMultiFactorInfoImpl;\r\n}\r\n"}}
