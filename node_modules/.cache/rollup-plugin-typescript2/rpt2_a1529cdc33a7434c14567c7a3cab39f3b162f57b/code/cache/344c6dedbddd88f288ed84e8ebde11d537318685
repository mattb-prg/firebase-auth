{"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { STORAGE_AVAILABLE_KEY } from '../../core/persistence/';\r\nimport { Receiver } from '../messagechannel/receiver';\r\nimport { Sender } from '../messagechannel/sender';\r\nimport { _isWorker, _getActiveServiceWorker, _getServiceWorkerController, _getWorkerGlobalScope } from '../util/worker';\r\nexport const DB_NAME = 'firebaseLocalStorageDb';\r\nconst DB_VERSION = 1;\r\nconst DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';\r\nconst DB_DATA_KEYPATH = 'fbase_key';\r\n/**\r\n * Promise wrapper for IDBRequest\r\n *\r\n * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6\r\n *\r\n */\r\nclass DBPromise {\r\n    constructor(request) {\r\n        this.request = request;\r\n    }\r\n    toPromise() {\r\n        return new Promise((resolve, reject) => {\r\n            this.request.addEventListener('success', () => {\r\n                resolve(this.request.result);\r\n            });\r\n            this.request.addEventListener('error', () => {\r\n                reject(this.request.error);\r\n            });\r\n        });\r\n    }\r\n}\r\nfunction getObjectStore(db, isReadWrite) {\r\n    return db\r\n        .transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly')\r\n        .objectStore(DB_OBJECTSTORE_NAME);\r\n}\r\nexport async function _clearDatabase(db) {\r\n    const objectStore = getObjectStore(db, true);\r\n    return new DBPromise(objectStore.clear()).toPromise();\r\n}\r\nexport function _deleteDatabase() {\r\n    const request = indexedDB.deleteDatabase(DB_NAME);\r\n    return new DBPromise(request).toPromise();\r\n}\r\nexport function _openDatabase() {\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n    return new Promise((resolve, reject) => {\r\n        request.addEventListener('error', () => {\r\n            reject(request.error);\r\n        });\r\n        request.addEventListener('upgradeneeded', () => {\r\n            const db = request.result;\r\n            try {\r\n                db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n        request.addEventListener('success', async () => {\r\n            const db = request.result;\r\n            // Strange bug that occurs in Firefox when multiple tabs are opened at the\r\n            // same time. The only way to recover seems to be deleting the database\r\n            // and re-initializing it.\r\n            // https://github.com/firebase/firebase-js-sdk/issues/634\r\n            if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {\r\n                // Need to close the database or else you get a `blocked` event\r\n                db.close();\r\n                await _deleteDatabase();\r\n                resolve(await _openDatabase());\r\n            }\r\n            else {\r\n                resolve(db);\r\n            }\r\n        });\r\n    });\r\n}\r\nexport async function _putObject(db, key, value) {\r\n    const request = getObjectStore(db, true).put({\r\n        [DB_DATA_KEYPATH]: key,\r\n        value\r\n    });\r\n    return new DBPromise(request).toPromise();\r\n}\r\nasync function getObject(db, key) {\r\n    const request = getObjectStore(db, false).get(key);\r\n    const data = await new DBPromise(request).toPromise();\r\n    return data === undefined ? null : data.value;\r\n}\r\nexport function _deleteObject(db, key) {\r\n    const request = getObjectStore(db, true).delete(key);\r\n    return new DBPromise(request).toPromise();\r\n}\r\nexport const _POLLING_INTERVAL_MS = 800;\r\nexport const _TRANSACTION_RETRY_COUNT = 3;\r\nclass IndexedDBLocalPersistence {\r\n    constructor() {\r\n        this.type = \"LOCAL\" /* PersistenceType.LOCAL */;\r\n        this._shouldAllowMigration = true;\r\n        this.listeners = {};\r\n        this.localCache = {};\r\n        // setTimeout return value is platform specific\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.pollTimer = null;\r\n        this.pendingWrites = 0;\r\n        this.receiver = null;\r\n        this.sender = null;\r\n        this.serviceWorkerReceiverAvailable = false;\r\n        this.activeServiceWorker = null;\r\n        // Fire & forget the service worker registration as it may never resolve\r\n        this._workerInitializationPromise =\r\n            this.initializeServiceWorkerMessaging().then(() => { }, () => { });\r\n    }\r\n    async _openDb() {\r\n        if (this.db) {\r\n            return this.db;\r\n        }\r\n        this.db = await _openDatabase();\r\n        return this.db;\r\n    }\r\n    async _withRetries(op) {\r\n        let numAttempts = 0;\r\n        while (true) {\r\n            try {\r\n                const db = await this._openDb();\r\n                return await op(db);\r\n            }\r\n            catch (e) {\r\n                if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {\r\n                    throw e;\r\n                }\r\n                if (this.db) {\r\n                    this.db.close();\r\n                    this.db = undefined;\r\n                }\r\n                // TODO: consider adding exponential backoff\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\r\n     * postMessage interface to send these events to the worker ourselves.\r\n     */\r\n    async initializeServiceWorkerMessaging() {\r\n        return _isWorker() ? this.initializeReceiver() : this.initializeSender();\r\n    }\r\n    /**\r\n     * As the worker we should listen to events from the main window.\r\n     */\r\n    async initializeReceiver() {\r\n        this.receiver = Receiver._getInstance(_getWorkerGlobalScope());\r\n        // Refresh from persistence if we receive a KeyChanged message.\r\n        this.receiver._subscribe(\"keyChanged\" /* _EventType.KEY_CHANGED */, async (_origin, data) => {\r\n            const keys = await this._poll();\r\n            return {\r\n                keyProcessed: keys.includes(data.key)\r\n            };\r\n        });\r\n        // Let the sender know that we are listening so they give us more timeout.\r\n        this.receiver._subscribe(\"ping\" /* _EventType.PING */, async (_origin, _data) => {\r\n            return [\"keyChanged\" /* _EventType.KEY_CHANGED */];\r\n        });\r\n    }\r\n    /**\r\n     * As the main window, we should let the worker know when keys change (set and remove).\r\n     *\r\n     * @remarks\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\r\n     * may not resolve.\r\n     */\r\n    async initializeSender() {\r\n        var _a, _b;\r\n        // Check to see if there's an active service worker.\r\n        this.activeServiceWorker = await _getActiveServiceWorker();\r\n        if (!this.activeServiceWorker) {\r\n            return;\r\n        }\r\n        this.sender = new Sender(this.activeServiceWorker);\r\n        // Ping the service worker to check what events they can handle.\r\n        const results = await this.sender._send(\"ping\" /* _EventType.PING */, {}, 800 /* _TimeoutDuration.LONG_ACK */);\r\n        if (!results) {\r\n            return;\r\n        }\r\n        if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) &&\r\n            ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes(\"keyChanged\" /* _EventType.KEY_CHANGED */))) {\r\n            this.serviceWorkerReceiverAvailable = true;\r\n        }\r\n    }\r\n    /**\r\n     * Let the worker know about a changed key, the exact key doesn't technically matter since the\r\n     * worker will just trigger a full sync anyway.\r\n     *\r\n     * @remarks\r\n     * For now, we only support one service worker per page.\r\n     *\r\n     * @param key - Storage key which changed.\r\n     */\r\n    async notifyServiceWorker(key) {\r\n        if (!this.sender ||\r\n            !this.activeServiceWorker ||\r\n            _getServiceWorkerController() !== this.activeServiceWorker) {\r\n            return;\r\n        }\r\n        try {\r\n            await this.sender._send(\"keyChanged\" /* _EventType.KEY_CHANGED */, { key }, \r\n            // Use long timeout if receiver has previously responded to a ping from us.\r\n            this.serviceWorkerReceiverAvailable\r\n                ? 800 /* _TimeoutDuration.LONG_ACK */\r\n                : 50 /* _TimeoutDuration.ACK */);\r\n        }\r\n        catch (_a) {\r\n            // This is a best effort approach. Ignore errors.\r\n        }\r\n    }\r\n    async _isAvailable() {\r\n        try {\r\n            if (!indexedDB) {\r\n                return false;\r\n            }\r\n            const db = await _openDatabase();\r\n            await _putObject(db, STORAGE_AVAILABLE_KEY, '1');\r\n            await _deleteObject(db, STORAGE_AVAILABLE_KEY);\r\n            return true;\r\n        }\r\n        catch (_a) { }\r\n        return false;\r\n    }\r\n    async _withPendingWrite(write) {\r\n        this.pendingWrites++;\r\n        try {\r\n            await write();\r\n        }\r\n        finally {\r\n            this.pendingWrites--;\r\n        }\r\n    }\r\n    async _set(key, value) {\r\n        return this._withPendingWrite(async () => {\r\n            await this._withRetries((db) => _putObject(db, key, value));\r\n            this.localCache[key] = value;\r\n            return this.notifyServiceWorker(key);\r\n        });\r\n    }\r\n    async _get(key) {\r\n        const obj = (await this._withRetries((db) => getObject(db, key)));\r\n        this.localCache[key] = obj;\r\n        return obj;\r\n    }\r\n    async _remove(key) {\r\n        return this._withPendingWrite(async () => {\r\n            await this._withRetries((db) => _deleteObject(db, key));\r\n            delete this.localCache[key];\r\n            return this.notifyServiceWorker(key);\r\n        });\r\n    }\r\n    async _poll() {\r\n        // TODO: check if we need to fallback if getAll is not supported\r\n        const result = await this._withRetries((db) => {\r\n            const getAllRequest = getObjectStore(db, false).getAll();\r\n            return new DBPromise(getAllRequest).toPromise();\r\n        });\r\n        if (!result) {\r\n            return [];\r\n        }\r\n        // If we have pending writes in progress abort, we'll get picked up on the next poll\r\n        if (this.pendingWrites !== 0) {\r\n            return [];\r\n        }\r\n        const keys = [];\r\n        const keysInResult = new Set();\r\n        for (const { fbase_key: key, value } of result) {\r\n            keysInResult.add(key);\r\n            if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {\r\n                this.notifyListeners(key, value);\r\n                keys.push(key);\r\n            }\r\n        }\r\n        for (const localKey of Object.keys(this.localCache)) {\r\n            if (this.localCache[localKey] && !keysInResult.has(localKey)) {\r\n                // Deleted\r\n                this.notifyListeners(localKey, null);\r\n                keys.push(localKey);\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n    notifyListeners(key, newValue) {\r\n        this.localCache[key] = newValue;\r\n        const listeners = this.listeners[key];\r\n        if (listeners) {\r\n            for (const listener of Array.from(listeners)) {\r\n                listener(newValue);\r\n            }\r\n        }\r\n    }\r\n    startPolling() {\r\n        this.stopPolling();\r\n        this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);\r\n    }\r\n    stopPolling() {\r\n        if (this.pollTimer) {\r\n            clearInterval(this.pollTimer);\r\n            this.pollTimer = null;\r\n        }\r\n    }\r\n    _addListener(key, listener) {\r\n        if (Object.keys(this.listeners).length === 0) {\r\n            this.startPolling();\r\n        }\r\n        if (!this.listeners[key]) {\r\n            this.listeners[key] = new Set();\r\n            // Populate the cache to avoid spuriously triggering on first poll.\r\n            void this._get(key); // This can happen in the background async and we can return immediately.\r\n        }\r\n        this.listeners[key].add(listener);\r\n    }\r\n    _removeListener(key, listener) {\r\n        if (this.listeners[key]) {\r\n            this.listeners[key].delete(listener);\r\n            if (this.listeners[key].size === 0) {\r\n                delete this.listeners[key];\r\n            }\r\n        }\r\n        if (Object.keys(this.listeners).length === 0) {\r\n            this.stopPolling();\r\n        }\r\n    }\r\n}\r\nIndexedDBLocalPersistence.type = 'LOCAL';\r\n/**\r\n * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\r\n * for the underlying storage.\r\n *\r\n * @public\r\n */\r\nexport const indexedDBLocalPersistence = IndexedDBLocalPersistence;\r\n//# sourceMappingURL=indexed_db.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/persistence/index.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/messagechannel/index.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/messagechannel/receiver.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/messagechannel/sender.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/util/worker.ts"],"map":"{\"version\":3,\"file\":\"indexed_db.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/platform_browser/persistence/indexed_db.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/platform_browser/persistence/indexed_db.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Persistence } from '../../model/public_types';\r\nimport { PersistenceValue } from '../../core/persistence/';\r\nexport declare const DB_NAME = \"firebaseLocalStorageDb\";\r\nexport declare function _clearDatabase(db: IDBDatabase): Promise<void>;\r\nexport declare function _deleteDatabase(): Promise<void>;\r\nexport declare function _openDatabase(): Promise<IDBDatabase>;\r\nexport declare function _putObject(db: IDBDatabase, key: string, value: PersistenceValue | string): Promise<void>;\r\nexport declare function _deleteObject(db: IDBDatabase, key: string): Promise<void>;\r\nexport declare const _POLLING_INTERVAL_MS = 800;\r\nexport declare const _TRANSACTION_RETRY_COUNT = 3;\r\n/**\r\n * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\r\n * for the underlying storage.\r\n *\r\n * @public\r\n */\r\nexport declare const indexedDBLocalPersistence: Persistence;\r\n"}}
