{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { createAuthUri } from '../../api/authentication/create_auth_uri';\r\nimport * as api from '../../api/authentication/email_and_password';\r\nimport { _getCurrentUrl, _isHttpOrHttps } from '../util/location';\r\nimport { _setActionCodeSettingsOnRequest } from './action_code_settings';\r\nimport { getModularInstance } from '@firebase/util';\r\n/**\r\n * Gets the list of possible sign in methods for the given email address.\r\n *\r\n * @remarks\r\n * This is useful to differentiate methods of sign-in for the same provider, eg.\r\n * {@link EmailAuthProvider} which has 2 methods of sign-in,\r\n * {@link SignInMethod}.EMAIL_PASSWORD and\r\n * {@link SignInMethod}.EMAIL_LINK.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n *\r\n * @public\r\n */\r\nexport async function fetchSignInMethodsForEmail(auth, email) {\r\n    // createAuthUri returns an error if continue URI is not http or https.\r\n    // For environments like Cordova, Chrome extensions, native frameworks, file\r\n    // systems, etc, use http://localhost as continue URL.\r\n    const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\r\n    const request = {\r\n        identifier: email,\r\n        continueUri\r\n    };\r\n    const { signinMethods } = await createAuthUri(getModularInstance(auth), request);\r\n    return signinMethods || [];\r\n}\r\n/**\r\n * Sends a verification email to a user.\r\n *\r\n * @remarks\r\n * The verification process is completed by calling {@link applyActionCode}.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendEmailVerification(user, actionCodeSettings);\r\n * // Obtain code from the user.\r\n * await applyActionCode(auth, code);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nexport async function sendEmailVerification(user, actionCodeSettings) {\r\n    const userInternal = getModularInstance(user);\r\n    const idToken = await user.getIdToken();\r\n    const request = {\r\n        requestType: \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */,\r\n        idToken\r\n    };\r\n    if (actionCodeSettings) {\r\n        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\r\n    }\r\n    const { email } = await api.sendEmailVerification(userInternal.auth, request);\r\n    if (email !== user.email) {\r\n        await user.reload();\r\n    }\r\n}\r\n/**\r\n * Sends a verification email to a new email address.\r\n *\r\n * @remarks\r\n * The user's email will be updated to the new one after being verified.\r\n *\r\n * If you have a custom email action handler, you can complete the verification process by calling\r\n * {@link applyActionCode}.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\r\n * // Obtain code from the user.\r\n * await applyActionCode(auth, code);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param newEmail - The new email address to be verified before update.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nexport async function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {\r\n    const userInternal = getModularInstance(user);\r\n    const idToken = await user.getIdToken();\r\n    const request = {\r\n        requestType: \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */,\r\n        idToken,\r\n        newEmail\r\n    };\r\n    if (actionCodeSettings) {\r\n        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\r\n    }\r\n    const { email } = await api.verifyAndChangeEmail(userInternal.auth, request);\r\n    if (email !== user.email) {\r\n        // If the local copy of the email on user is outdated, reload the\r\n        // user.\r\n        await user.reload();\r\n    }\r\n}\r\n//# sourceMappingURL=email.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/create_auth_uri.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/email_and_password.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/user.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/location.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/strategies/action_code_settings.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"email.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/strategies/email.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;AASH,OAAO,EACL,aAAa,EAEd,MAAM,0CAA0C,CAAC;AAClD,OAAO,KAAK,GAAG,MAAM,6CAA6C,CAAC;AAEnE,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClE,OAAO,EAAE,+BAA+B,EAAE,MAAM,wBAAwB,CAAC;AACzE,OAAO,EAAE,kBAAkB,EAAE,MAAM,gBAAgB,CAAC;AAEpD;;;;;;;;;;;;;GAaG;AACH,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAC9C,IAAU,EACV,KAAa;IAEb,uEAAuE;IACvE,4EAA4E;IAC5E,sDAAsD;IACtD,MAAM,WAAW,GAAG,cAAc,EAAE,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,kBAAkB,CAAC;IAC7E,MAAM,OAAO,GAAyB;QACpC,UAAU,EAAE,KAAK;QACjB,WAAW;KACZ,CAAC;IAEF,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,aAAa,CAC3C,kBAAkB,CAAC,IAAI,CAAC,EACxB,OAAO,CACR,CAAC;IAEF,OAAO,aAAa,IAAI,EAAE,CAAC;AAC7B,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACH,MAAM,CAAC,KAAK,UAAU,qBAAqB,CACzC,IAAU,EACV,kBAA8C;IAE9C,MAAM,YAAY,GAAG,kBAAkB,CAAC,IAAI,CAAiB,CAAC;IAC9D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;IACxC,MAAM,OAAO,GAA2B;QACtC,WAAW,uDAAkC;QAC7C,OAAO;KACR,CAAC;IACF,IAAI,kBAAkB,EAAE;QACtB,+BAA+B,CAC7B,YAAY,CAAC,IAAI,EACjB,OAAO,EACP,kBAAkB,CACnB,CAAC;KACH;IAED,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,GAAG,CAAC,qBAAqB,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAE9E,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE;QACxB,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;KACrB;AACH,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAC3C,IAAU,EACV,QAAgB,EAChB,kBAA8C;IAE9C,MAAM,YAAY,GAAG,kBAAkB,CAAC,IAAI,CAAiB,CAAC;IAC9D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;IACxC,MAAM,OAAO,GAAoC;QAC/C,WAAW,6EAA6C;QACxD,OAAO;QACP,QAAQ;KACT,CAAC;IACF,IAAI,kBAAkB,EAAE;QACtB,+BAA+B,CAC7B,YAAY,CAAC,IAAI,EACjB,OAAO,EACP,kBAAkB,CACnB,CAAC;KACH;IAED,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,GAAG,CAAC,oBAAoB,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAE7E,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE;QACxB,iEAAiE;QACjE,QAAQ;QACR,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;KACrB;AACH,CAAC\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/strategies/email.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { ActionCodeSettings, Auth, User } from '../../model/public_types';\r\n/**\r\n * Gets the list of possible sign in methods for the given email address.\r\n *\r\n * @remarks\r\n * This is useful to differentiate methods of sign-in for the same provider, eg.\r\n * {@link EmailAuthProvider} which has 2 methods of sign-in,\r\n * {@link SignInMethod}.EMAIL_PASSWORD and\r\n * {@link SignInMethod}.EMAIL_LINK.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n *\r\n * @public\r\n */\r\nexport declare function fetchSignInMethodsForEmail(auth: Auth, email: string): Promise<string[]>;\r\n/**\r\n * Sends a verification email to a user.\r\n *\r\n * @remarks\r\n * The verification process is completed by calling {@link applyActionCode}.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendEmailVerification(user, actionCodeSettings);\r\n * // Obtain code from the user.\r\n * await applyActionCode(auth, code);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nexport declare function sendEmailVerification(user: User, actionCodeSettings?: ActionCodeSettings | null): Promise<void>;\r\n/**\r\n * Sends a verification email to a new email address.\r\n *\r\n * @remarks\r\n * The user's email will be updated to the new one after being verified.\r\n *\r\n * If you have a custom email action handler, you can complete the verification process by calling\r\n * {@link applyActionCode}.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\r\n * // Obtain code from the user.\r\n * await applyActionCode(auth, code);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param newEmail - The new email address to be verified before update.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nexport declare function verifyBeforeUpdateEmail(user: User, newEmail: string, actionCodeSettings?: ActionCodeSettings | null): Promise<void>;\r\n"}}
