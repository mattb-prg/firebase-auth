{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { _assert } from '../../core/util/assert';\r\nexport const _SOLVE_TIME_MS = 500;\r\nexport const _EXPIRATION_TIME_MS = 60000;\r\nexport const _WIDGET_ID_START = 1000000000000;\r\nexport class MockReCaptcha {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        this.counter = _WIDGET_ID_START;\r\n        this._widgets = new Map();\r\n    }\r\n    render(container, parameters) {\r\n        const id = this.counter;\r\n        this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));\r\n        this.counter++;\r\n        return id;\r\n    }\r\n    reset(optWidgetId) {\r\n        var _a;\r\n        const id = optWidgetId || _WIDGET_ID_START;\r\n        void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.delete());\r\n        this._widgets.delete(id);\r\n    }\r\n    getResponse(optWidgetId) {\r\n        var _a;\r\n        const id = optWidgetId || _WIDGET_ID_START;\r\n        return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || '';\r\n    }\r\n    async execute(optWidgetId) {\r\n        var _a;\r\n        const id = optWidgetId || _WIDGET_ID_START;\r\n        void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.execute());\r\n        return '';\r\n    }\r\n}\r\nexport class MockGreCAPTCHATopLevel {\r\n    constructor() {\r\n        this.enterprise = new MockGreCAPTCHA();\r\n    }\r\n    ready(callback) {\r\n        callback();\r\n    }\r\n    execute(\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    _siteKey, _options) {\r\n        return Promise.resolve('token');\r\n    }\r\n    render(\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    _container, _parameters) {\r\n        return '';\r\n    }\r\n}\r\nexport class MockGreCAPTCHA {\r\n    ready(callback) {\r\n        callback();\r\n    }\r\n    execute(\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    _siteKey, _options) {\r\n        return Promise.resolve('token');\r\n    }\r\n    render(\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    _container, _parameters) {\r\n        return '';\r\n    }\r\n}\r\nexport class MockWidget {\r\n    constructor(containerOrId, appName, params) {\r\n        this.params = params;\r\n        this.timerId = null;\r\n        this.deleted = false;\r\n        this.responseToken = null;\r\n        this.clickHandler = () => {\r\n            this.execute();\r\n        };\r\n        const container = typeof containerOrId === 'string'\r\n            ? document.getElementById(containerOrId)\r\n            : containerOrId;\r\n        _assert(container, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, { appName });\r\n        this.container = container;\r\n        this.isVisible = this.params.size !== 'invisible';\r\n        if (this.isVisible) {\r\n            this.execute();\r\n        }\r\n        else {\r\n            this.container.addEventListener('click', this.clickHandler);\r\n        }\r\n    }\r\n    getResponse() {\r\n        this.checkIfDeleted();\r\n        return this.responseToken;\r\n    }\r\n    delete() {\r\n        this.checkIfDeleted();\r\n        this.deleted = true;\r\n        if (this.timerId) {\r\n            clearTimeout(this.timerId);\r\n            this.timerId = null;\r\n        }\r\n        this.container.removeEventListener('click', this.clickHandler);\r\n    }\r\n    execute() {\r\n        this.checkIfDeleted();\r\n        if (this.timerId) {\r\n            return;\r\n        }\r\n        this.timerId = window.setTimeout(() => {\r\n            this.responseToken = generateRandomAlphaNumericString(50);\r\n            const { callback, 'expired-callback': expiredCallback } = this.params;\r\n            if (callback) {\r\n                try {\r\n                    callback(this.responseToken);\r\n                }\r\n                catch (e) { }\r\n            }\r\n            this.timerId = window.setTimeout(() => {\r\n                this.timerId = null;\r\n                this.responseToken = null;\r\n                if (expiredCallback) {\r\n                    try {\r\n                        expiredCallback();\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n                if (this.isVisible) {\r\n                    this.execute();\r\n                }\r\n            }, _EXPIRATION_TIME_MS);\r\n        }, _SOLVE_TIME_MS);\r\n    }\r\n    checkIfDeleted() {\r\n        if (this.deleted) {\r\n            throw new Error('reCAPTCHA mock was already deleted!');\r\n        }\r\n    }\r\n}\r\nfunction generateRandomAlphaNumericString(len) {\r\n    const chars = [];\r\n    const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    for (let i = 0; i < len; i++) {\r\n        chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));\r\n    }\r\n    return chars.join('');\r\n}\r\n//# sourceMappingURL=recaptcha_mock.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/errors.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/assert.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/auth.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/recaptcha/recaptcha.ts"],"map":"{\"version\":3,\"file\":\"recaptcha_mock.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/platform_browser/recaptcha/recaptcha_mock.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/platform_browser/recaptcha/recaptcha_mock.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { AuthInternal } from '../../model/auth';\r\nimport { RecaptchaParameters } from '../../model/public_types';\r\nimport { Recaptcha, GreCAPTCHATopLevel, GreCAPTCHARenderOption, GreCAPTCHA } from './recaptcha';\r\nexport declare const _SOLVE_TIME_MS = 500;\r\nexport declare const _EXPIRATION_TIME_MS = 60000;\r\nexport declare const _WIDGET_ID_START = 1000000000000;\r\nexport interface Widget {\r\n    getResponse: () => string | null;\r\n    delete: () => void;\r\n    execute: () => void;\r\n}\r\nexport declare class MockReCaptcha implements Recaptcha {\r\n    private readonly auth;\r\n    private counter;\r\n    _widgets: Map<number, Widget>;\r\n    constructor(auth: AuthInternal);\r\n    render(container: string | HTMLElement, parameters?: RecaptchaParameters): number;\r\n    reset(optWidgetId?: number): void;\r\n    getResponse(optWidgetId?: number): string;\r\n    execute(optWidgetId?: number | string): Promise<string>;\r\n}\r\nexport declare class MockGreCAPTCHATopLevel implements GreCAPTCHATopLevel {\r\n    enterprise: GreCAPTCHA;\r\n    ready(callback: () => void): void;\r\n    execute(_siteKey: string, _options: {\r\n        action: string;\r\n    }): Promise<string>;\r\n    render(_container: string | HTMLElement, _parameters: GreCAPTCHARenderOption): string;\r\n}\r\nexport declare class MockGreCAPTCHA implements GreCAPTCHA {\r\n    ready(callback: () => void): void;\r\n    execute(_siteKey: string, _options: {\r\n        action: string;\r\n    }): Promise<string>;\r\n    render(_container: string | HTMLElement, _parameters: GreCAPTCHARenderOption): string;\r\n}\r\nexport declare class MockWidget {\r\n    private readonly params;\r\n    private readonly container;\r\n    private readonly isVisible;\r\n    private timerId;\r\n    private deleted;\r\n    private responseToken;\r\n    private readonly clickHandler;\r\n    constructor(containerOrId: string | HTMLElement, appName: string, params: RecaptchaParameters);\r\n    getResponse(): string | null;\r\n    delete(): void;\r\n    execute(): void;\r\n    private checkIfDeleted;\r\n}\r\n"}}
