{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { createSubscribe, ErrorFactory, getModularInstance } from '@firebase/util';\r\nimport { _DEFAULT_AUTH_ERROR_FACTORY } from '../errors';\r\nimport { PersistenceUserManager } from '../persistence/persistence_user_manager';\r\nimport { _reloadWithoutSaving } from '../user/reload';\r\nimport { _assert } from '../util/assert';\r\nimport { _getInstance } from '../util/instantiator';\r\nimport { _getUserLanguage } from '../util/navigator';\r\nimport { _getClientVersion } from '../util/version';\r\nimport { AuthMiddlewareQueue } from './middleware';\r\nimport { _logWarn } from '../util/log';\r\nimport { _getPasswordPolicy } from '../../api/password_policy/get_password_policy';\r\nimport { PasswordPolicyImpl } from './password_policy_impl';\r\nexport class AuthImpl {\r\n    constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config) {\r\n        this.app = app;\r\n        this.heartbeatServiceProvider = heartbeatServiceProvider;\r\n        this.appCheckServiceProvider = appCheckServiceProvider;\r\n        this.config = config;\r\n        this.currentUser = null;\r\n        this.emulatorConfig = null;\r\n        this.operations = Promise.resolve();\r\n        this.authStateSubscription = new Subscription(this);\r\n        this.idTokenSubscription = new Subscription(this);\r\n        this.beforeStateQueue = new AuthMiddlewareQueue(this);\r\n        this.redirectUser = null;\r\n        this.isProactiveRefreshEnabled = false;\r\n        this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;\r\n        // Any network calls will set this to true and prevent subsequent emulator\r\n        // initialization\r\n        this._canInitEmulator = true;\r\n        this._isInitialized = false;\r\n        this._deleted = false;\r\n        this._initializationPromise = null;\r\n        this._popupRedirectResolver = null;\r\n        this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;\r\n        this._agentRecaptchaConfig = null;\r\n        this._tenantRecaptchaConfigs = {};\r\n        this._projectPasswordPolicy = null;\r\n        this._tenantPasswordPolicies = {};\r\n        // Tracks the last notified UID for state change listeners to prevent\r\n        // repeated calls to the callbacks. Undefined means it's never been\r\n        // called, whereas null means it's been called with a signed out user\r\n        this.lastNotifiedUid = undefined;\r\n        this.languageCode = null;\r\n        this.tenantId = null;\r\n        this.settings = { appVerificationDisabledForTesting: false };\r\n        this.frameworks = [];\r\n        this.name = app.name;\r\n        this.clientVersion = config.sdkClientVersion;\r\n    }\r\n    _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {\r\n        if (popupRedirectResolver) {\r\n            this._popupRedirectResolver = _getInstance(popupRedirectResolver);\r\n        }\r\n        // Have to check for app deletion throughout initialization (after each\r\n        // promise resolution)\r\n        this._initializationPromise = this.queue(async () => {\r\n            var _a, _b;\r\n            if (this._deleted) {\r\n                return;\r\n            }\r\n            this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);\r\n            if (this._deleted) {\r\n                return;\r\n            }\r\n            // Initialize the resolver early if necessary (only applicable to web:\r\n            // this will cause the iframe to load immediately in certain cases)\r\n            if ((_a = this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively) {\r\n                // If this fails, don't halt auth loading\r\n                try {\r\n                    await this._popupRedirectResolver._initialize(this);\r\n                }\r\n                catch (e) {\r\n                    /* Ignore the error */\r\n                }\r\n            }\r\n            await this.initializeCurrentUser(popupRedirectResolver);\r\n            this.lastNotifiedUid = ((_b = this.currentUser) === null || _b === void 0 ? void 0 : _b.uid) || null;\r\n            if (this._deleted) {\r\n                return;\r\n            }\r\n            this._isInitialized = true;\r\n        });\r\n        return this._initializationPromise;\r\n    }\r\n    /**\r\n     * If the persistence is changed in another window, the user manager will let us know\r\n     */\r\n    async _onStorageEvent() {\r\n        if (this._deleted) {\r\n            return;\r\n        }\r\n        const user = await this.assertedPersistence.getCurrentUser();\r\n        if (!this.currentUser && !user) {\r\n            // No change, do nothing (was signed out and remained signed out).\r\n            return;\r\n        }\r\n        // If the same user is to be synchronized.\r\n        if (this.currentUser && user && this.currentUser.uid === user.uid) {\r\n            // Data update, simply copy data changes.\r\n            this._currentUser._assign(user);\r\n            // If tokens changed from previous user tokens, this will trigger\r\n            // notifyAuthListeners_.\r\n            await this.currentUser.getIdToken();\r\n            return;\r\n        }\r\n        // Update current Auth state. Either a new login or logout.\r\n        // Skip blocking callbacks, they should not apply to a change in another tab.\r\n        await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true);\r\n    }\r\n    async initializeCurrentUser(popupRedirectResolver) {\r\n        var _a;\r\n        // First check to see if we have a pending redirect event.\r\n        const previouslyStoredUser = (await this.assertedPersistence.getCurrentUser());\r\n        let futureCurrentUser = previouslyStoredUser;\r\n        let needsTocheckMiddleware = false;\r\n        if (popupRedirectResolver && this.config.authDomain) {\r\n            await this.getOrInitRedirectPersistenceManager();\r\n            const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;\r\n            const storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;\r\n            const result = await this.tryRedirectSignIn(popupRedirectResolver);\r\n            // If the stored user (i.e. the old \"currentUser\") has a redirectId that\r\n            // matches the redirect user, then we want to initially sign in with the\r\n            // new user object from result.\r\n            // TODO(samgho): More thoroughly test all of this\r\n            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) &&\r\n                (result === null || result === void 0 ? void 0 : result.user)) {\r\n                futureCurrentUser = result.user;\r\n                needsTocheckMiddleware = true;\r\n            }\r\n        }\r\n        // If no user in persistence, there is no current user. Set to null.\r\n        if (!futureCurrentUser) {\r\n            return this.directlySetCurrentUser(null);\r\n        }\r\n        if (!futureCurrentUser._redirectEventId) {\r\n            // This isn't a redirect link operation, we can reload and bail.\r\n            // First though, ensure that we check the middleware is happy.\r\n            if (needsTocheckMiddleware) {\r\n                try {\r\n                    await this.beforeStateQueue.runMiddleware(futureCurrentUser);\r\n                }\r\n                catch (e) {\r\n                    futureCurrentUser = previouslyStoredUser;\r\n                    // We know this is available since the bit is only set when the\r\n                    // resolver is available\r\n                    this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));\r\n                }\r\n            }\r\n            if (futureCurrentUser) {\r\n                return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\r\n            }\r\n            else {\r\n                return this.directlySetCurrentUser(null);\r\n            }\r\n        }\r\n        _assert(this._popupRedirectResolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        await this.getOrInitRedirectPersistenceManager();\r\n        // If the redirect user's event ID matches the current user's event ID,\r\n        // DO NOT reload the current user, otherwise they'll be cleared from storage.\r\n        // This is important for the reauthenticateWithRedirect() flow.\r\n        if (this.redirectUser &&\r\n            this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {\r\n            return this.directlySetCurrentUser(futureCurrentUser);\r\n        }\r\n        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\r\n    }\r\n    async tryRedirectSignIn(redirectResolver) {\r\n        // The redirect user needs to be checked (and signed in if available)\r\n        // during auth initialization. All of the normal sign in and link/reauth\r\n        // flows call back into auth and push things onto the promise queue. We\r\n        // need to await the result of the redirect sign in *inside the promise\r\n        // queue*. This presents a problem: we run into deadlock. See:\r\n        //    ┌> [Initialization] ─────┐\r\n        //    ┌> [<other queue tasks>] │\r\n        //    └─ [getRedirectResult] <─┘\r\n        //    where [] are tasks on the queue and arrows denote awaits\r\n        // Initialization will never complete because it's waiting on something\r\n        // that's waiting for initialization to complete!\r\n        //\r\n        // Instead, this method calls getRedirectResult() (stored in\r\n        // _completeRedirectFn) with an optional parameter that instructs all of\r\n        // the underlying auth operations to skip anything that mutates auth state.\r\n        let result = null;\r\n        try {\r\n            // We know this._popupRedirectResolver is set since redirectResolver\r\n            // is passed in. The _completeRedirectFn expects the unwrapped extern.\r\n            result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);\r\n        }\r\n        catch (e) {\r\n            // Swallow any errors here; the code can retrieve them in\r\n            // getRedirectResult().\r\n            await this._setRedirectUser(null);\r\n        }\r\n        return result;\r\n    }\r\n    async reloadAndSetCurrentUserOrClear(user) {\r\n        try {\r\n            await _reloadWithoutSaving(user);\r\n        }\r\n        catch (e) {\r\n            if ((e === null || e === void 0 ? void 0 : e.code) !==\r\n                `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\r\n                // Something's wrong with the user's token. Log them out and remove\r\n                // them from storage\r\n                return this.directlySetCurrentUser(null);\r\n            }\r\n        }\r\n        return this.directlySetCurrentUser(user);\r\n    }\r\n    useDeviceLanguage() {\r\n        this.languageCode = _getUserLanguage();\r\n    }\r\n    async _delete() {\r\n        this._deleted = true;\r\n    }\r\n    async updateCurrentUser(userExtern) {\r\n        // The public updateCurrentUser method needs to make a copy of the user,\r\n        // and also check that the project matches\r\n        const user = userExtern\r\n            ? getModularInstance(userExtern)\r\n            : null;\r\n        if (user) {\r\n            _assert(user.auth.config.apiKey === this.config.apiKey, this, \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */);\r\n        }\r\n        return this._updateCurrentUser(user && user._clone(this));\r\n    }\r\n    async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {\r\n        if (this._deleted) {\r\n            return;\r\n        }\r\n        if (user) {\r\n            _assert(this.tenantId === user.tenantId, this, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\r\n        }\r\n        if (!skipBeforeStateCallbacks) {\r\n            await this.beforeStateQueue.runMiddleware(user);\r\n        }\r\n        return this.queue(async () => {\r\n            await this.directlySetCurrentUser(user);\r\n            this.notifyAuthListeners();\r\n        });\r\n    }\r\n    async signOut() {\r\n        // Run first, to block _setRedirectUser() if any callbacks fail.\r\n        await this.beforeStateQueue.runMiddleware(null);\r\n        // Clear the redirect user when signOut is called\r\n        if (this.redirectPersistenceManager || this._popupRedirectResolver) {\r\n            await this._setRedirectUser(null);\r\n        }\r\n        // Prevent callbacks from being called again in _updateCurrentUser, as\r\n        // they were already called in the first line.\r\n        return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true);\r\n    }\r\n    setPersistence(persistence) {\r\n        return this.queue(async () => {\r\n            await this.assertedPersistence.setPersistence(_getInstance(persistence));\r\n        });\r\n    }\r\n    _getRecaptchaConfig() {\r\n        if (this.tenantId == null) {\r\n            return this._agentRecaptchaConfig;\r\n        }\r\n        else {\r\n            return this._tenantRecaptchaConfigs[this.tenantId];\r\n        }\r\n    }\r\n    async validatePassword(password) {\r\n        if (!this._getPasswordPolicyInternal()) {\r\n            await this._updatePasswordPolicy();\r\n        }\r\n        // Password policy will be defined after fetching.\r\n        const passwordPolicy = this._getPasswordPolicyInternal();\r\n        // Check that the policy schema version is supported by the SDK.\r\n        // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.\r\n        if (passwordPolicy.schemaVersion !==\r\n            this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {\r\n            return Promise.reject(this._errorFactory.create(\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */, {}));\r\n        }\r\n        return passwordPolicy.validatePassword(password);\r\n    }\r\n    _getPasswordPolicyInternal() {\r\n        if (this.tenantId === null) {\r\n            return this._projectPasswordPolicy;\r\n        }\r\n        else {\r\n            return this._tenantPasswordPolicies[this.tenantId];\r\n        }\r\n    }\r\n    async _updatePasswordPolicy() {\r\n        const response = await _getPasswordPolicy(this);\r\n        const passwordPolicy = new PasswordPolicyImpl(response);\r\n        if (this.tenantId === null) {\r\n            this._projectPasswordPolicy = passwordPolicy;\r\n        }\r\n        else {\r\n            this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\r\n        }\r\n    }\r\n    _getPersistence() {\r\n        return this.assertedPersistence.persistence.type;\r\n    }\r\n    _updateErrorMap(errorMap) {\r\n        this._errorFactory = new ErrorFactory('auth', 'Firebase', errorMap());\r\n    }\r\n    onAuthStateChanged(nextOrObserver, error, completed) {\r\n        return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\r\n    }\r\n    beforeAuthStateChanged(callback, onAbort) {\r\n        return this.beforeStateQueue.pushCallback(callback, onAbort);\r\n    }\r\n    onIdTokenChanged(nextOrObserver, error, completed) {\r\n        return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\r\n    }\r\n    authStateReady() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.currentUser) {\r\n                resolve();\r\n            }\r\n            else {\r\n                const unsubscribe = this.onAuthStateChanged(() => {\r\n                    unsubscribe();\r\n                    resolve();\r\n                }, reject);\r\n            }\r\n        });\r\n    }\r\n    toJSON() {\r\n        var _a;\r\n        return {\r\n            apiKey: this.config.apiKey,\r\n            authDomain: this.config.authDomain,\r\n            appName: this.name,\r\n            currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()\r\n        };\r\n    }\r\n    async _setRedirectUser(user, popupRedirectResolver) {\r\n        const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);\r\n        return user === null\r\n            ? redirectManager.removeCurrentUser()\r\n            : redirectManager.setCurrentUser(user);\r\n    }\r\n    async getOrInitRedirectPersistenceManager(popupRedirectResolver) {\r\n        if (!this.redirectPersistenceManager) {\r\n            const resolver = (popupRedirectResolver && _getInstance(popupRedirectResolver)) ||\r\n                this._popupRedirectResolver;\r\n            _assert(resolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n            this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], \"redirectUser\" /* KeyName.REDIRECT_USER */);\r\n            this.redirectUser =\r\n                await this.redirectPersistenceManager.getCurrentUser();\r\n        }\r\n        return this.redirectPersistenceManager;\r\n    }\r\n    async _redirectUserForId(id) {\r\n        var _a, _b;\r\n        // Make sure we've cleared any pending persistence actions if we're not in\r\n        // the initializer\r\n        if (this._isInitialized) {\r\n            await this.queue(async () => { });\r\n        }\r\n        if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {\r\n            return this._currentUser;\r\n        }\r\n        if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {\r\n            return this.redirectUser;\r\n        }\r\n        return null;\r\n    }\r\n    async _persistUserIfCurrent(user) {\r\n        if (user === this.currentUser) {\r\n            return this.queue(async () => this.directlySetCurrentUser(user));\r\n        }\r\n    }\r\n    /** Notifies listeners only if the user is current */\r\n    _notifyListenersIfCurrent(user) {\r\n        if (user === this.currentUser) {\r\n            this.notifyAuthListeners();\r\n        }\r\n    }\r\n    _key() {\r\n        return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\r\n    }\r\n    _startProactiveRefresh() {\r\n        this.isProactiveRefreshEnabled = true;\r\n        if (this.currentUser) {\r\n            this._currentUser._startProactiveRefresh();\r\n        }\r\n    }\r\n    _stopProactiveRefresh() {\r\n        this.isProactiveRefreshEnabled = false;\r\n        if (this.currentUser) {\r\n            this._currentUser._stopProactiveRefresh();\r\n        }\r\n    }\r\n    /** Returns the current user cast as the internal type */\r\n    get _currentUser() {\r\n        return this.currentUser;\r\n    }\r\n    notifyAuthListeners() {\r\n        var _a, _b;\r\n        if (!this._isInitialized) {\r\n            return;\r\n        }\r\n        this.idTokenSubscription.next(this.currentUser);\r\n        const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;\r\n        if (this.lastNotifiedUid !== currentUid) {\r\n            this.lastNotifiedUid = currentUid;\r\n            this.authStateSubscription.next(this.currentUser);\r\n        }\r\n    }\r\n    registerStateListener(subscription, nextOrObserver, error, completed) {\r\n        if (this._deleted) {\r\n            return () => { };\r\n        }\r\n        const cb = typeof nextOrObserver === 'function'\r\n            ? nextOrObserver\r\n            : nextOrObserver.next.bind(nextOrObserver);\r\n        let isUnsubscribed = false;\r\n        const promise = this._isInitialized\r\n            ? Promise.resolve()\r\n            : this._initializationPromise;\r\n        _assert(promise, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        // The callback needs to be called asynchronously per the spec.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        promise.then(() => {\r\n            if (isUnsubscribed) {\r\n                return;\r\n            }\r\n            cb(this.currentUser);\r\n        });\r\n        if (typeof nextOrObserver === 'function') {\r\n            const unsubscribe = subscription.addObserver(nextOrObserver, error, completed);\r\n            return () => {\r\n                isUnsubscribed = true;\r\n                unsubscribe();\r\n            };\r\n        }\r\n        else {\r\n            const unsubscribe = subscription.addObserver(nextOrObserver);\r\n            return () => {\r\n                isUnsubscribed = true;\r\n                unsubscribe();\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Unprotected (from race conditions) method to set the current user. This\r\n     * should only be called from within a queued callback. This is necessary\r\n     * because the queue shouldn't rely on another queued callback.\r\n     */\r\n    async directlySetCurrentUser(user) {\r\n        if (this.currentUser && this.currentUser !== user) {\r\n            this._currentUser._stopProactiveRefresh();\r\n        }\r\n        if (user && this.isProactiveRefreshEnabled) {\r\n            user._startProactiveRefresh();\r\n        }\r\n        this.currentUser = user;\r\n        if (user) {\r\n            await this.assertedPersistence.setCurrentUser(user);\r\n        }\r\n        else {\r\n            await this.assertedPersistence.removeCurrentUser();\r\n        }\r\n    }\r\n    queue(action) {\r\n        // In case something errors, the callback still should be called in order\r\n        // to keep the promise chain alive\r\n        this.operations = this.operations.then(action, action);\r\n        return this.operations;\r\n    }\r\n    get assertedPersistence() {\r\n        _assert(this.persistenceManager, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        return this.persistenceManager;\r\n    }\r\n    _logFramework(framework) {\r\n        if (!framework || this.frameworks.includes(framework)) {\r\n            return;\r\n        }\r\n        this.frameworks.push(framework);\r\n        // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\r\n        // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\r\n        this.frameworks.sort();\r\n        this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());\r\n    }\r\n    _getFrameworks() {\r\n        return this.frameworks;\r\n    }\r\n    async _getAdditionalHeaders() {\r\n        var _a;\r\n        // Additional headers on every request\r\n        const headers = {\r\n            [\"X-Client-Version\" /* HttpHeader.X_CLIENT_VERSION */]: this.clientVersion\r\n        };\r\n        if (this.app.options.appId) {\r\n            headers[\"X-Firebase-gmpid\" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;\r\n        }\r\n        // If the heartbeat service exists, add the heartbeat string\r\n        const heartbeatsHeader = await ((_a = this.heartbeatServiceProvider\r\n            .getImmediate({\r\n            optional: true\r\n        })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader());\r\n        if (heartbeatsHeader) {\r\n            headers[\"X-Firebase-Client\" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;\r\n        }\r\n        // If the App Check service exists, add the App Check token in the headers\r\n        const appCheckToken = await this._getAppCheckToken();\r\n        if (appCheckToken) {\r\n            headers[\"X-Firebase-AppCheck\" /* HttpHeader.X_FIREBASE_APP_CHECK */] = appCheckToken;\r\n        }\r\n        return headers;\r\n    }\r\n    async _getAppCheckToken() {\r\n        var _a;\r\n        const appCheckTokenResult = await ((_a = this.appCheckServiceProvider\r\n            .getImmediate({ optional: true })) === null || _a === void 0 ? void 0 : _a.getToken());\r\n        if (appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.error) {\r\n            // Context: appCheck.getToken() will never throw even if an error happened.\r\n            // In the error case, a dummy token will be returned along with an error field describing\r\n            // the error. In general, we shouldn't care about the error condition and just use\r\n            // the token (actual or dummy) to send requests.\r\n            _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);\r\n        }\r\n        return appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.token;\r\n    }\r\n}\r\n/**\r\n * Method to be used to cast down to our private implmentation of Auth.\r\n * It will also handle unwrapping from the compat type if necessary\r\n *\r\n * @param auth Auth object passed in from developer\r\n */\r\nexport function _castAuth(auth) {\r\n    return getModularInstance(auth);\r\n}\r\n/** Helper class to wrap subscriber logic */\r\nclass Subscription {\r\n    constructor(auth) {\r\n        this.auth = auth;\r\n        this.observer = null;\r\n        this.addObserver = createSubscribe(observer => (this.observer = observer));\r\n    }\r\n    get next() {\r\n        _assert(this.observer, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        return this.observer.next.bind(this.observer);\r\n    }\r\n}\r\n//# sourceMappingURL=auth_impl.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/app/dist/app/src/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/component/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/app-check-interop-types/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/auth.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/popup_redirect.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/user.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/errors.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/persistence/index.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/persistence/persistence_user_manager.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/user/reload.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/assert.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/instantiator.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/navigator.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/version.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/index.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/auth/middleware.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/recaptcha/recaptcha.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/log.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/password_policy/get_password_policy.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/password_policy.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/auth/password_policy_impl.ts"],"map":"{\"version\":3,\"file\":\"auth_impl.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/auth/auth_impl.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/auth/auth_impl.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { _FirebaseService, FirebaseApp } from '@firebase/app';\r\nimport { Provider } from '@firebase/component';\r\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\r\nimport { Auth, AuthErrorMap, AuthSettings, EmulatorConfig, NextOrObserver, Persistence, PopupRedirectResolver, User, CompleteFn, ErrorFn, Unsubscribe, PasswordValidationStatus } from '../../model/public_types';\r\nimport { ErrorFactory } from '@firebase/util';\r\nimport { AuthInternal, ConfigInternal } from '../../model/auth';\r\nimport { PopupRedirectResolverInternal } from '../../model/popup_redirect';\r\nimport { UserInternal } from '../../model/user';\r\nimport { AuthErrorCode, AuthErrorParams } from '../errors';\r\nimport { PersistenceInternal } from '../persistence';\r\nimport { RecaptchaConfig } from '../../platform_browser/recaptcha/recaptcha';\r\nimport { PasswordPolicyInternal } from '../../model/password_policy';\r\nexport declare const enum DefaultConfig {\r\n    TOKEN_API_HOST = \"securetoken.googleapis.com\",\r\n    API_HOST = \"identitytoolkit.googleapis.com\",\r\n    API_SCHEME = \"https\"\r\n}\r\nexport declare class AuthImpl implements AuthInternal, _FirebaseService {\r\n    readonly app: FirebaseApp;\r\n    private readonly heartbeatServiceProvider;\r\n    private readonly appCheckServiceProvider;\r\n    readonly config: ConfigInternal;\r\n    currentUser: User | null;\r\n    emulatorConfig: EmulatorConfig | null;\r\n    private operations;\r\n    private persistenceManager?;\r\n    private redirectPersistenceManager?;\r\n    private authStateSubscription;\r\n    private idTokenSubscription;\r\n    private readonly beforeStateQueue;\r\n    private redirectUser;\r\n    private isProactiveRefreshEnabled;\r\n    private readonly EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION;\r\n    _canInitEmulator: boolean;\r\n    _isInitialized: boolean;\r\n    _deleted: boolean;\r\n    _initializationPromise: Promise<void> | null;\r\n    _popupRedirectResolver: PopupRedirectResolverInternal | null;\r\n    _errorFactory: ErrorFactory<AuthErrorCode, AuthErrorParams>;\r\n    _agentRecaptchaConfig: RecaptchaConfig | null;\r\n    _tenantRecaptchaConfigs: Record<string, RecaptchaConfig>;\r\n    _projectPasswordPolicy: PasswordPolicyInternal | null;\r\n    _tenantPasswordPolicies: Record<string, PasswordPolicyInternal>;\r\n    readonly name: string;\r\n    private lastNotifiedUid;\r\n    languageCode: string | null;\r\n    tenantId: string | null;\r\n    settings: AuthSettings;\r\n    constructor(app: FirebaseApp, heartbeatServiceProvider: Provider<'heartbeat'>, appCheckServiceProvider: Provider<AppCheckInternalComponentName>, config: ConfigInternal);\r\n    _initializeWithPersistence(persistenceHierarchy: PersistenceInternal[], popupRedirectResolver?: PopupRedirectResolver): Promise<void>;\r\n    /**\r\n     * If the persistence is changed in another window, the user manager will let us know\r\n     */\r\n    _onStorageEvent(): Promise<void>;\r\n    private initializeCurrentUser;\r\n    private tryRedirectSignIn;\r\n    private reloadAndSetCurrentUserOrClear;\r\n    useDeviceLanguage(): void;\r\n    _delete(): Promise<void>;\r\n    updateCurrentUser(userExtern: User | null): Promise<void>;\r\n    _updateCurrentUser(user: User | null, skipBeforeStateCallbacks?: boolean): Promise<void>;\r\n    signOut(): Promise<void>;\r\n    setPersistence(persistence: Persistence): Promise<void>;\r\n    _getRecaptchaConfig(): RecaptchaConfig | null;\r\n    validatePassword(password: string): Promise<PasswordValidationStatus>;\r\n    _getPasswordPolicyInternal(): PasswordPolicyInternal | null;\r\n    _updatePasswordPolicy(): Promise<void>;\r\n    _getPersistence(): string;\r\n    _updateErrorMap(errorMap: AuthErrorMap): void;\r\n    onAuthStateChanged(nextOrObserver: NextOrObserver<User>, error?: ErrorFn, completed?: CompleteFn): Unsubscribe;\r\n    beforeAuthStateChanged(callback: (user: User | null) => void | Promise<void>, onAbort?: () => void): Unsubscribe;\r\n    onIdTokenChanged(nextOrObserver: NextOrObserver<User>, error?: ErrorFn, completed?: CompleteFn): Unsubscribe;\r\n    authStateReady(): Promise<void>;\r\n    toJSON(): object;\r\n    _setRedirectUser(user: UserInternal | null, popupRedirectResolver?: PopupRedirectResolver): Promise<void>;\r\n    private getOrInitRedirectPersistenceManager;\r\n    _redirectUserForId(id: string): Promise<UserInternal | null>;\r\n    _persistUserIfCurrent(user: UserInternal): Promise<void>;\r\n    /** Notifies listeners only if the user is current */\r\n    _notifyListenersIfCurrent(user: UserInternal): void;\r\n    _key(): string;\r\n    _startProactiveRefresh(): void;\r\n    _stopProactiveRefresh(): void;\r\n    /** Returns the current user cast as the internal type */\r\n    get _currentUser(): UserInternal;\r\n    private notifyAuthListeners;\r\n    private registerStateListener;\r\n    /**\r\n     * Unprotected (from race conditions) method to set the current user. This\r\n     * should only be called from within a queued callback. This is necessary\r\n     * because the queue shouldn't rely on another queued callback.\r\n     */\r\n    private directlySetCurrentUser;\r\n    private queue;\r\n    private get assertedPersistence();\r\n    private frameworks;\r\n    private clientVersion;\r\n    _logFramework(framework: string): void;\r\n    _getFrameworks(): readonly string[];\r\n    _getAdditionalHeaders(): Promise<Record<string, string>>;\r\n    _getAppCheckToken(): Promise<string | undefined>;\r\n}\r\n/**\r\n * Method to be used to cast down to our private implmentation of Auth.\r\n * It will also handle unwrapping from the compat type if necessary\r\n *\r\n * @param auth Auth object passed in from developer\r\n */\r\nexport declare function _castAuth(auth: Auth): AuthInternal;\r\n"}}
