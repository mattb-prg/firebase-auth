{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { _addTidIfNecessary, _performApiRequest } from '../index';\r\nexport function startEnrollPhoneMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\r\n}\r\nexport function finalizeEnrollPhoneMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\r\n}\r\nexport function startEnrollTotpMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\r\n}\r\nexport function finalizeEnrollTotpMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\r\n}\r\nexport function withdrawMfa(auth, request) {\r\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:withdraw\" /* Endpoint.WITHDRAW_MFA */, _addTidIfNecessary(auth, request));\r\n}\r\n//# sourceMappingURL=mfa.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/index.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/sms.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/mfa.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/auth.ts"],"map":"{\"version\":3,\"file\":\"mfa.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/api/account_management/mfa.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAGL,kBAAkB,EAClB,kBAAkB,EACnB,MAAM,UAAU,CAAC;AA8ClB,MAAM,UAAU,mBAAmB,CACjC,IAAkB,EAClB,OAAuC;IAEvC,OAAO,kBAAkB,CAIvB,IAAI,wGAGJ,kBAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAClC,CAAC;AACJ,CAAC;AAYD,MAAM,UAAU,sBAAsB,CACpC,IAAkB,EAClB,OAA0C;IAE1C,OAAO,kBAAkB,CAIvB,IAAI,8GAGJ,kBAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAClC,CAAC;AACJ,CAAC;AAkBD,MAAM,UAAU,kBAAkB,CAChC,IAAkB,EAClB,OAAsC;IAEtC,OAAO,kBAAkB,CAIvB,IAAI,wGAGJ,kBAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAClC,CAAC;AACJ,CAAC;AAgBD,MAAM,UAAU,qBAAqB,CACnC,IAAkB,EAClB,OAAyC;IAEzC,OAAO,kBAAkB,CAIvB,IAAI,8GAGJ,kBAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAClC,CAAC;AACJ,CAAC;AAUD,MAAM,UAAU,WAAW,CACzB,IAAkB,EAClB,OAA2B;IAE3B,OAAO,kBAAkB,CACvB,IAAI,mGAGJ,kBAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAClC,CAAC;AACJ,CAAC\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/api/account_management/mfa.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { SignInWithPhoneNumberRequest } from '../authentication/sms';\r\nimport { FinalizeMfaResponse } from '../authentication/mfa';\r\nimport { AuthInternal } from '../../model/auth';\r\n/**\r\n * MFA Info as returned by the API.\r\n */\r\ninterface BaseMfaEnrollment {\r\n    mfaEnrollmentId: string;\r\n    enrolledAt: number;\r\n    displayName?: string;\r\n}\r\n/**\r\n * An MFA provided by SMS verification.\r\n */\r\nexport interface PhoneMfaEnrollment extends BaseMfaEnrollment {\r\n    phoneInfo: string;\r\n}\r\n/**\r\n * An MFA provided by TOTP (Time-based One Time Password).\r\n */\r\nexport interface TotpMfaEnrollment extends BaseMfaEnrollment {\r\n}\r\n/**\r\n * MfaEnrollment can be any subtype of BaseMfaEnrollment, currently only PhoneMfaEnrollment and TotpMfaEnrollment are supported.\r\n */\r\nexport declare type MfaEnrollment = PhoneMfaEnrollment | TotpMfaEnrollment;\r\nexport interface StartPhoneMfaEnrollmentRequest {\r\n    idToken: string;\r\n    phoneEnrollmentInfo: {\r\n        phoneNumber: string;\r\n        recaptchaToken: string;\r\n    };\r\n    tenantId?: string;\r\n}\r\nexport interface StartPhoneMfaEnrollmentResponse {\r\n    phoneSessionInfo: {\r\n        sessionInfo: string;\r\n    };\r\n}\r\nexport declare function startEnrollPhoneMfa(auth: AuthInternal, request: StartPhoneMfaEnrollmentRequest): Promise<StartPhoneMfaEnrollmentResponse>;\r\nexport interface FinalizePhoneMfaEnrollmentRequest {\r\n    idToken: string;\r\n    phoneVerificationInfo: SignInWithPhoneNumberRequest;\r\n    displayName?: string | null;\r\n    tenantId?: string;\r\n}\r\nexport interface FinalizePhoneMfaEnrollmentResponse extends FinalizeMfaResponse {\r\n}\r\nexport declare function finalizeEnrollPhoneMfa(auth: AuthInternal, request: FinalizePhoneMfaEnrollmentRequest): Promise<FinalizePhoneMfaEnrollmentResponse>;\r\nexport interface StartTotpMfaEnrollmentRequest {\r\n    idToken: string;\r\n    totpEnrollmentInfo: {};\r\n    tenantId?: string;\r\n}\r\nexport interface StartTotpMfaEnrollmentResponse {\r\n    totpSessionInfo: {\r\n        sharedSecretKey: string;\r\n        verificationCodeLength: number;\r\n        hashingAlgorithm: string;\r\n        periodSec: number;\r\n        sessionInfo: string;\r\n        finalizeEnrollmentTime: number;\r\n    };\r\n}\r\nexport declare function startEnrollTotpMfa(auth: AuthInternal, request: StartTotpMfaEnrollmentRequest): Promise<StartTotpMfaEnrollmentResponse>;\r\nexport interface TotpVerificationInfo {\r\n    sessionInfo: string;\r\n    verificationCode: string;\r\n}\r\nexport interface FinalizeTotpMfaEnrollmentRequest {\r\n    idToken: string;\r\n    totpVerificationInfo: TotpVerificationInfo;\r\n    displayName?: string | null;\r\n    tenantId?: string;\r\n}\r\nexport interface FinalizeTotpMfaEnrollmentResponse extends FinalizeMfaResponse {\r\n}\r\nexport declare function finalizeEnrollTotpMfa(auth: AuthInternal, request: FinalizeTotpMfaEnrollmentRequest): Promise<FinalizeTotpMfaEnrollmentResponse>;\r\nexport interface WithdrawMfaRequest {\r\n    idToken: string;\r\n    mfaEnrollmentId: string;\r\n    tenantId?: string;\r\n}\r\nexport interface WithdrawMfaResponse extends FinalizeMfaResponse {\r\n}\r\nexport declare function withdrawMfa(auth: AuthInternal, request: WithdrawMfaRequest): Promise<WithdrawMfaResponse>;\r\nexport {};\r\n"}}
