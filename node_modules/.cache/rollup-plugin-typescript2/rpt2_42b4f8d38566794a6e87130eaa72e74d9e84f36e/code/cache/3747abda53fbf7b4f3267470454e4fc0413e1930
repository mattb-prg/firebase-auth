{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { startEnrollPhoneMfa } from '../../api/account_management/mfa';\r\nimport { startSignInPhoneMfa } from '../../api/authentication/mfa';\r\nimport { sendPhoneVerificationCode } from '../../api/authentication/sms';\r\nimport { PhoneAuthCredential } from '../../core/credentials/phone';\r\nimport { _assertLinkedStatus, _link } from '../../core/user/link_unlink';\r\nimport { _assert } from '../../core/util/assert';\r\nimport { linkWithCredential, reauthenticateWithCredential, signInWithCredential } from '../../core/strategies/credential';\r\nimport { RECAPTCHA_VERIFIER_TYPE } from '../recaptcha/recaptcha_verifier';\r\nimport { _castAuth } from '../../core/auth/auth_impl';\r\nimport { getModularInstance } from '@firebase/util';\r\nvar ConfirmationResultImpl = /** @class */ (function () {\r\n    function ConfirmationResultImpl(verificationId, onConfirmation) {\r\n        this.verificationId = verificationId;\r\n        this.onConfirmation = onConfirmation;\r\n    }\r\n    ConfirmationResultImpl.prototype.confirm = function (verificationCode) {\r\n        var authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);\r\n        return this.onConfirmation(authCredential);\r\n    };\r\n    return ConfirmationResultImpl;\r\n}());\r\n/**\r\n * Asynchronously signs in using a phone number.\r\n *\r\n * @remarks\r\n * This method sends a code via SMS to the given\r\n * phone number, and returns a {@link ConfirmationResult}. After the user\r\n * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\r\n * with the code to sign the user in.\r\n *\r\n * For abuse prevention, this method also requires a {@link ApplicationVerifier}.\r\n * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.\r\n * This function can work on other platforms that do not support the\r\n * {@link RecaptchaVerifier} (like React Native), but you need to use a\r\n * third-party {@link ApplicationVerifier} implementation.\r\n *\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @example\r\n * ```javascript\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\r\n * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\r\n * // Obtain a verificationCode from the user.\r\n * const credential = await confirmationResult.confirm(verificationCode);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\r\nexport function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var authInternal, verificationId;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    authInternal = _castAuth(auth);\r\n                    return [4 /*yield*/, _verifyPhoneNumber(authInternal, phoneNumber, getModularInstance(appVerifier))];\r\n                case 1:\r\n                    verificationId = _a.sent();\r\n                    return [2 /*return*/, new ConfirmationResultImpl(verificationId, function (cred) {\r\n                            return signInWithCredential(authInternal, cred);\r\n                        })];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Links the user account with the given phone number.\r\n *\r\n * @remarks\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @param user - The user.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\r\nexport function linkWithPhoneNumber(user, phoneNumber, appVerifier) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var userInternal, verificationId;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    userInternal = getModularInstance(user);\r\n                    return [4 /*yield*/, _assertLinkedStatus(false, userInternal, \"phone\" /* ProviderId.PHONE */)];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [4 /*yield*/, _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier))];\r\n                case 2:\r\n                    verificationId = _a.sent();\r\n                    return [2 /*return*/, new ConfirmationResultImpl(verificationId, function (cred) {\r\n                            return linkWithCredential(userInternal, cred);\r\n                        })];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Re-authenticates a user using a fresh phone credential.\r\n *\r\n * @remarks\r\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\r\n *\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @param user - The user.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\r\nexport function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var userInternal, verificationId;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    userInternal = getModularInstance(user);\r\n                    return [4 /*yield*/, _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier))];\r\n                case 1:\r\n                    verificationId = _a.sent();\r\n                    return [2 /*return*/, new ConfirmationResultImpl(verificationId, function (cred) {\r\n                            return reauthenticateWithCredential(userInternal, cred);\r\n                        })];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Returns a verification ID to be used in conjunction with the SMS code that is sent.\r\n *\r\n */\r\nexport function _verifyPhoneNumber(auth, options, verifier) {\r\n    var _a;\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var recaptchaToken, phoneInfoOptions, session, response, mfaEnrollmentId, response, sessionInfo;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0: return [4 /*yield*/, verifier.verify()];\r\n                case 1:\r\n                    recaptchaToken = _b.sent();\r\n                    _b.label = 2;\r\n                case 2:\r\n                    _b.trys.push([2, , 10, 11]);\r\n                    _assert(typeof recaptchaToken === 'string', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n                    _assert(verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n                    phoneInfoOptions = void 0;\r\n                    if (typeof options === 'string') {\r\n                        phoneInfoOptions = {\r\n                            phoneNumber: options\r\n                        };\r\n                    }\r\n                    else {\r\n                        phoneInfoOptions = options;\r\n                    }\r\n                    if (!('session' in phoneInfoOptions)) return [3 /*break*/, 7];\r\n                    session = phoneInfoOptions.session;\r\n                    if (!('phoneNumber' in phoneInfoOptions)) return [3 /*break*/, 4];\r\n                    _assert(session.type === \"enroll\" /* MultiFactorSessionType.ENROLL */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n                    return [4 /*yield*/, startEnrollPhoneMfa(auth, {\r\n                            idToken: session.credential,\r\n                            phoneEnrollmentInfo: {\r\n                                phoneNumber: phoneInfoOptions.phoneNumber,\r\n                                recaptchaToken: recaptchaToken\r\n                            }\r\n                        })];\r\n                case 3:\r\n                    response = _b.sent();\r\n                    return [2 /*return*/, response.phoneSessionInfo.sessionInfo];\r\n                case 4:\r\n                    _assert(session.type === \"signin\" /* MultiFactorSessionType.SIGN_IN */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n                    mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) ||\r\n                        phoneInfoOptions.multiFactorUid;\r\n                    _assert(mfaEnrollmentId, auth, \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */);\r\n                    return [4 /*yield*/, startSignInPhoneMfa(auth, {\r\n                            mfaPendingCredential: session.credential,\r\n                            mfaEnrollmentId: mfaEnrollmentId,\r\n                            phoneSignInInfo: {\r\n                                recaptchaToken: recaptchaToken\r\n                            }\r\n                        })];\r\n                case 5:\r\n                    response = _b.sent();\r\n                    return [2 /*return*/, response.phoneResponseInfo.sessionInfo];\r\n                case 6: return [3 /*break*/, 9];\r\n                case 7: return [4 /*yield*/, sendPhoneVerificationCode(auth, {\r\n                        phoneNumber: phoneInfoOptions.phoneNumber,\r\n                        recaptchaToken: recaptchaToken\r\n                    })];\r\n                case 8:\r\n                    sessionInfo = (_b.sent()).sessionInfo;\r\n                    return [2 /*return*/, sessionInfo];\r\n                case 9: return [3 /*break*/, 11];\r\n                case 10:\r\n                    verifier._reset();\r\n                    return [7 /*endfinally*/];\r\n                case 11: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Updates the user's phone number.\r\n *\r\n * @remarks\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @example\r\n * ```\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\r\n * const provider = new PhoneAuthProvider(auth);\r\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\r\n * // Obtain the verificationCode from the user.\r\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n * await updatePhoneNumber(user, phoneCredential);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param credential - A credential authenticating the new phone number.\r\n *\r\n * @public\r\n */\r\nexport function updatePhoneNumber(user, credential) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, _link(getModularInstance(user), credential)];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=phone.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/account_management/mfa.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/mfa.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/sms.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/application_verifier.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/credentials/phone.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/errors.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/user/link_unlink.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/assert.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/auth.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/strategies/credential.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/mfa/mfa_session.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/user.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/recaptcha/recaptcha_verifier.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/auth/auth_impl.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/enums.ts"],"map":"{\"version\":3,\"file\":\"phone.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/platform_browser/strategies/phone.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/platform_browser/strategies/phone.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { ApplicationVerifier, Auth, ConfirmationResult, PhoneInfoOptions, User } from '../../model/public_types';\r\nimport { ApplicationVerifierInternal } from '../../model/application_verifier';\r\nimport { PhoneAuthCredential } from '../../core/credentials/phone';\r\nimport { AuthInternal } from '../../model/auth';\r\n/**\r\n * Asynchronously signs in using a phone number.\r\n *\r\n * @remarks\r\n * This method sends a code via SMS to the given\r\n * phone number, and returns a {@link ConfirmationResult}. After the user\r\n * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\r\n * with the code to sign the user in.\r\n *\r\n * For abuse prevention, this method also requires a {@link ApplicationVerifier}.\r\n * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.\r\n * This function can work on other platforms that do not support the\r\n * {@link RecaptchaVerifier} (like React Native), but you need to use a\r\n * third-party {@link ApplicationVerifier} implementation.\r\n *\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @example\r\n * ```javascript\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\r\n * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\r\n * // Obtain a verificationCode from the user.\r\n * const credential = await confirmationResult.confirm(verificationCode);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\r\nexport declare function signInWithPhoneNumber(auth: Auth, phoneNumber: string, appVerifier: ApplicationVerifier): Promise<ConfirmationResult>;\r\n/**\r\n * Links the user account with the given phone number.\r\n *\r\n * @remarks\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @param user - The user.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\r\nexport declare function linkWithPhoneNumber(user: User, phoneNumber: string, appVerifier: ApplicationVerifier): Promise<ConfirmationResult>;\r\n/**\r\n * Re-authenticates a user using a fresh phone credential.\r\n *\r\n * @remarks\r\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\r\n *\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @param user - The user.\r\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\r\n * @param appVerifier - The {@link ApplicationVerifier}.\r\n *\r\n * @public\r\n */\r\nexport declare function reauthenticateWithPhoneNumber(user: User, phoneNumber: string, appVerifier: ApplicationVerifier): Promise<ConfirmationResult>;\r\n/**\r\n * Returns a verification ID to be used in conjunction with the SMS code that is sent.\r\n *\r\n */\r\nexport declare function _verifyPhoneNumber(auth: AuthInternal, options: PhoneInfoOptions | string, verifier: ApplicationVerifierInternal): Promise<string>;\r\n/**\r\n * Updates the user's phone number.\r\n *\r\n * @remarks\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @example\r\n * ```\r\n * // 'recaptcha-container' is the ID of an element in the DOM.\r\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\r\n * const provider = new PhoneAuthProvider(auth);\r\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\r\n * // Obtain the verificationCode from the user.\r\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\r\n * await updatePhoneNumber(user, phoneCredential);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param credential - A credential authenticating the new phone number.\r\n *\r\n * @public\r\n */\r\nexport declare function updatePhoneNumber(user: User, credential: PhoneAuthCredential): Promise<void>;\r\n"}}
