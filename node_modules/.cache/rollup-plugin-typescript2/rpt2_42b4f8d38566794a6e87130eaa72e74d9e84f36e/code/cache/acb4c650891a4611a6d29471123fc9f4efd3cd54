{"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { UserImpl } from '../user/user_impl';\r\nimport { _getInstance } from '../util/instantiator';\r\nimport { inMemoryPersistence } from './in_memory';\r\nexport function _persistenceKeyName(key, apiKey, appName) {\r\n    return \"\".concat(\"firebase\" /* Namespace.PERSISTENCE */, \":\").concat(key, \":\").concat(apiKey, \":\").concat(appName);\r\n}\r\nvar PersistenceUserManager = /** @class */ (function () {\r\n    function PersistenceUserManager(persistence, auth, userKey) {\r\n        this.persistence = persistence;\r\n        this.auth = auth;\r\n        this.userKey = userKey;\r\n        var _a = this.auth, config = _a.config, name = _a.name;\r\n        this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\r\n        this.fullPersistenceKey = _persistenceKeyName(\"persistence\" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);\r\n        this.boundEventHandler = auth._onStorageEvent.bind(auth);\r\n        this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\r\n    }\r\n    PersistenceUserManager.prototype.setCurrentUser = function (user) {\r\n        return this.persistence._set(this.fullUserKey, user.toJSON());\r\n    };\r\n    PersistenceUserManager.prototype.getCurrentUser = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var blob;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.persistence._get(this.fullUserKey)];\r\n                    case 1:\r\n                        blob = _a.sent();\r\n                        return [2 /*return*/, blob ? UserImpl._fromJSON(this.auth, blob) : null];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    PersistenceUserManager.prototype.removeCurrentUser = function () {\r\n        return this.persistence._remove(this.fullUserKey);\r\n    };\r\n    PersistenceUserManager.prototype.savePersistenceForRedirect = function () {\r\n        return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\r\n    };\r\n    PersistenceUserManager.prototype.setPersistence = function (newPersistence) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var currentUser;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (this.persistence === newPersistence) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        return [4 /*yield*/, this.getCurrentUser()];\r\n                    case 1:\r\n                        currentUser = _a.sent();\r\n                        return [4 /*yield*/, this.removeCurrentUser()];\r\n                    case 2:\r\n                        _a.sent();\r\n                        this.persistence = newPersistence;\r\n                        if (currentUser) {\r\n                            return [2 /*return*/, this.setCurrentUser(currentUser)];\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    PersistenceUserManager.prototype.delete = function () {\r\n        this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\r\n    };\r\n    PersistenceUserManager.create = function (auth, persistenceHierarchy, userKey) {\r\n        if (userKey === void 0) { userKey = \"authUser\" /* KeyName.AUTH_USER */; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var availablePersistences, selectedPersistence, key, userToMigrate, _i, persistenceHierarchy_1, persistence, blob, user, _a, migrationHierarchy;\r\n            var _this = this;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        if (!persistenceHierarchy.length) {\r\n                            return [2 /*return*/, new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey)];\r\n                        }\r\n                        return [4 /*yield*/, Promise.all(persistenceHierarchy.map(function (persistence) { return __awaiter(_this, void 0, void 0, function () {\r\n                                return __generator(this, function (_a) {\r\n                                    switch (_a.label) {\r\n                                        case 0: return [4 /*yield*/, persistence._isAvailable()];\r\n                                        case 1:\r\n                                            if (_a.sent()) {\r\n                                                return [2 /*return*/, persistence];\r\n                                            }\r\n                                            return [2 /*return*/, undefined];\r\n                                    }\r\n                                });\r\n                            }); }))];\r\n                    case 1:\r\n                        availablePersistences = (_b.sent()).filter(function (persistence) { return persistence; });\r\n                        selectedPersistence = availablePersistences[0] ||\r\n                            _getInstance(inMemoryPersistence);\r\n                        key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\r\n                        userToMigrate = null;\r\n                        _i = 0, persistenceHierarchy_1 = persistenceHierarchy;\r\n                        _b.label = 2;\r\n                    case 2:\r\n                        if (!(_i < persistenceHierarchy_1.length)) return [3 /*break*/, 7];\r\n                        persistence = persistenceHierarchy_1[_i];\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        _b.trys.push([3, 5, , 6]);\r\n                        return [4 /*yield*/, persistence._get(key)];\r\n                    case 4:\r\n                        blob = _b.sent();\r\n                        if (blob) {\r\n                            user = UserImpl._fromJSON(auth, blob);\r\n                            if (persistence !== selectedPersistence) {\r\n                                userToMigrate = user;\r\n                            }\r\n                            selectedPersistence = persistence;\r\n                            return [3 /*break*/, 7];\r\n                        }\r\n                        return [3 /*break*/, 6];\r\n                    case 5:\r\n                        _a = _b.sent();\r\n                        return [3 /*break*/, 6];\r\n                    case 6:\r\n                        _i++;\r\n                        return [3 /*break*/, 2];\r\n                    case 7:\r\n                        migrationHierarchy = availablePersistences.filter(function (p) { return p._shouldAllowMigration; });\r\n                        // If the persistence does _not_ allow migration, just finish off here\r\n                        if (!selectedPersistence._shouldAllowMigration ||\r\n                            !migrationHierarchy.length) {\r\n                            return [2 /*return*/, new PersistenceUserManager(selectedPersistence, auth, userKey)];\r\n                        }\r\n                        selectedPersistence = migrationHierarchy[0];\r\n                        if (!userToMigrate) return [3 /*break*/, 9];\r\n                        // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\r\n                        // we'll just let it bubble to surface the error.\r\n                        return [4 /*yield*/, selectedPersistence._set(key, userToMigrate.toJSON())];\r\n                    case 8:\r\n                        // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\r\n                        // we'll just let it bubble to surface the error.\r\n                        _b.sent();\r\n                        _b.label = 9;\r\n                    case 9: \r\n                    // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\r\n                    // such as users getting stuck with a previous account after signing out and refreshing the tab.\r\n                    return [4 /*yield*/, Promise.all(persistenceHierarchy.map(function (persistence) { return __awaiter(_this, void 0, void 0, function () {\r\n                            var _a;\r\n                            return __generator(this, function (_b) {\r\n                                switch (_b.label) {\r\n                                    case 0:\r\n                                        if (!(persistence !== selectedPersistence)) return [3 /*break*/, 4];\r\n                                        _b.label = 1;\r\n                                    case 1:\r\n                                        _b.trys.push([1, 3, , 4]);\r\n                                        return [4 /*yield*/, persistence._remove(key)];\r\n                                    case 2:\r\n                                        _b.sent();\r\n                                        return [3 /*break*/, 4];\r\n                                    case 3:\r\n                                        _a = _b.sent();\r\n                                        return [3 /*break*/, 4];\r\n                                    case 4: return [2 /*return*/];\r\n                                }\r\n                            });\r\n                        }); }))];\r\n                    case 10:\r\n                        // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\r\n                        // such as users getting stuck with a previous account after signing out and refreshing the tab.\r\n                        _b.sent();\r\n                        return [2 /*return*/, new PersistenceUserManager(selectedPersistence, auth, userKey)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return PersistenceUserManager;\r\n}());\r\nexport { PersistenceUserManager };\r\n//# sourceMappingURL=persistence_user_manager.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/auth.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/user.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/persistence/index.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/user/user_impl.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/instantiator.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/persistence/in_memory.ts"],"map":"{\"version\":3,\"file\":\"persistence_user_manager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/persistence/persistence_user_manager.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/persistence/persistence_user_manager.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { ApiKey, AppName, AuthInternal } from '../../model/auth';\r\nimport { UserInternal } from '../../model/user';\r\nimport { PersistenceInternal } from '../persistence';\r\nexport declare const enum KeyName {\r\n    AUTH_USER = \"authUser\",\r\n    AUTH_EVENT = \"authEvent\",\r\n    REDIRECT_USER = \"redirectUser\",\r\n    PERSISTENCE_USER = \"persistence\"\r\n}\r\nexport declare const enum Namespace {\r\n    PERSISTENCE = \"firebase\"\r\n}\r\nexport declare function _persistenceKeyName(key: string, apiKey: ApiKey, appName: AppName): string;\r\nexport declare class PersistenceUserManager {\r\n    persistence: PersistenceInternal;\r\n    private readonly auth;\r\n    private readonly userKey;\r\n    private readonly fullUserKey;\r\n    private readonly fullPersistenceKey;\r\n    private readonly boundEventHandler;\r\n    private constructor();\r\n    setCurrentUser(user: UserInternal): Promise<void>;\r\n    getCurrentUser(): Promise<UserInternal | null>;\r\n    removeCurrentUser(): Promise<void>;\r\n    savePersistenceForRedirect(): Promise<void>;\r\n    setPersistence(newPersistence: PersistenceInternal): Promise<void>;\r\n    delete(): void;\r\n    static create(auth: AuthInternal, persistenceHierarchy: PersistenceInternal[], userKey?: KeyName): Promise<PersistenceUserManager>;\r\n}\r\n"}}
