{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport * as account from '../../api/account_management/email_and_password';\r\nimport * as authentication from '../../api/authentication/email_and_password';\r\nimport { signUp } from '../../api/authentication/sign_up';\r\nimport { MultiFactorInfoImpl } from '../../mfa/mfa_info';\r\nimport { EmailAuthProvider } from '../providers/email';\r\nimport { UserCredentialImpl } from '../user/user_credential_impl';\r\nimport { _assert } from '../util/assert';\r\nimport { _setActionCodeSettingsOnRequest } from './action_code_settings';\r\nimport { signInWithCredential } from './credential';\r\nimport { _castAuth } from '../auth/auth_impl';\r\nimport { getModularInstance } from '@firebase/util';\r\nimport { handleRecaptchaFlow } from '../../platform_browser/recaptcha/recaptcha_enterprise_verifier';\r\n/**\r\n * Updates the password policy cached in the {@link Auth} instance if a policy is already\r\n * cached for the project or tenant.\r\n *\r\n * @remarks\r\n * We only fetch the password policy if the password did not meet policy requirements and\r\n * there is an existing policy cached. A developer must call validatePassword at least\r\n * once for the cache to be automatically updated.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @private\r\n */\r\nfunction recachePasswordPolicy(auth) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var authInternal;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    authInternal = _castAuth(auth);\r\n                    if (!authInternal._getPasswordPolicyInternal()) return [3 /*break*/, 2];\r\n                    return [4 /*yield*/, authInternal._updatePasswordPolicy()];\r\n                case 1:\r\n                    _a.sent();\r\n                    _a.label = 2;\r\n                case 2: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Sends a password reset email to the given email address.\r\n *\r\n * @remarks\r\n * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\r\n * the email sent to the user, along with the new password specified by the user.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain code from user.\r\n * await confirmPasswordReset('user@example.com', code);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nexport function sendPasswordResetEmail(auth, email, actionCodeSettings) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var authInternal, request;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    authInternal = _castAuth(auth);\r\n                    request = {\r\n                        requestType: \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */,\r\n                        email: email,\r\n                        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\r\n                    };\r\n                    if (actionCodeSettings) {\r\n                        _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\r\n                    }\r\n                    return [4 /*yield*/, handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, authentication.sendPasswordResetEmail)];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Completes the password reset process, given a confirmation code and new password.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A confirmation code sent to the user.\r\n * @param newPassword - The new password.\r\n *\r\n * @public\r\n */\r\nexport function confirmPasswordReset(auth, oobCode, newPassword) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var _this = this;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, account\r\n                        .resetPassword(getModularInstance(auth), {\r\n                        oobCode: oobCode,\r\n                        newPassword: newPassword\r\n                    })\r\n                        .catch(function (error) { return __awaiter(_this, void 0, void 0, function () {\r\n                        return __generator(this, function (_a) {\r\n                            if (error.code ===\r\n                                \"auth/\".concat(\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */)) {\r\n                                void recachePasswordPolicy(auth);\r\n                            }\r\n                            throw error;\r\n                        });\r\n                    }); })];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A verification code sent to the user.\r\n *\r\n * @public\r\n */\r\nexport function applyActionCode(auth, oobCode) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, account.applyActionCode(getModularInstance(auth), { oobCode: oobCode })];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @returns metadata about the code.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A verification code sent to the user.\r\n *\r\n * @public\r\n */\r\nexport function checkActionCode(auth, oobCode) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var authModular, response, operation, multiFactorInfo;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    authModular = getModularInstance(auth);\r\n                    return [4 /*yield*/, account.resetPassword(authModular, { oobCode: oobCode })];\r\n                case 1:\r\n                    response = _a.sent();\r\n                    operation = response.requestType;\r\n                    _assert(operation, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n                    switch (operation) {\r\n                        case \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */:\r\n                            break;\r\n                        case \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */:\r\n                            _assert(response.newEmail, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n                            break;\r\n                        case \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */:\r\n                            _assert(response.mfaInfo, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n                        // fall through\r\n                        default:\r\n                            _assert(response.email, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n                    }\r\n                    multiFactorInfo = null;\r\n                    if (response.mfaInfo) {\r\n                        multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);\r\n                    }\r\n                    return [2 /*return*/, {\r\n                            data: {\r\n                                email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */\r\n                                    ? response.newEmail\r\n                                    : response.email) || null,\r\n                                previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */\r\n                                    ? response.email\r\n                                    : response.newEmail) || null,\r\n                                multiFactorInfo: multiFactorInfo\r\n                            },\r\n                            operation: operation\r\n                        }];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Checks a password reset code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @returns the user's email address if valid.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param code - A verification code sent to the user.\r\n *\r\n * @public\r\n */\r\nexport function verifyPasswordResetCode(auth, code) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var data;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, checkActionCode(getModularInstance(auth), code)];\r\n                case 1:\r\n                    data = (_a.sent()).data;\r\n                    // Email should always be present since a code was sent to it\r\n                    return [2 /*return*/, data.email];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Creates a new user account associated with the specified email address and password.\r\n *\r\n * @remarks\r\n * On successful creation of the user account, this user will also be signed in to your application.\r\n *\r\n * User account creation can fail if the account already exists or the password is invalid.\r\n *\r\n * Note: The email address acts as a unique identifier for the user and enables an email-based\r\n * password reset. This function will create a new user account and set the initial user password.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param password - The user's chosen password.\r\n *\r\n * @public\r\n */\r\nexport function createUserWithEmailAndPassword(auth, email, password) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var authInternal, request, signUpResponse, response, userCredential;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    authInternal = _castAuth(auth);\r\n                    request = {\r\n                        returnSecureToken: true,\r\n                        email: email,\r\n                        password: password,\r\n                        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\r\n                    };\r\n                    signUpResponse = handleRecaptchaFlow(authInternal, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, signUp);\r\n                    return [4 /*yield*/, signUpResponse.catch(function (error) {\r\n                            if (error.code === \"auth/\".concat(\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */)) {\r\n                                void recachePasswordPolicy(auth);\r\n                            }\r\n                            throw error;\r\n                        })];\r\n                case 1:\r\n                    response = _a.sent();\r\n                    return [4 /*yield*/, UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response)];\r\n                case 2:\r\n                    userCredential = _a.sent();\r\n                    return [4 /*yield*/, authInternal._updateCurrentUser(userCredential.user)];\r\n                case 3:\r\n                    _a.sent();\r\n                    return [2 /*return*/, userCredential];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Asynchronously signs in using an email and password.\r\n *\r\n * @remarks\r\n * Fails with an error if the email address and password do not match.\r\n *\r\n * Note: The user's password is NOT the password used to access the user's email account. The\r\n * email address serves as a unique identifier for the user, and the password is used to access\r\n * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The users email address.\r\n * @param password - The users password.\r\n *\r\n * @public\r\n */\r\nexport function signInWithEmailAndPassword(auth, email, password) {\r\n    var _this = this;\r\n    return signInWithCredential(getModularInstance(auth), EmailAuthProvider.credential(email, password)).catch(function (error) { return __awaiter(_this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            if (error.code === \"auth/\".concat(\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */)) {\r\n                void recachePasswordPolicy(auth);\r\n            }\r\n            throw error;\r\n        });\r\n    }); });\r\n}\r\n//# sourceMappingURL=email_and_password.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/account_management/email_and_password.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/email_and_password.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/sign_up.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/mfa/mfa_info.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/providers/email.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/user/user_credential_impl.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/assert.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/strategies/action_code_settings.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/strategies/credential.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/auth/auth_impl.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/errors.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/enums.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/recaptcha/recaptcha_enterprise_verifier.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/id_token.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/index.ts"],"map":"{\"version\":3,\"file\":\"email_and_password.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/strategies/email_and_password.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/strategies/email_and_password.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { ActionCodeInfo, ActionCodeSettings, Auth, UserCredential } from '../../model/public_types';\r\n/**\r\n * Sends a password reset email to the given email address.\r\n *\r\n * @remarks\r\n * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\r\n * the email sent to the user, along with the new password specified by the user.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain code from user.\r\n * await confirmPasswordReset('user@example.com', code);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\r\nexport declare function sendPasswordResetEmail(auth: Auth, email: string, actionCodeSettings?: ActionCodeSettings): Promise<void>;\r\n/**\r\n * Completes the password reset process, given a confirmation code and new password.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A confirmation code sent to the user.\r\n * @param newPassword - The new password.\r\n *\r\n * @public\r\n */\r\nexport declare function confirmPasswordReset(auth: Auth, oobCode: string, newPassword: string): Promise<void>;\r\n/**\r\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A verification code sent to the user.\r\n *\r\n * @public\r\n */\r\nexport declare function applyActionCode(auth: Auth, oobCode: string): Promise<void>;\r\n/**\r\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @returns metadata about the code.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A verification code sent to the user.\r\n *\r\n * @public\r\n */\r\nexport declare function checkActionCode(auth: Auth, oobCode: string): Promise<ActionCodeInfo>;\r\n/**\r\n * Checks a password reset code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @returns the user's email address if valid.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param code - A verification code sent to the user.\r\n *\r\n * @public\r\n */\r\nexport declare function verifyPasswordResetCode(auth: Auth, code: string): Promise<string>;\r\n/**\r\n * Creates a new user account associated with the specified email address and password.\r\n *\r\n * @remarks\r\n * On successful creation of the user account, this user will also be signed in to your application.\r\n *\r\n * User account creation can fail if the account already exists or the password is invalid.\r\n *\r\n * Note: The email address acts as a unique identifier for the user and enables an email-based\r\n * password reset. This function will create a new user account and set the initial user password.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param password - The user's chosen password.\r\n *\r\n * @public\r\n */\r\nexport declare function createUserWithEmailAndPassword(auth: Auth, email: string, password: string): Promise<UserCredential>;\r\n/**\r\n * Asynchronously signs in using an email and password.\r\n *\r\n * @remarks\r\n * Fails with an error if the email address and password do not match.\r\n *\r\n * Note: The user's password is NOT the password used to access the user's email account. The\r\n * email address serves as a unique identifier for the user, and the password is used to access\r\n * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The users email address.\r\n * @param password - The users password.\r\n *\r\n * @public\r\n */\r\nexport declare function signInWithEmailAndPassword(auth: Auth, email: string, password: string): Promise<UserCredential>;\r\n"}}
