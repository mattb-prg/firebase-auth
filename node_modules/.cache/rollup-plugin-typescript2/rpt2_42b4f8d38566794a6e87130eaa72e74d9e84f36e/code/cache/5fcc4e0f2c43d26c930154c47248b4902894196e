{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\n/* eslint-disable camelcase */\r\nimport { querystring } from '@firebase/util';\r\nimport { _getFinalTarget, _performFetchWithErrorHandling } from '../index';\r\nimport { FetchProvider } from '../../core/util/fetch_provider';\r\nexport function requestStsToken(auth, refreshToken) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var response;\r\n        var _this = this;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, _performFetchWithErrorHandling(auth, {}, function () { return __awaiter(_this, void 0, void 0, function () {\r\n                        var body, _a, tokenApiHost, apiKey, url, headers;\r\n                        return __generator(this, function (_b) {\r\n                            switch (_b.label) {\r\n                                case 0:\r\n                                    body = querystring({\r\n                                        'grant_type': 'refresh_token',\r\n                                        'refresh_token': refreshToken\r\n                                    }).slice(1);\r\n                                    _a = auth.config, tokenApiHost = _a.tokenApiHost, apiKey = _a.apiKey;\r\n                                    url = _getFinalTarget(auth, tokenApiHost, \"/v1/token\" /* Endpoint.TOKEN */, \"key=\".concat(apiKey));\r\n                                    return [4 /*yield*/, auth._getAdditionalHeaders()];\r\n                                case 1:\r\n                                    headers = _b.sent();\r\n                                    headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';\r\n                                    return [2 /*return*/, FetchProvider.fetch()(url, {\r\n                                            method: \"POST\" /* HttpMethod.POST */,\r\n                                            headers: headers,\r\n                                            body: body\r\n                                        })];\r\n                            }\r\n                        });\r\n                    }); })];\r\n                case 1:\r\n                    response = _a.sent();\r\n                    // The response comes back in snake_case. Convert to camel:\r\n                    return [2 /*return*/, {\r\n                            accessToken: response.access_token,\r\n                            expiresIn: response.expires_in,\r\n                            refreshToken: response.refresh_token\r\n                        }];\r\n            }\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=token.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/index.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/fetch_provider.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/auth.ts"],"map":"{\"version\":3,\"file\":\"token.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/api/authentication/token.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;;AAEH,8BAA8B;AAE9B,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAE7C,OAAO,EACL,eAAe,EACf,8BAA8B,EAG/B,MAAM,UAAU,CAAC;AAClB,OAAO,EAAE,aAAa,EAAE,MAAM,gCAAgC,CAAC;AAqB/D,MAAM,UAAgB,eAAe,CACnC,IAAU,EACV,YAAoB;;;;;;wBAGlB,qBAAM,8BAA8B,CAClC,IAAI,EACJ,EAAE,EACF;;;;;oCACQ,IAAI,GAAG,WAAW,CAAC;wCACvB,YAAY,EAAE,eAAe;wCAC7B,eAAe,EAAE,YAAY;qCAC9B,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oCACN,KAA2B,IAAI,CAAC,MAAM,EAApC,YAAY,kBAAA,EAAE,MAAM,YAAA,CAAiB;oCACvC,GAAG,GAAG,eAAe,CACzB,IAAI,EACJ,YAAY,oCAEZ,cAAO,MAAM,CAAE,CAChB,CAAC;oCAEc,qBAAO,IAAqB,CAAC,qBAAqB,EAAE,EAAA;;oCAA9D,OAAO,GAAG,SAAoD;oCACpE,OAAO,8CAAyB,GAAG,mCAAmC,CAAC;oCAEvE,sBAAO,aAAa,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE;4CAChC,MAAM,8BAAiB;4CACvB,OAAO,SAAA;4CACP,IAAI,MAAA;yCACL,CAAC,EAAC;;;yBACJ,CACF,EAAA;;oBA1BG,QAAQ,GACZ,SAyBC;oBAEH,2DAA2D;oBAC3D,sBAAO;4BACL,WAAW,EAAE,QAAQ,CAAC,YAAY;4BAClC,SAAS,EAAE,QAAQ,CAAC,UAAU;4BAC9B,YAAY,EAAE,QAAQ,CAAC,aAAa;yBACrC,EAAC;;;;CACH\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/api/authentication/token.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Auth } from '../../model/public_types';\r\nexport declare const enum Endpoint {\r\n    TOKEN = \"/v1/token\"\r\n}\r\nexport interface RequestStsTokenResponse {\r\n    accessToken: string;\r\n    expiresIn: string;\r\n    refreshToken: string;\r\n}\r\nexport declare function requestStsToken(auth: Auth, refreshToken: string): Promise<RequestStsTokenResponse>;\r\n"}}
