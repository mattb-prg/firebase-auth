{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { updateEmailPassword as apiUpdateEmailPassword } from '../../api/account_management/email_and_password';\r\nimport { updateProfile as apiUpdateProfile } from '../../api/account_management/profile';\r\nimport { _logoutIfInvalidated } from './invalidation';\r\nimport { getModularInstance } from '@firebase/util';\r\n/**\r\n * Updates a user's profile data.\r\n *\r\n * @param user - The user.\r\n * @param profile - The profile's `displayName` and `photoURL` to update.\r\n *\r\n * @public\r\n */\r\nexport function updateProfile(user, _a) {\r\n    var displayName = _a.displayName, photoUrl = _a.photoURL;\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var userInternal, idToken, profileRequest, response, passwordProvider;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    if (displayName === undefined && photoUrl === undefined) {\r\n                        return [2 /*return*/];\r\n                    }\r\n                    userInternal = getModularInstance(user);\r\n                    return [4 /*yield*/, userInternal.getIdToken()];\r\n                case 1:\r\n                    idToken = _b.sent();\r\n                    profileRequest = {\r\n                        idToken: idToken,\r\n                        displayName: displayName,\r\n                        photoUrl: photoUrl,\r\n                        returnSecureToken: true\r\n                    };\r\n                    return [4 /*yield*/, _logoutIfInvalidated(userInternal, apiUpdateProfile(userInternal.auth, profileRequest))];\r\n                case 2:\r\n                    response = _b.sent();\r\n                    userInternal.displayName = response.displayName || null;\r\n                    userInternal.photoURL = response.photoUrl || null;\r\n                    passwordProvider = userInternal.providerData.find(function (_a) {\r\n                        var providerId = _a.providerId;\r\n                        return providerId === \"password\" /* ProviderId.PASSWORD */;\r\n                    });\r\n                    if (passwordProvider) {\r\n                        passwordProvider.displayName = userInternal.displayName;\r\n                        passwordProvider.photoURL = userInternal.photoURL;\r\n                    }\r\n                    return [4 /*yield*/, userInternal._updateTokensIfNecessary(response)];\r\n                case 3:\r\n                    _b.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Updates the user's email address.\r\n *\r\n * @remarks\r\n * An email will be sent to the original email address (if it was set) that allows to revoke the\r\n * email address change, in order to protect them from account hijacking.\r\n *\r\n * Important: this is a security sensitive operation that requires the user to have recently signed\r\n * in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n * @param newEmail - The new email address.\r\n *\r\n * @public\r\n */\r\nexport function updateEmail(user, newEmail) {\r\n    return updateEmailOrPassword(getModularInstance(user), newEmail, null);\r\n}\r\n/**\r\n * Updates the user's password.\r\n *\r\n * @remarks\r\n * Important: this is a security sensitive operation that requires the user to have recently signed\r\n * in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n * @param newPassword - The new password.\r\n *\r\n * @public\r\n */\r\nexport function updatePassword(user, newPassword) {\r\n    return updateEmailOrPassword(getModularInstance(user), null, newPassword);\r\n}\r\nfunction updateEmailOrPassword(user, email, password) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var auth, idToken, request, response;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    auth = user.auth;\r\n                    return [4 /*yield*/, user.getIdToken()];\r\n                case 1:\r\n                    idToken = _a.sent();\r\n                    request = {\r\n                        idToken: idToken,\r\n                        returnSecureToken: true\r\n                    };\r\n                    if (email) {\r\n                        request.email = email;\r\n                    }\r\n                    if (password) {\r\n                        request.password = password;\r\n                    }\r\n                    return [4 /*yield*/, _logoutIfInvalidated(user, apiUpdateEmailPassword(auth, request))];\r\n                case 2:\r\n                    response = _a.sent();\r\n                    return [4 /*yield*/, user._updateTokensIfNecessary(response, /* reload */ true)];\r\n                case 3:\r\n                    _a.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=account_info.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/account_management/email_and_password.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/account_management/profile.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/user.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/user/invalidation.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/enums.ts"],"map":"{\"version\":3,\"file\":\"account_info.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/user/account_info.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;;AAIH,OAAO,EACL,mBAAmB,IAAI,sBAAsB,EAE9C,MAAM,iDAAiD,CAAC;AACzD,OAAO,EAAE,aAAa,IAAI,gBAAgB,EAAE,MAAM,sCAAsC,CAAC;AAEzF,OAAO,EAAE,oBAAoB,EAAE,MAAM,gBAAgB,CAAC;AACtD,OAAO,EAAE,kBAAkB,EAAE,MAAM,gBAAgB,CAAC;AAGpD;;;;;;;GAOG;AACH,MAAM,UAAgB,aAAa,CACjC,IAAU,EACV,EAG4D;QAF1D,WAAW,iBAAA,EACD,QAAQ,cAAA;;;;;;oBAGpB,IAAI,WAAW,KAAK,SAAS,IAAI,QAAQ,KAAK,SAAS,EAAE;wBACvD,sBAAO;qBACR;oBAEK,YAAY,GAAG,kBAAkB,CAAC,IAAI,CAAiB,CAAC;oBAC9C,qBAAM,YAAY,CAAC,UAAU,EAAE,EAAA;;oBAAzC,OAAO,GAAG,SAA+B;oBACzC,cAAc,GAAG;wBACrB,OAAO,SAAA;wBACP,WAAW,aAAA;wBACX,QAAQ,UAAA;wBACR,iBAAiB,EAAE,IAAI;qBACxB,CAAC;oBACe,qBAAM,oBAAoB,CACzC,YAAY,EACZ,gBAAgB,CAAC,YAAY,CAAC,IAAI,EAAE,cAAc,CAAC,CACpD,EAAA;;oBAHK,QAAQ,GAAG,SAGhB;oBAED,YAAY,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,IAAI,IAAI,CAAC;oBACxD,YAAY,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,IAAI,IAAI,CAAC;oBAG5C,gBAAgB,GAAG,YAAY,CAAC,YAAY,CAAC,IAAI,CACrD,UAAC,EAAc;4BAAZ,UAAU,gBAAA;wBAAO,OAAA,UAAU,yCAAwB;oBAAlC,CAAkC,CACvD,CAAC;oBACF,IAAI,gBAAgB,EAAE;wBACpB,gBAAgB,CAAC,WAAW,GAAG,YAAY,CAAC,WAAW,CAAC;wBACxD,gBAAgB,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;qBACnD;oBAED,qBAAM,YAAY,CAAC,wBAAwB,CAAC,QAAQ,CAAC,EAAA;;oBAArD,SAAqD,CAAC;;;;;CACvD;AAED;;;;;;;;;;;;;;;GAeG;AACH,MAAM,UAAU,WAAW,CAAC,IAAU,EAAE,QAAgB;IACtD,OAAO,qBAAqB,CAC1B,kBAAkB,CAAC,IAAI,CAAiB,EACxC,QAAQ,EACR,IAAI,CACL,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,cAAc,CAAC,IAAU,EAAE,WAAmB;IAC5D,OAAO,qBAAqB,CAC1B,kBAAkB,CAAC,IAAI,CAAiB,EACxC,IAAI,EACJ,WAAW,CACZ,CAAC;AACJ,CAAC;AAED,SAAe,qBAAqB,CAClC,IAAkB,EAClB,KAAoB,EACpB,QAAuB;;;;;;oBAEf,IAAI,GAAK,IAAI,KAAT,CAAU;oBACN,qBAAM,IAAI,CAAC,UAAU,EAAE,EAAA;;oBAAjC,OAAO,GAAG,SAAuB;oBACjC,OAAO,GAA+B;wBAC1C,OAAO,SAAA;wBACP,iBAAiB,EAAE,IAAI;qBACxB,CAAC;oBAEF,IAAI,KAAK,EAAE;wBACT,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;qBACvB;oBAED,IAAI,QAAQ,EAAE;wBACZ,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;qBAC7B;oBAEgB,qBAAM,oBAAoB,CACzC,IAAI,EACJ,sBAAsB,CAAC,IAAI,EAAE,OAAO,CAAC,CACtC,EAAA;;oBAHK,QAAQ,GAAG,SAGhB;oBACD,qBAAM,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,YAAY,CAAC,IAAI,CAAC,EAAA;;oBAAhE,SAAgE,CAAC;;;;;CAClE\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/user/account_info.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { User } from '../../model/public_types';\r\n/**\r\n * Updates a user's profile data.\r\n *\r\n * @param user - The user.\r\n * @param profile - The profile's `displayName` and `photoURL` to update.\r\n *\r\n * @public\r\n */\r\nexport declare function updateProfile(user: User, { displayName, photoURL: photoUrl }: {\r\n    displayName?: string | null;\r\n    photoURL?: string | null;\r\n}): Promise<void>;\r\n/**\r\n * Updates the user's email address.\r\n *\r\n * @remarks\r\n * An email will be sent to the original email address (if it was set) that allows to revoke the\r\n * email address change, in order to protect them from account hijacking.\r\n *\r\n * Important: this is a security sensitive operation that requires the user to have recently signed\r\n * in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n * @param newEmail - The new email address.\r\n *\r\n * @public\r\n */\r\nexport declare function updateEmail(user: User, newEmail: string): Promise<void>;\r\n/**\r\n * Updates the user's password.\r\n *\r\n * @remarks\r\n * Important: this is a security sensitive operation that requires the user to have recently signed\r\n * in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n * @param newPassword - The new password.\r\n *\r\n * @public\r\n */\r\nexport declare function updatePassword(user: User, newPassword: string): Promise<void>;\r\n"}}
