{"code":"/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enum of factors that may be used for multifactor authentication.\r\n *\r\n * @public\r\n */\r\nexport var FactorId = {\r\n    /** Phone as second factor */\r\n    PHONE: 'phone',\r\n    TOTP: 'totp'\r\n};\r\n/**\r\n * Enumeration of supported providers.\r\n *\r\n * @public\r\n */\r\nexport var ProviderId = {\r\n    /** Facebook provider ID */\r\n    FACEBOOK: 'facebook.com',\r\n    /** GitHub provider ID */\r\n    GITHUB: 'github.com',\r\n    /** Google provider ID */\r\n    GOOGLE: 'google.com',\r\n    /** Password provider */\r\n    PASSWORD: 'password',\r\n    /** Phone provider */\r\n    PHONE: 'phone',\r\n    /** Twitter provider ID */\r\n    TWITTER: 'twitter.com'\r\n};\r\n/**\r\n * Enumeration of supported sign-in methods.\r\n *\r\n * @public\r\n */\r\nexport var SignInMethod = {\r\n    /** Email link sign in method */\r\n    EMAIL_LINK: 'emailLink',\r\n    /** Email/password sign in method */\r\n    EMAIL_PASSWORD: 'password',\r\n    /** Facebook sign in method */\r\n    FACEBOOK: 'facebook.com',\r\n    /** GitHub sign in method */\r\n    GITHUB: 'github.com',\r\n    /** Google sign in method */\r\n    GOOGLE: 'google.com',\r\n    /** Phone sign in method */\r\n    PHONE: 'phone',\r\n    /** Twitter sign in method */\r\n    TWITTER: 'twitter.com'\r\n};\r\n/**\r\n * Enumeration of supported operation types.\r\n *\r\n * @public\r\n */\r\nexport var OperationType = {\r\n    /** Operation involving linking an additional provider to an already signed-in user. */\r\n    LINK: 'link',\r\n    /** Operation involving using a provider to reauthenticate an already signed-in user. */\r\n    REAUTHENTICATE: 'reauthenticate',\r\n    /** Operation involving signing in a user. */\r\n    SIGN_IN: 'signIn'\r\n};\r\n/**\r\n * An enumeration of the possible email action types.\r\n *\r\n * @public\r\n */\r\nexport var ActionCodeOperation = {\r\n    /** The email link sign-in action. */\r\n    EMAIL_SIGNIN: 'EMAIL_SIGNIN',\r\n    /** The password reset action. */\r\n    PASSWORD_RESET: 'PASSWORD_RESET',\r\n    /** The email revocation action. */\r\n    RECOVER_EMAIL: 'RECOVER_EMAIL',\r\n    /** The revert second factor addition email action. */\r\n    REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\r\n    /** The revert second factor addition email action. */\r\n    VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\r\n    /** The email verification action. */\r\n    VERIFY_EMAIL: 'VERIFY_EMAIL'\r\n};\r\n//# sourceMappingURL=enum_maps.js.map","references":[],"map":"{\"version\":3,\"file\":\"enum_maps.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/model/enum_maps.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;AAEH;;;;GAIG;AACH,MAAM,CAAC,IAAM,QAAQ,GAAG;IACtB,6BAA6B;IAC7B,KAAK,EAAE,OAAO;IACd,IAAI,EAAE,MAAM;CACJ,CAAC;AAEX;;;;GAIG;AACH,MAAM,CAAC,IAAM,UAAU,GAAG;IACxB,2BAA2B;IAC3B,QAAQ,EAAE,cAAc;IACxB,yBAAyB;IACzB,MAAM,EAAE,YAAY;IACpB,yBAAyB;IACzB,MAAM,EAAE,YAAY;IACpB,wBAAwB;IACxB,QAAQ,EAAE,UAAU;IACpB,qBAAqB;IACrB,KAAK,EAAE,OAAO;IACd,0BAA0B;IAC1B,OAAO,EAAE,aAAa;CACd,CAAC;AAEX;;;;GAIG;AACH,MAAM,CAAC,IAAM,YAAY,GAAG;IAC1B,gCAAgC;IAChC,UAAU,EAAE,WAAW;IACvB,oCAAoC;IACpC,cAAc,EAAE,UAAU;IAC1B,8BAA8B;IAC9B,QAAQ,EAAE,cAAc;IACxB,4BAA4B;IAC5B,MAAM,EAAE,YAAY;IACpB,4BAA4B;IAC5B,MAAM,EAAE,YAAY;IACpB,2BAA2B;IAC3B,KAAK,EAAE,OAAO;IACd,6BAA6B;IAC7B,OAAO,EAAE,aAAa;CACd,CAAC;AAEX;;;;GAIG;AACH,MAAM,CAAC,IAAM,aAAa,GAAG;IAC3B,uFAAuF;IACvF,IAAI,EAAE,MAAM;IACZ,wFAAwF;IACxF,cAAc,EAAE,gBAAgB;IAChC,6CAA6C;IAC7C,OAAO,EAAE,QAAQ;CACT,CAAC;AAEX;;;;GAIG;AACH,MAAM,CAAC,IAAM,mBAAmB,GAAG;IACjC,qCAAqC;IACrC,YAAY,EAAE,cAAc;IAC5B,iCAAiC;IACjC,cAAc,EAAE,gBAAgB;IAChC,mCAAmC;IACnC,aAAa,EAAE,eAAe;IAC9B,sDAAsD;IACtD,6BAA6B,EAAE,+BAA+B;IAC9D,sDAAsD;IACtD,uBAAuB,EAAE,yBAAyB;IAClD,qCAAqC;IACrC,YAAY,EAAE,cAAc;CACpB,CAAC\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/model/enum_maps.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enum of factors that may be used for multifactor authentication.\r\n *\r\n * @public\r\n */\r\nexport declare const FactorId: {\r\n    /** Phone as second factor */\r\n    readonly PHONE: \"phone\";\r\n    readonly TOTP: \"totp\";\r\n};\r\n/**\r\n * Enumeration of supported providers.\r\n *\r\n * @public\r\n */\r\nexport declare const ProviderId: {\r\n    /** Facebook provider ID */\r\n    readonly FACEBOOK: \"facebook.com\";\r\n    /** GitHub provider ID */\r\n    readonly GITHUB: \"github.com\";\r\n    /** Google provider ID */\r\n    readonly GOOGLE: \"google.com\";\r\n    /** Password provider */\r\n    readonly PASSWORD: \"password\";\r\n    /** Phone provider */\r\n    readonly PHONE: \"phone\";\r\n    /** Twitter provider ID */\r\n    readonly TWITTER: \"twitter.com\";\r\n};\r\n/**\r\n * Enumeration of supported sign-in methods.\r\n *\r\n * @public\r\n */\r\nexport declare const SignInMethod: {\r\n    /** Email link sign in method */\r\n    readonly EMAIL_LINK: \"emailLink\";\r\n    /** Email/password sign in method */\r\n    readonly EMAIL_PASSWORD: \"password\";\r\n    /** Facebook sign in method */\r\n    readonly FACEBOOK: \"facebook.com\";\r\n    /** GitHub sign in method */\r\n    readonly GITHUB: \"github.com\";\r\n    /** Google sign in method */\r\n    readonly GOOGLE: \"google.com\";\r\n    /** Phone sign in method */\r\n    readonly PHONE: \"phone\";\r\n    /** Twitter sign in method */\r\n    readonly TWITTER: \"twitter.com\";\r\n};\r\n/**\r\n * Enumeration of supported operation types.\r\n *\r\n * @public\r\n */\r\nexport declare const OperationType: {\r\n    /** Operation involving linking an additional provider to an already signed-in user. */\r\n    readonly LINK: \"link\";\r\n    /** Operation involving using a provider to reauthenticate an already signed-in user. */\r\n    readonly REAUTHENTICATE: \"reauthenticate\";\r\n    /** Operation involving signing in a user. */\r\n    readonly SIGN_IN: \"signIn\";\r\n};\r\n/**\r\n * An enumeration of the possible email action types.\r\n *\r\n * @public\r\n */\r\nexport declare const ActionCodeOperation: {\r\n    /** The email link sign-in action. */\r\n    readonly EMAIL_SIGNIN: \"EMAIL_SIGNIN\";\r\n    /** The password reset action. */\r\n    readonly PASSWORD_RESET: \"PASSWORD_RESET\";\r\n    /** The email revocation action. */\r\n    readonly RECOVER_EMAIL: \"RECOVER_EMAIL\";\r\n    /** The revert second factor addition email action. */\r\n    readonly REVERT_SECOND_FACTOR_ADDITION: \"REVERT_SECOND_FACTOR_ADDITION\";\r\n    /** The revert second factor addition email action. */\r\n    readonly VERIFY_AND_CHANGE_EMAIL: \"VERIFY_AND_CHANGE_EMAIL\";\r\n    /** The email verification action. */\r\n    readonly VERIFY_EMAIL: \"VERIFY_EMAIL\";\r\n};\r\n"}}
