{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __spreadArray } from \"tslib\";\r\nimport { _createError } from '../../core/util/assert';\r\nimport { Delay } from '../../core/util/delay';\r\nimport { _window } from '../auth_window';\r\nimport * as js from '../load_js';\r\nvar NETWORK_TIMEOUT = new Delay(30000, 60000);\r\n/**\r\n * Reset unlaoded GApi modules. If gapi.load fails due to a network error,\r\n * it will stop working after a retrial. This is a hack to fix this issue.\r\n */\r\nfunction resetUnloadedGapiModules() {\r\n    // Clear last failed gapi.load state to force next gapi.load to first\r\n    // load the failed gapi.iframes module.\r\n    // Get gapix.beacon context.\r\n    var beacon = _window().___jsl;\r\n    // Get current hint.\r\n    if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {\r\n        // Get gapi hint.\r\n        for (var _i = 0, _a = Object.keys(beacon.H); _i < _a.length; _i++) {\r\n            var hint = _a[_i];\r\n            // Requested modules.\r\n            beacon.H[hint].r = beacon.H[hint].r || [];\r\n            // Loaded modules.\r\n            beacon.H[hint].L = beacon.H[hint].L || [];\r\n            // Set requested modules to a copy of the loaded modules.\r\n            beacon.H[hint].r = __spreadArray([], beacon.H[hint].L, true);\r\n            // Clear pending callbacks.\r\n            if (beacon.CP) {\r\n                for (var i = 0; i < beacon.CP.length; i++) {\r\n                    // Remove all failed pending callbacks.\r\n                    beacon.CP[i] = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction loadGapi(auth) {\r\n    return new Promise(function (resolve, reject) {\r\n        var _a, _b, _c;\r\n        // Function to run when gapi.load is ready.\r\n        function loadGapiIframe() {\r\n            // The developer may have tried to previously run gapi.load and failed.\r\n            // Run this to fix that.\r\n            resetUnloadedGapiModules();\r\n            gapi.load('gapi.iframes', {\r\n                callback: function () {\r\n                    resolve(gapi.iframes.getContext());\r\n                },\r\n                ontimeout: function () {\r\n                    // The above reset may be sufficient, but having this reset after\r\n                    // failure ensures that if the developer calls gapi.load after the\r\n                    // connection is re-established and before another attempt to embed\r\n                    // the iframe, it would work and would not be broken because of our\r\n                    // failed attempt.\r\n                    // Timeout when gapi.iframes.Iframe not loaded.\r\n                    resetUnloadedGapiModules();\r\n                    reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\r\n                },\r\n                timeout: NETWORK_TIMEOUT.get()\r\n            });\r\n        }\r\n        if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {\r\n            // If gapi.iframes.Iframe available, resolve.\r\n            resolve(gapi.iframes.getContext());\r\n        }\r\n        else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) {\r\n            // Gapi loader ready, load gapi.iframes.\r\n            loadGapiIframe();\r\n        }\r\n        else {\r\n            // Create a new iframe callback when this is called so as not to overwrite\r\n            // any previous defined callback. This happens if this method is called\r\n            // multiple times in parallel and could result in the later callback\r\n            // overwriting the previous one. This would end up with a iframe\r\n            // timeout.\r\n            var cbName = js._generateCallbackName('iframefcb');\r\n            // GApi loader not available, dynamically load platform.js.\r\n            _window()[cbName] = function () {\r\n                // GApi loader should be ready.\r\n                if (!!gapi.load) {\r\n                    loadGapiIframe();\r\n                }\r\n                else {\r\n                    // Gapi loader failed, throw error.\r\n                    reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\r\n                }\r\n            };\r\n            // Load GApi loader.\r\n            return js\r\n                ._loadJS(\"https://apis.google.com/js/api.js?onload=\".concat(cbName))\r\n                .catch(function (e) { return reject(e); });\r\n        }\r\n    }).catch(function (error) {\r\n        // Reset cached promise to allow for retrial.\r\n        cachedGApiLoader = null;\r\n        throw error;\r\n    });\r\n}\r\nvar cachedGApiLoader = null;\r\nexport function _loadGapi(auth) {\r\n    cachedGApiLoader = cachedGApiLoader || loadGapi(auth);\r\n    return cachedGApiLoader;\r\n}\r\nexport function _resetLoader() {\r\n    cachedGApiLoader = null;\r\n}\r\n//# sourceMappingURL=gapi.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/errors.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/assert.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/delay.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/auth.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/auth_window.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/load_js.ts"],"map":"{\"version\":3,\"file\":\"gapi.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/platform_browser/iframe/gapi.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/platform_browser/iframe/gapi.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { AuthInternal } from '../../model/auth';\r\nexport declare function _loadGapi(auth: AuthInternal): Promise<gapi.iframes.Context>;\r\nexport declare function _resetLoader(): void;\r\n"}}
