{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport { OAuthCredential } from '../credentials/oauth';\r\nimport { BaseOAuthProvider } from './oauth';\r\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\r\n *\r\n * @remarks\r\n * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\r\n * the {@link signInWithPopup} handler:\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new GithubAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('repo');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Github Access Token.\r\n *   const credential = GithubAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new GithubAuthProvider();\r\n * provider.addScope('repo');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Github Access Token.\r\n * const credential = GithubAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * ```\r\n * @public\r\n */\r\nvar GithubAuthProvider = /** @class */ (function (_super) {\r\n    __extends(GithubAuthProvider, _super);\r\n    function GithubAuthProvider() {\r\n        return _super.call(this, \"github.com\" /* ProviderId.GITHUB */) || this;\r\n    }\r\n    /**\r\n     * Creates a credential for Github.\r\n     *\r\n     * @param accessToken - Github access token.\r\n     */\r\n    GithubAuthProvider.credential = function (accessToken) {\r\n        return OAuthCredential._fromParams({\r\n            providerId: GithubAuthProvider.PROVIDER_ID,\r\n            signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\r\n            accessToken: accessToken\r\n        });\r\n    };\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    GithubAuthProvider.credentialFromResult = function (userCredential) {\r\n        return GithubAuthProvider.credentialFromTaggedObject(userCredential);\r\n    };\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    GithubAuthProvider.credentialFromError = function (error) {\r\n        return GithubAuthProvider.credentialFromTaggedObject((error.customData || {}));\r\n    };\r\n    GithubAuthProvider.credentialFromTaggedObject = function (_a) {\r\n        var tokenResponse = _a._tokenResponse;\r\n        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\r\n            return null;\r\n        }\r\n        if (!tokenResponse.oauthAccessToken) {\r\n            return null;\r\n        }\r\n        try {\r\n            return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\r\n        }\r\n        catch (_b) {\r\n            return null;\r\n        }\r\n    };\r\n    /** Always set to {@link SignInMethod}.GITHUB. */\r\n    GithubAuthProvider.GITHUB_SIGN_IN_METHOD = \"github.com\" /* SignInMethod.GITHUB */;\r\n    /** Always set to {@link ProviderId}.GITHUB. */\r\n    GithubAuthProvider.PROVIDER_ID = \"github.com\" /* ProviderId.GITHUB */;\r\n    return GithubAuthProvider;\r\n}(BaseOAuthProvider));\r\nexport { GithubAuthProvider };\r\n//# sourceMappingURL=github.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/id_token.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/user.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/credentials/oauth.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/providers/oauth.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/enums.ts"],"map":"{\"version\":3,\"file\":\"github.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/providers/github.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;;AAOH,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AACvD,OAAO,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC;AAG5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyCG;AACH;IAAwC,sCAAiB;IAMvD;eACE,uDAAwB;IAC1B,CAAC;IAED;;;;OAIG;IACI,6BAAU,GAAjB,UAAkB,WAAmB;QACnC,OAAO,eAAe,CAAC,WAAW,CAAC;YACjC,UAAU,EAAE,kBAAkB,CAAC,WAAW;YAC1C,YAAY,EAAE,kBAAkB,CAAC,qBAAqB;YACtD,WAAW,aAAA;SACZ,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACI,uCAAoB,GAA3B,UACE,cAA8B;QAE9B,OAAO,kBAAkB,CAAC,0BAA0B,CAClD,cAAwC,CACzC,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACI,sCAAmB,GAA1B,UAA2B,KAAoB;QAC7C,OAAO,kBAAkB,CAAC,0BAA0B,CAClD,CAAC,KAAK,CAAC,UAAU,IAAI,EAAE,CAA4B,CACpD,CAAC;IACJ,CAAC;IAEc,6CAA0B,GAAzC,UAA0C,EAEhB;YADR,aAAa,oBAAA;QAE7B,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC,kBAAkB,IAAI,aAAa,CAAC,EAAE;YAC5D,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE;YACnC,OAAO,IAAI,CAAC;SACb;QAED,IAAI;YACF,OAAO,kBAAkB,CAAC,UAAU,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;SACtE;QAAC,WAAM;YACN,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IA/DD,iDAAiD;IACjC,wCAAqB,0CAAqC;IAC1E,+CAA+C;IAC/B,8BAAW,wCAAmC;IA6DhE,yBAAC;CAAA,AAjED,CAAwC,iBAAiB,GAiExD;SAjEY,kBAAkB\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/providers/github.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { UserCredential } from '../../model/public_types';\r\nimport { FirebaseError } from '@firebase/util';\r\nimport { OAuthCredential } from '../credentials/oauth';\r\nimport { BaseOAuthProvider } from './oauth';\r\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\r\n *\r\n * @remarks\r\n * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\r\n * the {@link signInWithPopup} handler:\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new GithubAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('repo');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Github Access Token.\r\n *   const credential = GithubAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new GithubAuthProvider();\r\n * provider.addScope('repo');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Github Access Token.\r\n * const credential = GithubAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * ```\r\n * @public\r\n */\r\nexport declare class GithubAuthProvider extends BaseOAuthProvider {\r\n    /** Always set to {@link SignInMethod}.GITHUB. */\r\n    static readonly GITHUB_SIGN_IN_METHOD: 'github.com';\r\n    /** Always set to {@link ProviderId}.GITHUB. */\r\n    static readonly PROVIDER_ID: 'github.com';\r\n    constructor();\r\n    /**\r\n     * Creates a credential for Github.\r\n     *\r\n     * @param accessToken - Github access token.\r\n     */\r\n    static credential(accessToken: string): OAuthCredential;\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential: UserCredential): OAuthCredential | null;\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error: FirebaseError): OAuthCredential | null;\r\n    private static credentialFromTaggedObject;\r\n}\r\n"}}
