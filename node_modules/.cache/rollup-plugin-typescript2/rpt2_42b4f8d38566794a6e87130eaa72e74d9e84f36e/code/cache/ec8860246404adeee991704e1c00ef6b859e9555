{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __extends, __rest } from \"tslib\";\r\nimport { querystring } from '@firebase/util';\r\nimport { signInWithIdp } from '../../api/authentication/idp';\r\nimport { _fail } from '../util/assert';\r\nimport { AuthCredential } from './auth_credential';\r\nvar IDP_REQUEST_URI = 'http://localhost';\r\n/**\r\n * Represents the OAuth credentials returned by an {@link OAuthProvider}.\r\n *\r\n * @remarks\r\n * Implementations specify the details about each auth provider's credential requirements.\r\n *\r\n * @public\r\n */\r\nvar OAuthCredential = /** @class */ (function (_super) {\r\n    __extends(OAuthCredential, _super);\r\n    function OAuthCredential() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.pendingToken = null;\r\n        return _this;\r\n    }\r\n    /** @internal */\r\n    OAuthCredential._fromParams = function (params) {\r\n        var cred = new OAuthCredential(params.providerId, params.signInMethod);\r\n        if (params.idToken || params.accessToken) {\r\n            // OAuth 2 and either ID token or access token.\r\n            if (params.idToken) {\r\n                cred.idToken = params.idToken;\r\n            }\r\n            if (params.accessToken) {\r\n                cred.accessToken = params.accessToken;\r\n            }\r\n            // Add nonce if available and no pendingToken is present.\r\n            if (params.nonce && !params.pendingToken) {\r\n                cred.nonce = params.nonce;\r\n            }\r\n            if (params.pendingToken) {\r\n                cred.pendingToken = params.pendingToken;\r\n            }\r\n        }\r\n        else if (params.oauthToken && params.oauthTokenSecret) {\r\n            // OAuth 1 and OAuth token with token secret\r\n            cred.accessToken = params.oauthToken;\r\n            cred.secret = params.oauthTokenSecret;\r\n        }\r\n        else {\r\n            _fail(\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        }\r\n        return cred;\r\n    };\r\n    /** {@inheritdoc AuthCredential.toJSON}  */\r\n    OAuthCredential.prototype.toJSON = function () {\r\n        return {\r\n            idToken: this.idToken,\r\n            accessToken: this.accessToken,\r\n            secret: this.secret,\r\n            nonce: this.nonce,\r\n            pendingToken: this.pendingToken,\r\n            providerId: this.providerId,\r\n            signInMethod: this.signInMethod\r\n        };\r\n    };\r\n    /**\r\n     * Static method to deserialize a JSON representation of an object into an\r\n     * {@link  AuthCredential}.\r\n     *\r\n     * @param json - Input can be either Object or the stringified representation of the object.\r\n     * When string is provided, JSON.parse would be called first.\r\n     *\r\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\r\n     */\r\n    OAuthCredential.fromJSON = function (json) {\r\n        var obj = typeof json === 'string' ? JSON.parse(json) : json;\r\n        var providerId = obj.providerId, signInMethod = obj.signInMethod, rest = __rest(obj, [\"providerId\", \"signInMethod\"]);\r\n        if (!providerId || !signInMethod) {\r\n            return null;\r\n        }\r\n        var cred = new OAuthCredential(providerId, signInMethod);\r\n        cred.idToken = rest.idToken || undefined;\r\n        cred.accessToken = rest.accessToken || undefined;\r\n        cred.secret = rest.secret;\r\n        cred.nonce = rest.nonce;\r\n        cred.pendingToken = rest.pendingToken || null;\r\n        return cred;\r\n    };\r\n    /** @internal */\r\n    OAuthCredential.prototype._getIdTokenResponse = function (auth) {\r\n        var request = this.buildRequest();\r\n        return signInWithIdp(auth, request);\r\n    };\r\n    /** @internal */\r\n    OAuthCredential.prototype._linkToIdToken = function (auth, idToken) {\r\n        var request = this.buildRequest();\r\n        request.idToken = idToken;\r\n        return signInWithIdp(auth, request);\r\n    };\r\n    /** @internal */\r\n    OAuthCredential.prototype._getReauthenticationResolver = function (auth) {\r\n        var request = this.buildRequest();\r\n        request.autoCreate = false;\r\n        return signInWithIdp(auth, request);\r\n    };\r\n    OAuthCredential.prototype.buildRequest = function () {\r\n        var request = {\r\n            requestUri: IDP_REQUEST_URI,\r\n            returnSecureToken: true\r\n        };\r\n        if (this.pendingToken) {\r\n            request.pendingToken = this.pendingToken;\r\n        }\r\n        else {\r\n            var postBody = {};\r\n            if (this.idToken) {\r\n                postBody['id_token'] = this.idToken;\r\n            }\r\n            if (this.accessToken) {\r\n                postBody['access_token'] = this.accessToken;\r\n            }\r\n            if (this.secret) {\r\n                postBody['oauth_token_secret'] = this.secret;\r\n            }\r\n            postBody['providerId'] = this.providerId;\r\n            if (this.nonce && !this.pendingToken) {\r\n                postBody['nonce'] = this.nonce;\r\n            }\r\n            request.postBody = querystring(postBody);\r\n        }\r\n        return request;\r\n    };\r\n    return OAuthCredential;\r\n}(AuthCredential));\r\nexport { OAuthCredential };\r\n//# sourceMappingURL=oauth.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/idp.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/auth.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/id_token.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/errors.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/assert.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/credentials/auth_credential.ts"],"map":"{\"version\":3,\"file\":\"oauth.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/credentials/oauth.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/credentials/oauth.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { AuthInternal } from '../../model/auth';\r\nimport { IdTokenResponse } from '../../model/id_token';\r\nimport { AuthCredential } from './auth_credential';\r\nexport interface OAuthCredentialParams {\r\n    idToken?: string | null;\r\n    accessToken?: string | null;\r\n    oauthToken?: string;\r\n    secret?: string;\r\n    oauthTokenSecret?: string;\r\n    nonce?: string;\r\n    pendingToken?: string;\r\n    providerId: string;\r\n    signInMethod: string;\r\n}\r\n/**\r\n * Represents the OAuth credentials returned by an {@link OAuthProvider}.\r\n *\r\n * @remarks\r\n * Implementations specify the details about each auth provider's credential requirements.\r\n *\r\n * @public\r\n */\r\nexport declare class OAuthCredential extends AuthCredential {\r\n    /**\r\n     * The OAuth ID token associated with the credential if it belongs to an OIDC provider,\r\n     * such as `google.com`.\r\n     * @readonly\r\n     */\r\n    idToken?: string;\r\n    /**\r\n     * The OAuth access token associated with the credential if it belongs to an\r\n     * {@link OAuthProvider}, such as `facebook.com`, `twitter.com`, etc.\r\n     * @readonly\r\n     */\r\n    accessToken?: string;\r\n    /**\r\n     * The OAuth access token secret associated with the credential if it belongs to an OAuth 1.0\r\n     * provider, such as `twitter.com`.\r\n     * @readonly\r\n     */\r\n    secret?: string;\r\n    private nonce?;\r\n    private pendingToken;\r\n    /** @internal */\r\n    static _fromParams(params: OAuthCredentialParams): OAuthCredential;\r\n    /** {@inheritdoc AuthCredential.toJSON}  */\r\n    toJSON(): object;\r\n    /**\r\n     * Static method to deserialize a JSON representation of an object into an\r\n     * {@link  AuthCredential}.\r\n     *\r\n     * @param json - Input can be either Object or the stringified representation of the object.\r\n     * When string is provided, JSON.parse would be called first.\r\n     *\r\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\r\n     */\r\n    static fromJSON(json: string | object): OAuthCredential | null;\r\n    /** @internal */\r\n    _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse>;\r\n    /** @internal */\r\n    _linkToIdToken(auth: AuthInternal, idToken: string): Promise<IdTokenResponse>;\r\n    /** @internal */\r\n    _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse>;\r\n    private buildRequest;\r\n}\r\n"}}
