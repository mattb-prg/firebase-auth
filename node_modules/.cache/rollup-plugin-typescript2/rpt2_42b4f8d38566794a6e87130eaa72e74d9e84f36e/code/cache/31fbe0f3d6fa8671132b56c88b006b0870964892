{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { _castAuth } from '../core/auth/auth_impl';\r\nimport { UserCredentialImpl } from '../core/user/user_credential_impl';\r\nimport { _assert, _fail } from '../core/util/assert';\r\nimport { MultiFactorInfoImpl } from './mfa_info';\r\nimport { MultiFactorSessionImpl } from './mfa_session';\r\nimport { getModularInstance } from '@firebase/util';\r\nvar MultiFactorResolverImpl = /** @class */ (function () {\r\n    function MultiFactorResolverImpl(session, hints, signInResolver) {\r\n        this.session = session;\r\n        this.hints = hints;\r\n        this.signInResolver = signInResolver;\r\n    }\r\n    /** @internal */\r\n    MultiFactorResolverImpl._fromError = function (authExtern, error) {\r\n        var _this = this;\r\n        var auth = _castAuth(authExtern);\r\n        var serverResponse = error.customData._serverResponse;\r\n        var hints = (serverResponse.mfaInfo || []).map(function (enrollment) {\r\n            return MultiFactorInfoImpl._fromServerResponse(auth, enrollment);\r\n        });\r\n        _assert(serverResponse.mfaPendingCredential, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        var session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\r\n        return new MultiFactorResolverImpl(session, hints, function (assertion) { return __awaiter(_this, void 0, void 0, function () {\r\n            var mfaResponse, idTokenResponse, _a, userCredential;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, assertion._process(auth, session)];\r\n                    case 1:\r\n                        mfaResponse = _b.sent();\r\n                        // Clear out the unneeded fields from the old login response\r\n                        delete serverResponse.mfaInfo;\r\n                        delete serverResponse.mfaPendingCredential;\r\n                        idTokenResponse = __assign(__assign({}, serverResponse), { idToken: mfaResponse.idToken, refreshToken: mfaResponse.refreshToken });\r\n                        _a = error.operationType;\r\n                        switch (_a) {\r\n                            case \"signIn\" /* OperationType.SIGN_IN */: return [3 /*break*/, 2];\r\n                            case \"reauthenticate\" /* OperationType.REAUTHENTICATE */: return [3 /*break*/, 5];\r\n                        }\r\n                        return [3 /*break*/, 6];\r\n                    case 2: return [4 /*yield*/, UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse)];\r\n                    case 3:\r\n                        userCredential = _b.sent();\r\n                        return [4 /*yield*/, auth._updateCurrentUser(userCredential.user)];\r\n                    case 4:\r\n                        _b.sent();\r\n                        return [2 /*return*/, userCredential];\r\n                    case 5:\r\n                        _assert(error.user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n                        return [2 /*return*/, UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse)];\r\n                    case 6:\r\n                        _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n                        _b.label = 7;\r\n                    case 7: return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    };\r\n    MultiFactorResolverImpl.prototype.resolveSignIn = function (assertionExtern) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var assertion;\r\n            return __generator(this, function (_a) {\r\n                assertion = assertionExtern;\r\n                return [2 /*return*/, this.signInResolver(assertion)];\r\n            });\r\n        });\r\n    };\r\n    return MultiFactorResolverImpl;\r\n}());\r\nexport { MultiFactorResolverImpl };\r\n/**\r\n * Provides a {@link MultiFactorResolver} suitable for completion of a\r\n * multi-factor flow.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param error - The {@link MultiFactorError} raised during a sign-in, or\r\n * reauthentication operation.\r\n *\r\n * @public\r\n */\r\nexport function getMultiFactorResolver(auth, error) {\r\n    var _a;\r\n    var authModular = getModularInstance(auth);\r\n    var errorInternal = error;\r\n    _assert(error.customData.operationType, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n    _assert((_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n    return MultiFactorResolverImpl._fromError(authModular, errorInternal);\r\n}\r\n//# sourceMappingURL=mfa_resolver.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/auth/auth_impl.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/errors.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/user/user_credential_impl.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/assert.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/user.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/mfa/mfa_assertion.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/mfa/mfa_error.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/mfa/mfa_info.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/mfa/mfa_session.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/enums.ts"],"map":"{\"version\":3,\"file\":\"mfa_resolver.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/mfa/mfa_resolver.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/mfa/mfa_resolver.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Auth, MultiFactorResolver, UserCredential, MultiFactorError } from '../model/public_types';\r\nimport { MultiFactorAssertionImpl } from './mfa_assertion';\r\nimport { MultiFactorError as MultiFactorErrorInternal } from './mfa_error';\r\nimport { MultiFactorInfoImpl } from './mfa_info';\r\nimport { MultiFactorSessionImpl } from './mfa_session';\r\nexport declare class MultiFactorResolverImpl implements MultiFactorResolver {\r\n    readonly session: MultiFactorSessionImpl;\r\n    readonly hints: MultiFactorInfoImpl[];\r\n    private readonly signInResolver;\r\n    private constructor();\r\n    /** @internal */\r\n    static _fromError(authExtern: Auth, error: MultiFactorErrorInternal): MultiFactorResolverImpl;\r\n    resolveSignIn(assertionExtern: MultiFactorAssertionImpl): Promise<UserCredential>;\r\n}\r\n/**\r\n * Provides a {@link MultiFactorResolver} suitable for completion of a\r\n * multi-factor flow.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param error - The {@link MultiFactorError} raised during a sign-in, or\r\n * reauthentication operation.\r\n *\r\n * @public\r\n */\r\nexport declare function getMultiFactorResolver(auth: Auth, error: MultiFactorError): MultiFactorResolver;\r\n"}}
