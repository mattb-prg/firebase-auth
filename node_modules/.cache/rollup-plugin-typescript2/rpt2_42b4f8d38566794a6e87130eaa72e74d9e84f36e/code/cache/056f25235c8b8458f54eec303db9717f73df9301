{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport { SAMLAuthCredential } from '../credentials/saml';\r\nimport { _assert } from '../util/assert';\r\nimport { FederatedAuthProvider } from './federated';\r\nvar SAML_PROVIDER_PREFIX = 'saml.';\r\n/**\r\n * An {@link AuthProvider} for SAML.\r\n *\r\n * @public\r\n */\r\nvar SAMLAuthProvider = /** @class */ (function (_super) {\r\n    __extends(SAMLAuthProvider, _super);\r\n    /**\r\n     * Constructor. The providerId must start with \"saml.\"\r\n     * @param providerId - SAML provider ID.\r\n     */\r\n    function SAMLAuthProvider(providerId) {\r\n        _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        return _super.call(this, providerId) || this;\r\n    }\r\n    /**\r\n     * Generates an {@link AuthCredential} from a {@link UserCredential} after a\r\n     * successful SAML flow completes.\r\n     *\r\n     * @remarks\r\n     *\r\n     * For example, to get an {@link AuthCredential}, you could write the\r\n     * following code:\r\n     *\r\n     * ```js\r\n     * const userCredential = await signInWithPopup(auth, samlProvider);\r\n     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\r\n     * ```\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    SAMLAuthProvider.credentialFromResult = function (userCredential) {\r\n        return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\r\n    };\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    SAMLAuthProvider.credentialFromError = function (error) {\r\n        return SAMLAuthProvider.samlCredentialFromTaggedObject((error.customData || {}));\r\n    };\r\n    /**\r\n     * Creates an {@link AuthCredential} from a JSON string or a plain object.\r\n     * @param json - A plain object or a JSON string\r\n     */\r\n    SAMLAuthProvider.credentialFromJSON = function (json) {\r\n        var credential = SAMLAuthCredential.fromJSON(json);\r\n        _assert(credential, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        return credential;\r\n    };\r\n    SAMLAuthProvider.samlCredentialFromTaggedObject = function (_a) {\r\n        var tokenResponse = _a._tokenResponse;\r\n        if (!tokenResponse) {\r\n            return null;\r\n        }\r\n        var _b = tokenResponse, pendingToken = _b.pendingToken, providerId = _b.providerId;\r\n        if (!pendingToken || !providerId) {\r\n            return null;\r\n        }\r\n        try {\r\n            return SAMLAuthCredential._create(providerId, pendingToken);\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    };\r\n    return SAMLAuthProvider;\r\n}(FederatedAuthProvider));\r\nexport { SAMLAuthProvider };\r\n//# sourceMappingURL=saml.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/idp.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/id_token.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/user.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/credentials/index.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/credentials/saml.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/errors.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/assert.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/providers/federated.ts"],"map":"{\"version\":3,\"file\":\"saml.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/providers/saml.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;;AAQH,OAAO,EAAE,kBAAkB,EAAE,MAAM,qBAAqB,CAAC;AAEzD,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AACzC,OAAO,EAAE,qBAAqB,EAAE,MAAM,aAAa,CAAC;AAEpD,IAAM,oBAAoB,GAAG,OAAO,CAAC;AAErC;;;;GAIG;AACH;IAAsC,oCAAqB;IACzD;;;OAGG;IACH,0BAAY,UAAkB;QAC5B,OAAO,CACL,UAAU,CAAC,UAAU,CAAC,oBAAoB,CAAC,sDAE5C,CAAC;eACF,kBAAM,UAAU,CAAC;IACnB,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACI,qCAAoB,GAA3B,UACE,cAA8B;QAE9B,OAAO,gBAAgB,CAAC,8BAA8B,CACpD,cAAwC,CACzC,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACI,oCAAmB,GAA1B,UAA2B,KAAoB;QAC7C,OAAO,gBAAgB,CAAC,8BAA8B,CACpD,CAAC,KAAK,CAAC,UAAU,IAAI,EAAE,CAA4B,CACpD,CAAC;IACJ,CAAC;IAED;;;OAGG;IACI,mCAAkB,GAAzB,UAA0B,IAAqB;QAC7C,IAAM,UAAU,GAAG,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACrD,OAAO,CAAC,UAAU,sDAA+B,CAAC;QAClD,OAAO,UAAU,CAAC;IACpB,CAAC;IAEc,+CAA8B,GAA7C,UAA8C,EAEpB;YADR,aAAa,oBAAA;QAE7B,IAAI,CAAC,aAAa,EAAE;YAClB,OAAO,IAAI,CAAC;SACb;QAEK,IAAA,KAA+B,aAAsC,EAAnE,YAAY,kBAAA,EAAE,UAAU,gBAA2C,CAAC;QAE5E,IAAI,CAAC,YAAY,IAAI,CAAC,UAAU,EAAE;YAChC,OAAO,IAAI,CAAC;SACb;QAED,IAAI;YACF,OAAO,kBAAkB,CAAC,OAAO,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;SAC7D;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IACH,uBAAC;AAAD,CAAC,AA9ED,CAAsC,qBAAqB,GA8E1D\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/providers/saml.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { FirebaseError } from '@firebase/util';\r\nimport { UserCredential } from '../../model/public_types';\r\nimport { AuthCredential } from '../credentials';\r\nimport { FederatedAuthProvider } from './federated';\r\n/**\r\n * An {@link AuthProvider} for SAML.\r\n *\r\n * @public\r\n */\r\nexport declare class SAMLAuthProvider extends FederatedAuthProvider {\r\n    /**\r\n     * Constructor. The providerId must start with \"saml.\"\r\n     * @param providerId - SAML provider ID.\r\n     */\r\n    constructor(providerId: string);\r\n    /**\r\n     * Generates an {@link AuthCredential} from a {@link UserCredential} after a\r\n     * successful SAML flow completes.\r\n     *\r\n     * @remarks\r\n     *\r\n     * For example, to get an {@link AuthCredential}, you could write the\r\n     * following code:\r\n     *\r\n     * ```js\r\n     * const userCredential = await signInWithPopup(auth, samlProvider);\r\n     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\r\n     * ```\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromResult(userCredential: UserCredential): AuthCredential | null;\r\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\r\n    static credentialFromError(error: FirebaseError): AuthCredential | null;\r\n    /**\r\n     * Creates an {@link AuthCredential} from a JSON string or a plain object.\r\n     * @param json - A plain object or a JSON string\r\n     */\r\n    static credentialFromJSON(json: string | object): AuthCredential;\r\n    private static samlCredentialFromTaggedObject;\r\n}\r\n"}}
