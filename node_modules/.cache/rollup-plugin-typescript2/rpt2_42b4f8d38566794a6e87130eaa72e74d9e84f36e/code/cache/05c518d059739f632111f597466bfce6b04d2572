{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __assign, __extends } from \"tslib\";\r\nimport { linkWithPhoneNumber, signInWithPhoneNumber, verifyPhoneNumberForExisting } from '../../api/authentication/sms';\r\nimport { AuthCredential } from './auth_credential';\r\n/**\r\n * Represents the credentials returned by {@link PhoneAuthProvider}.\r\n *\r\n * @public\r\n */\r\nvar PhoneAuthCredential = /** @class */ (function (_super) {\r\n    __extends(PhoneAuthCredential, _super);\r\n    function PhoneAuthCredential(params) {\r\n        var _this = _super.call(this, \"phone\" /* ProviderId.PHONE */, \"phone\" /* SignInMethod.PHONE */) || this;\r\n        _this.params = params;\r\n        return _this;\r\n    }\r\n    /** @internal */\r\n    PhoneAuthCredential._fromVerification = function (verificationId, verificationCode) {\r\n        return new PhoneAuthCredential({ verificationId: verificationId, verificationCode: verificationCode });\r\n    };\r\n    /** @internal */\r\n    PhoneAuthCredential._fromTokenResponse = function (phoneNumber, temporaryProof) {\r\n        return new PhoneAuthCredential({ phoneNumber: phoneNumber, temporaryProof: temporaryProof });\r\n    };\r\n    /** @internal */\r\n    PhoneAuthCredential.prototype._getIdTokenResponse = function (auth) {\r\n        return signInWithPhoneNumber(auth, this._makeVerificationRequest());\r\n    };\r\n    /** @internal */\r\n    PhoneAuthCredential.prototype._linkToIdToken = function (auth, idToken) {\r\n        return linkWithPhoneNumber(auth, __assign({ idToken: idToken }, this._makeVerificationRequest()));\r\n    };\r\n    /** @internal */\r\n    PhoneAuthCredential.prototype._getReauthenticationResolver = function (auth) {\r\n        return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\r\n    };\r\n    /** @internal */\r\n    PhoneAuthCredential.prototype._makeVerificationRequest = function () {\r\n        var _a = this.params, temporaryProof = _a.temporaryProof, phoneNumber = _a.phoneNumber, verificationId = _a.verificationId, verificationCode = _a.verificationCode;\r\n        if (temporaryProof && phoneNumber) {\r\n            return { temporaryProof: temporaryProof, phoneNumber: phoneNumber };\r\n        }\r\n        return {\r\n            sessionInfo: verificationId,\r\n            code: verificationCode\r\n        };\r\n    };\r\n    /** {@inheritdoc AuthCredential.toJSON} */\r\n    PhoneAuthCredential.prototype.toJSON = function () {\r\n        var obj = {\r\n            providerId: this.providerId\r\n        };\r\n        if (this.params.phoneNumber) {\r\n            obj.phoneNumber = this.params.phoneNumber;\r\n        }\r\n        if (this.params.temporaryProof) {\r\n            obj.temporaryProof = this.params.temporaryProof;\r\n        }\r\n        if (this.params.verificationCode) {\r\n            obj.verificationCode = this.params.verificationCode;\r\n        }\r\n        if (this.params.verificationId) {\r\n            obj.verificationId = this.params.verificationId;\r\n        }\r\n        return obj;\r\n    };\r\n    /** Generates a phone credential based on a plain object or a JSON string. */\r\n    PhoneAuthCredential.fromJSON = function (json) {\r\n        if (typeof json === 'string') {\r\n            json = JSON.parse(json);\r\n        }\r\n        var _a = json, verificationId = _a.verificationId, verificationCode = _a.verificationCode, phoneNumber = _a.phoneNumber, temporaryProof = _a.temporaryProof;\r\n        if (!verificationCode &&\r\n            !verificationId &&\r\n            !phoneNumber &&\r\n            !temporaryProof) {\r\n            return null;\r\n        }\r\n        return new PhoneAuthCredential({\r\n            verificationId: verificationId,\r\n            verificationCode: verificationCode,\r\n            phoneNumber: phoneNumber,\r\n            temporaryProof: temporaryProof\r\n        });\r\n    };\r\n    return PhoneAuthCredential;\r\n}(AuthCredential));\r\nexport { PhoneAuthCredential };\r\n//# sourceMappingURL=phone.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/enums.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/mfa.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/sms.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/auth.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/id_token.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/credentials/auth_credential.ts"],"map":"{\"version\":3,\"file\":\"phone.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/credentials/phone.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/credentials/phone.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\r\nimport { SignInWithPhoneNumberRequest } from '../../api/authentication/sms';\r\nimport { AuthInternal } from '../../model/auth';\r\nimport { IdTokenResponse } from '../../model/id_token';\r\nimport { AuthCredential } from './auth_credential';\r\nexport interface PhoneAuthCredentialParameters {\r\n    verificationId?: string;\r\n    verificationCode?: string;\r\n    phoneNumber?: string;\r\n    temporaryProof?: string;\r\n}\r\n/**\r\n * Represents the credentials returned by {@link PhoneAuthProvider}.\r\n *\r\n * @public\r\n */\r\nexport declare class PhoneAuthCredential extends AuthCredential {\r\n    private readonly params;\r\n    private constructor();\r\n    /** @internal */\r\n    static _fromVerification(verificationId: string, verificationCode: string): PhoneAuthCredential;\r\n    /** @internal */\r\n    static _fromTokenResponse(phoneNumber: string, temporaryProof: string): PhoneAuthCredential;\r\n    /** @internal */\r\n    _getIdTokenResponse(auth: AuthInternal): Promise<PhoneOrOauthTokenResponse>;\r\n    /** @internal */\r\n    _linkToIdToken(auth: AuthInternal, idToken: string): Promise<IdTokenResponse>;\r\n    /** @internal */\r\n    _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse>;\r\n    /** @internal */\r\n    _makeVerificationRequest(): SignInWithPhoneNumberRequest;\r\n    /** {@inheritdoc AuthCredential.toJSON} */\r\n    toJSON(): object;\r\n    /** Generates a phone credential based on a plain object or a JSON string. */\r\n    static fromJSON(json: object | string): PhoneAuthCredential | null;\r\n}\r\n"}}
