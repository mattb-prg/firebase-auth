{"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { _generateEventId } from '../../core/util/event_id';\r\n/**\r\n * Interface for sending messages and waiting for a completion response.\r\n *\r\n */\r\nvar Sender = /** @class */ (function () {\r\n    function Sender(target) {\r\n        this.target = target;\r\n        this.handlers = new Set();\r\n    }\r\n    /**\r\n     * Unsubscribe the handler and remove it from our tracking Set.\r\n     *\r\n     * @param handler - The handler to unsubscribe.\r\n     */\r\n    Sender.prototype.removeMessageHandler = function (handler) {\r\n        if (handler.messageChannel) {\r\n            handler.messageChannel.port1.removeEventListener('message', handler.onMessage);\r\n            handler.messageChannel.port1.close();\r\n        }\r\n        this.handlers.delete(handler);\r\n    };\r\n    /**\r\n     * Send a message to the Receiver located at {@link target}.\r\n     *\r\n     * @remarks\r\n     * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\r\n     * receiver has had a chance to fully process the event.\r\n     *\r\n     * @param eventType - Type of event to send.\r\n     * @param data - The payload of the event.\r\n     * @param timeout - Timeout for waiting on an ACK from the receiver.\r\n     *\r\n     * @returns An array of settled promises from all the handlers that were listening on the receiver.\r\n     */\r\n    Sender.prototype._send = function (eventType, data, timeout) {\r\n        if (timeout === void 0) { timeout = 50 /* _TimeoutDuration.ACK */; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var messageChannel, completionTimer, handler;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;\r\n                if (!messageChannel) {\r\n                    throw new Error(\"connection_unavailable\" /* _MessageError.CONNECTION_UNAVAILABLE */);\r\n                }\r\n                return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                        var eventId = _generateEventId('', 20);\r\n                        messageChannel.port1.start();\r\n                        var ackTimer = setTimeout(function () {\r\n                            reject(new Error(\"unsupported_event\" /* _MessageError.UNSUPPORTED_EVENT */));\r\n                        }, timeout);\r\n                        handler = {\r\n                            messageChannel: messageChannel,\r\n                            onMessage: function (event) {\r\n                                var messageEvent = event;\r\n                                if (messageEvent.data.eventId !== eventId) {\r\n                                    return;\r\n                                }\r\n                                switch (messageEvent.data.status) {\r\n                                    case \"ack\" /* _Status.ACK */:\r\n                                        // The receiver should ACK first.\r\n                                        clearTimeout(ackTimer);\r\n                                        completionTimer = setTimeout(function () {\r\n                                            reject(new Error(\"timeout\" /* _MessageError.TIMEOUT */));\r\n                                        }, 3000 /* _TimeoutDuration.COMPLETION */);\r\n                                        break;\r\n                                    case \"done\" /* _Status.DONE */:\r\n                                        // Once the receiver's handlers are finished we will get the results.\r\n                                        clearTimeout(completionTimer);\r\n                                        resolve(messageEvent.data.response);\r\n                                        break;\r\n                                    default:\r\n                                        clearTimeout(ackTimer);\r\n                                        clearTimeout(completionTimer);\r\n                                        reject(new Error(\"invalid_response\" /* _MessageError.INVALID_RESPONSE */));\r\n                                        break;\r\n                                }\r\n                            }\r\n                        };\r\n                        _this.handlers.add(handler);\r\n                        messageChannel.port1.addEventListener('message', handler.onMessage);\r\n                        _this.target.postMessage({\r\n                            eventType: eventType,\r\n                            eventId: eventId,\r\n                            data: data\r\n                        }, [messageChannel.port2]);\r\n                    }).finally(function () {\r\n                        if (handler) {\r\n                            _this.removeMessageHandler(handler);\r\n                        }\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    return Sender;\r\n}());\r\nexport { Sender };\r\n//# sourceMappingURL=sender.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/event_id.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/messagechannel/index.ts"],"map":"{\"version\":3,\"file\":\"sender.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/platform_browser/messagechannel/sender.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/platform_browser/messagechannel/sender.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { _SenderRequest, _EventType, _ReceiverMessageResponse, _ReceiverResponse, _TimeoutDuration } from './index';\r\n/**\r\n * Interface for sending messages and waiting for a completion response.\r\n *\r\n */\r\nexport declare class Sender {\r\n    private readonly target;\r\n    private readonly handlers;\r\n    constructor(target: ServiceWorker);\r\n    /**\r\n     * Unsubscribe the handler and remove it from our tracking Set.\r\n     *\r\n     * @param handler - The handler to unsubscribe.\r\n     */\r\n    private removeMessageHandler;\r\n    /**\r\n     * Send a message to the Receiver located at {@link target}.\r\n     *\r\n     * @remarks\r\n     * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\r\n     * receiver has had a chance to fully process the event.\r\n     *\r\n     * @param eventType - Type of event to send.\r\n     * @param data - The payload of the event.\r\n     * @param timeout - Timeout for waiting on an ACK from the receiver.\r\n     *\r\n     * @returns An array of settled promises from all the handlers that were listening on the receiver.\r\n     */\r\n    _send<T extends _ReceiverResponse, S extends _SenderRequest>(eventType: _EventType, data: S, timeout?: _TimeoutDuration): Promise<_ReceiverMessageResponse<T>>;\r\n}\r\n"}}
