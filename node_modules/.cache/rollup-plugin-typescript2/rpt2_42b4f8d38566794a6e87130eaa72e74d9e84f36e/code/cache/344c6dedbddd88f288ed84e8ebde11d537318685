{"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { STORAGE_AVAILABLE_KEY } from '../../core/persistence/';\r\nimport { Receiver } from '../messagechannel/receiver';\r\nimport { Sender } from '../messagechannel/sender';\r\nimport { _isWorker, _getActiveServiceWorker, _getServiceWorkerController, _getWorkerGlobalScope } from '../util/worker';\r\nexport var DB_NAME = 'firebaseLocalStorageDb';\r\nvar DB_VERSION = 1;\r\nvar DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';\r\nvar DB_DATA_KEYPATH = 'fbase_key';\r\n/**\r\n * Promise wrapper for IDBRequest\r\n *\r\n * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6\r\n *\r\n */\r\nvar DBPromise = /** @class */ (function () {\r\n    function DBPromise(request) {\r\n        this.request = request;\r\n    }\r\n    DBPromise.prototype.toPromise = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            _this.request.addEventListener('success', function () {\r\n                resolve(_this.request.result);\r\n            });\r\n            _this.request.addEventListener('error', function () {\r\n                reject(_this.request.error);\r\n            });\r\n        });\r\n    };\r\n    return DBPromise;\r\n}());\r\nfunction getObjectStore(db, isReadWrite) {\r\n    return db\r\n        .transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly')\r\n        .objectStore(DB_OBJECTSTORE_NAME);\r\n}\r\nexport function _clearDatabase(db) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var objectStore;\r\n        return __generator(this, function (_a) {\r\n            objectStore = getObjectStore(db, true);\r\n            return [2 /*return*/, new DBPromise(objectStore.clear()).toPromise()];\r\n        });\r\n    });\r\n}\r\nexport function _deleteDatabase() {\r\n    var request = indexedDB.deleteDatabase(DB_NAME);\r\n    return new DBPromise(request).toPromise();\r\n}\r\nexport function _openDatabase() {\r\n    var _this = this;\r\n    var request = indexedDB.open(DB_NAME, DB_VERSION);\r\n    return new Promise(function (resolve, reject) {\r\n        request.addEventListener('error', function () {\r\n            reject(request.error);\r\n        });\r\n        request.addEventListener('upgradeneeded', function () {\r\n            var db = request.result;\r\n            try {\r\n                db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n        request.addEventListener('success', function () { return __awaiter(_this, void 0, void 0, function () {\r\n            var db, _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        db = request.result;\r\n                        if (!!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) return [3 /*break*/, 3];\r\n                        // Need to close the database or else you get a `blocked` event\r\n                        db.close();\r\n                        return [4 /*yield*/, _deleteDatabase()];\r\n                    case 1:\r\n                        _b.sent();\r\n                        _a = resolve;\r\n                        return [4 /*yield*/, _openDatabase()];\r\n                    case 2:\r\n                        _a.apply(void 0, [_b.sent()]);\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        resolve(db);\r\n                        _b.label = 4;\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    });\r\n}\r\nexport function _putObject(db, key, value) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var request;\r\n        var _a;\r\n        return __generator(this, function (_b) {\r\n            request = getObjectStore(db, true).put((_a = {},\r\n                _a[DB_DATA_KEYPATH] = key,\r\n                _a.value = value,\r\n                _a));\r\n            return [2 /*return*/, new DBPromise(request).toPromise()];\r\n        });\r\n    });\r\n}\r\nfunction getObject(db, key) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var request, data;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    request = getObjectStore(db, false).get(key);\r\n                    return [4 /*yield*/, new DBPromise(request).toPromise()];\r\n                case 1:\r\n                    data = _a.sent();\r\n                    return [2 /*return*/, data === undefined ? null : data.value];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function _deleteObject(db, key) {\r\n    var request = getObjectStore(db, true).delete(key);\r\n    return new DBPromise(request).toPromise();\r\n}\r\nexport var _POLLING_INTERVAL_MS = 800;\r\nexport var _TRANSACTION_RETRY_COUNT = 3;\r\nvar IndexedDBLocalPersistence = /** @class */ (function () {\r\n    function IndexedDBLocalPersistence() {\r\n        this.type = \"LOCAL\" /* PersistenceType.LOCAL */;\r\n        this._shouldAllowMigration = true;\r\n        this.listeners = {};\r\n        this.localCache = {};\r\n        // setTimeout return value is platform specific\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.pollTimer = null;\r\n        this.pendingWrites = 0;\r\n        this.receiver = null;\r\n        this.sender = null;\r\n        this.serviceWorkerReceiverAvailable = false;\r\n        this.activeServiceWorker = null;\r\n        // Fire & forget the service worker registration as it may never resolve\r\n        this._workerInitializationPromise =\r\n            this.initializeServiceWorkerMessaging().then(function () { }, function () { });\r\n    }\r\n    IndexedDBLocalPersistence.prototype._openDb = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        if (this.db) {\r\n                            return [2 /*return*/, this.db];\r\n                        }\r\n                        _a = this;\r\n                        return [4 /*yield*/, _openDatabase()];\r\n                    case 1:\r\n                        _a.db = _b.sent();\r\n                        return [2 /*return*/, this.db];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    IndexedDBLocalPersistence.prototype._withRetries = function (op) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var numAttempts, db, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        numAttempts = 0;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!true) return [3 /*break*/, 7];\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        _a.trys.push([2, 5, , 6]);\r\n                        return [4 /*yield*/, this._openDb()];\r\n                    case 3:\r\n                        db = _a.sent();\r\n                        return [4 /*yield*/, op(db)];\r\n                    case 4: return [2 /*return*/, _a.sent()];\r\n                    case 5:\r\n                        e_1 = _a.sent();\r\n                        if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {\r\n                            throw e_1;\r\n                        }\r\n                        if (this.db) {\r\n                            this.db.close();\r\n                            this.db = undefined;\r\n                        }\r\n                        return [3 /*break*/, 6];\r\n                    case 6: return [3 /*break*/, 1];\r\n                    case 7: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\r\n     * postMessage interface to send these events to the worker ourselves.\r\n     */\r\n    IndexedDBLocalPersistence.prototype.initializeServiceWorkerMessaging = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, _isWorker() ? this.initializeReceiver() : this.initializeSender()];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * As the worker we should listen to events from the main window.\r\n     */\r\n    IndexedDBLocalPersistence.prototype.initializeReceiver = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                this.receiver = Receiver._getInstance(_getWorkerGlobalScope());\r\n                // Refresh from persistence if we receive a KeyChanged message.\r\n                this.receiver._subscribe(\"keyChanged\" /* _EventType.KEY_CHANGED */, function (_origin, data) { return __awaiter(_this, void 0, void 0, function () {\r\n                    var keys;\r\n                    return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, this._poll()];\r\n                            case 1:\r\n                                keys = _a.sent();\r\n                                return [2 /*return*/, {\r\n                                        keyProcessed: keys.includes(data.key)\r\n                                    }];\r\n                        }\r\n                    });\r\n                }); });\r\n                // Let the sender know that we are listening so they give us more timeout.\r\n                this.receiver._subscribe(\"ping\" /* _EventType.PING */, function (_origin, _data) { return __awaiter(_this, void 0, void 0, function () {\r\n                    return __generator(this, function (_a) {\r\n                        return [2 /*return*/, [\"keyChanged\" /* _EventType.KEY_CHANGED */]];\r\n                    });\r\n                }); });\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * As the main window, we should let the worker know when keys change (set and remove).\r\n     *\r\n     * @remarks\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\r\n     * may not resolve.\r\n     */\r\n    IndexedDBLocalPersistence.prototype.initializeSender = function () {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _c, results;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        // Check to see if there's an active service worker.\r\n                        _c = this;\r\n                        return [4 /*yield*/, _getActiveServiceWorker()];\r\n                    case 1:\r\n                        // Check to see if there's an active service worker.\r\n                        _c.activeServiceWorker = _d.sent();\r\n                        if (!this.activeServiceWorker) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        this.sender = new Sender(this.activeServiceWorker);\r\n                        return [4 /*yield*/, this.sender._send(\"ping\" /* _EventType.PING */, {}, 800 /* _TimeoutDuration.LONG_ACK */)];\r\n                    case 2:\r\n                        results = _d.sent();\r\n                        if (!results) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) &&\r\n                            ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes(\"keyChanged\" /* _EventType.KEY_CHANGED */))) {\r\n                            this.serviceWorkerReceiverAvailable = true;\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Let the worker know about a changed key, the exact key doesn't technically matter since the\r\n     * worker will just trigger a full sync anyway.\r\n     *\r\n     * @remarks\r\n     * For now, we only support one service worker per page.\r\n     *\r\n     * @param key - Storage key which changed.\r\n     */\r\n    IndexedDBLocalPersistence.prototype.notifyServiceWorker = function (key) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        if (!this.sender ||\r\n                            !this.activeServiceWorker ||\r\n                            _getServiceWorkerController() !== this.activeServiceWorker) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        _b.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.sender._send(\"keyChanged\" /* _EventType.KEY_CHANGED */, { key: key }, \r\n                            // Use long timeout if receiver has previously responded to a ping from us.\r\n                            this.serviceWorkerReceiverAvailable\r\n                                ? 800 /* _TimeoutDuration.LONG_ACK */\r\n                                : 50 /* _TimeoutDuration.ACK */)];\r\n                    case 2:\r\n                        _b.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        _a = _b.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    IndexedDBLocalPersistence.prototype._isAvailable = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var db, _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _b.trys.push([0, 4, , 5]);\r\n                        if (!indexedDB) {\r\n                            return [2 /*return*/, false];\r\n                        }\r\n                        return [4 /*yield*/, _openDatabase()];\r\n                    case 1:\r\n                        db = _b.sent();\r\n                        return [4 /*yield*/, _putObject(db, STORAGE_AVAILABLE_KEY, '1')];\r\n                    case 2:\r\n                        _b.sent();\r\n                        return [4 /*yield*/, _deleteObject(db, STORAGE_AVAILABLE_KEY)];\r\n                    case 3:\r\n                        _b.sent();\r\n                        return [2 /*return*/, true];\r\n                    case 4:\r\n                        _a = _b.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 5: return [2 /*return*/, false];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    IndexedDBLocalPersistence.prototype._withPendingWrite = function (write) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.pendingWrites++;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, , 3, 4]);\r\n                        return [4 /*yield*/, write()];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        this.pendingWrites--;\r\n                        return [7 /*endfinally*/];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    IndexedDBLocalPersistence.prototype._set = function (key, value) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this._withPendingWrite(function () { return __awaiter(_this, void 0, void 0, function () {\r\n                        return __generator(this, function (_a) {\r\n                            switch (_a.label) {\r\n                                case 0: return [4 /*yield*/, this._withRetries(function (db) { return _putObject(db, key, value); })];\r\n                                case 1:\r\n                                    _a.sent();\r\n                                    this.localCache[key] = value;\r\n                                    return [2 /*return*/, this.notifyServiceWorker(key)];\r\n                            }\r\n                        });\r\n                    }); })];\r\n            });\r\n        });\r\n    };\r\n    IndexedDBLocalPersistence.prototype._get = function (key) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var obj;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this._withRetries(function (db) {\r\n                            return getObject(db, key);\r\n                        })];\r\n                    case 1:\r\n                        obj = (_a.sent());\r\n                        this.localCache[key] = obj;\r\n                        return [2 /*return*/, obj];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    IndexedDBLocalPersistence.prototype._remove = function (key) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this._withPendingWrite(function () { return __awaiter(_this, void 0, void 0, function () {\r\n                        return __generator(this, function (_a) {\r\n                            switch (_a.label) {\r\n                                case 0: return [4 /*yield*/, this._withRetries(function (db) { return _deleteObject(db, key); })];\r\n                                case 1:\r\n                                    _a.sent();\r\n                                    delete this.localCache[key];\r\n                                    return [2 /*return*/, this.notifyServiceWorker(key)];\r\n                            }\r\n                        });\r\n                    }); })];\r\n            });\r\n        });\r\n    };\r\n    IndexedDBLocalPersistence.prototype._poll = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result, keys, keysInResult, _i, result_1, _a, key, value, _b, _c, localKey;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0: return [4 /*yield*/, this._withRetries(function (db) {\r\n                            var getAllRequest = getObjectStore(db, false).getAll();\r\n                            return new DBPromise(getAllRequest).toPromise();\r\n                        })];\r\n                    case 1:\r\n                        result = _d.sent();\r\n                        if (!result) {\r\n                            return [2 /*return*/, []];\r\n                        }\r\n                        // If we have pending writes in progress abort, we'll get picked up on the next poll\r\n                        if (this.pendingWrites !== 0) {\r\n                            return [2 /*return*/, []];\r\n                        }\r\n                        keys = [];\r\n                        keysInResult = new Set();\r\n                        for (_i = 0, result_1 = result; _i < result_1.length; _i++) {\r\n                            _a = result_1[_i], key = _a.fbase_key, value = _a.value;\r\n                            keysInResult.add(key);\r\n                            if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {\r\n                                this.notifyListeners(key, value);\r\n                                keys.push(key);\r\n                            }\r\n                        }\r\n                        for (_b = 0, _c = Object.keys(this.localCache); _b < _c.length; _b++) {\r\n                            localKey = _c[_b];\r\n                            if (this.localCache[localKey] && !keysInResult.has(localKey)) {\r\n                                // Deleted\r\n                                this.notifyListeners(localKey, null);\r\n                                keys.push(localKey);\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, keys];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    IndexedDBLocalPersistence.prototype.notifyListeners = function (key, newValue) {\r\n        this.localCache[key] = newValue;\r\n        var listeners = this.listeners[key];\r\n        if (listeners) {\r\n            for (var _i = 0, _a = Array.from(listeners); _i < _a.length; _i++) {\r\n                var listener = _a[_i];\r\n                listener(newValue);\r\n            }\r\n        }\r\n    };\r\n    IndexedDBLocalPersistence.prototype.startPolling = function () {\r\n        var _this = this;\r\n        this.stopPolling();\r\n        this.pollTimer = setInterval(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n            return [2 /*return*/, this._poll()];\r\n        }); }); }, _POLLING_INTERVAL_MS);\r\n    };\r\n    IndexedDBLocalPersistence.prototype.stopPolling = function () {\r\n        if (this.pollTimer) {\r\n            clearInterval(this.pollTimer);\r\n            this.pollTimer = null;\r\n        }\r\n    };\r\n    IndexedDBLocalPersistence.prototype._addListener = function (key, listener) {\r\n        if (Object.keys(this.listeners).length === 0) {\r\n            this.startPolling();\r\n        }\r\n        if (!this.listeners[key]) {\r\n            this.listeners[key] = new Set();\r\n            // Populate the cache to avoid spuriously triggering on first poll.\r\n            void this._get(key); // This can happen in the background async and we can return immediately.\r\n        }\r\n        this.listeners[key].add(listener);\r\n    };\r\n    IndexedDBLocalPersistence.prototype._removeListener = function (key, listener) {\r\n        if (this.listeners[key]) {\r\n            this.listeners[key].delete(listener);\r\n            if (this.listeners[key].size === 0) {\r\n                delete this.listeners[key];\r\n            }\r\n        }\r\n        if (Object.keys(this.listeners).length === 0) {\r\n            this.stopPolling();\r\n        }\r\n    };\r\n    IndexedDBLocalPersistence.type = 'LOCAL';\r\n    return IndexedDBLocalPersistence;\r\n}());\r\n/**\r\n * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\r\n * for the underlying storage.\r\n *\r\n * @public\r\n */\r\nexport var indexedDBLocalPersistence = IndexedDBLocalPersistence;\r\n//# sourceMappingURL=indexed_db.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/persistence/index.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/messagechannel/index.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/messagechannel/receiver.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/messagechannel/sender.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/util/worker.ts"],"map":"{\"version\":3,\"file\":\"indexed_db.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/platform_browser/persistence/indexed_db.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/platform_browser/persistence/indexed_db.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Persistence } from '../../model/public_types';\r\nimport { PersistenceValue } from '../../core/persistence/';\r\nexport declare const DB_NAME = \"firebaseLocalStorageDb\";\r\nexport declare function _clearDatabase(db: IDBDatabase): Promise<void>;\r\nexport declare function _deleteDatabase(): Promise<void>;\r\nexport declare function _openDatabase(): Promise<IDBDatabase>;\r\nexport declare function _putObject(db: IDBDatabase, key: string, value: PersistenceValue | string): Promise<void>;\r\nexport declare function _deleteObject(db: IDBDatabase, key: string): Promise<void>;\r\nexport declare const _POLLING_INTERVAL_MS = 800;\r\nexport declare const _TRANSACTION_RETRY_COUNT = 3;\r\n/**\r\n * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\r\n * for the underlying storage.\r\n *\r\n * @public\r\n */\r\nexport declare const indexedDBLocalPersistence: Persistence;\r\n"}}
