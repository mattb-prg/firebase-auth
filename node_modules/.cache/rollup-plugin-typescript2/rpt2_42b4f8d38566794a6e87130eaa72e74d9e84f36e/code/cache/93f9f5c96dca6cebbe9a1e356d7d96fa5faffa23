{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { getRecaptchaParams } from '../../api/authentication/recaptcha';\r\nimport { _castAuth } from '../../core/auth/auth_impl';\r\nimport { _assert } from '../../core/util/assert';\r\nimport { _isHttpOrHttps } from '../../core/util/location';\r\nimport { _window } from '../auth_window';\r\nimport { _isWorker } from '../util/worker';\r\nimport { MockReCaptchaLoaderImpl, ReCaptchaLoaderImpl } from './recaptcha_loader';\r\nexport var RECAPTCHA_VERIFIER_TYPE = 'recaptcha';\r\nvar DEFAULT_PARAMS = {\r\n    theme: 'light',\r\n    type: 'image'\r\n};\r\n/**\r\n * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\r\n *\r\n * @remarks\r\n * `RecaptchaVerifier` does not work in a Node.js environment.\r\n *\r\n * @public\r\n */\r\nvar RecaptchaVerifier = /** @class */ (function () {\r\n    /**\r\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\r\n     *\r\n     * @param containerOrId - The reCAPTCHA container parameter.\r\n     *\r\n     * @remarks\r\n     * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\r\n     * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\r\n     * an element ID. The corresponding element must also must be in the DOM at the time of\r\n     * initialization.\r\n     *\r\n     * @param parameters - The optional reCAPTCHA parameters.\r\n     *\r\n     * @remarks\r\n     * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\r\n     * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\r\n     * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\r\n     * 'invisible'.\r\n     */\r\n    function RecaptchaVerifier(authExtern, containerOrId, parameters) {\r\n        if (parameters === void 0) { parameters = __assign({}, DEFAULT_PARAMS); }\r\n        this.parameters = parameters;\r\n        /**\r\n         * The application verifier type.\r\n         *\r\n         * @remarks\r\n         * For a reCAPTCHA verifier, this is 'recaptcha'.\r\n         */\r\n        this.type = RECAPTCHA_VERIFIER_TYPE;\r\n        this.destroyed = false;\r\n        this.widgetId = null;\r\n        this.tokenChangeListeners = new Set();\r\n        this.renderPromise = null;\r\n        this.recaptcha = null;\r\n        this.auth = _castAuth(authExtern);\r\n        this.isInvisible = this.parameters.size === 'invisible';\r\n        _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\r\n        var container = typeof containerOrId === 'string'\r\n            ? document.getElementById(containerOrId)\r\n            : containerOrId;\r\n        _assert(container, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        this.container = container;\r\n        this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\r\n        this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting\r\n            ? new MockReCaptchaLoaderImpl()\r\n            : new ReCaptchaLoaderImpl();\r\n        this.validateStartingState();\r\n        // TODO: Figure out if sdk version is needed\r\n    }\r\n    /**\r\n     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\r\n     *\r\n     * @returns A Promise for the reCAPTCHA token.\r\n     */\r\n    RecaptchaVerifier.prototype.verify = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var id, recaptcha, response;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.assertNotDestroyed();\r\n                        return [4 /*yield*/, this.render()];\r\n                    case 1:\r\n                        id = _a.sent();\r\n                        recaptcha = this.getAssertedRecaptcha();\r\n                        response = recaptcha.getResponse(id);\r\n                        if (response) {\r\n                            return [2 /*return*/, response];\r\n                        }\r\n                        return [2 /*return*/, new Promise(function (resolve) {\r\n                                var tokenChange = function (token) {\r\n                                    if (!token) {\r\n                                        return; // Ignore token expirations.\r\n                                    }\r\n                                    _this.tokenChangeListeners.delete(tokenChange);\r\n                                    resolve(token);\r\n                                };\r\n                                _this.tokenChangeListeners.add(tokenChange);\r\n                                if (_this.isInvisible) {\r\n                                    recaptcha.execute(id);\r\n                                }\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Renders the reCAPTCHA widget on the page.\r\n     *\r\n     * @returns A Promise that resolves with the reCAPTCHA widget ID.\r\n     */\r\n    RecaptchaVerifier.prototype.render = function () {\r\n        var _this = this;\r\n        try {\r\n            this.assertNotDestroyed();\r\n        }\r\n        catch (e) {\r\n            // This method returns a promise. Since it's not async (we want to return the\r\n            // _same_ promise if rendering is still occurring), the API surface should\r\n            // reject with the error rather than just throw\r\n            return Promise.reject(e);\r\n        }\r\n        if (this.renderPromise) {\r\n            return this.renderPromise;\r\n        }\r\n        this.renderPromise = this.makeRenderPromise().catch(function (e) {\r\n            _this.renderPromise = null;\r\n            throw e;\r\n        });\r\n        return this.renderPromise;\r\n    };\r\n    /** @internal */\r\n    RecaptchaVerifier.prototype._reset = function () {\r\n        this.assertNotDestroyed();\r\n        if (this.widgetId !== null) {\r\n            this.getAssertedRecaptcha().reset(this.widgetId);\r\n        }\r\n    };\r\n    /**\r\n     * Clears the reCAPTCHA widget from the page and destroys the instance.\r\n     */\r\n    RecaptchaVerifier.prototype.clear = function () {\r\n        var _this = this;\r\n        this.assertNotDestroyed();\r\n        this.destroyed = true;\r\n        this._recaptchaLoader.clearedOneInstance();\r\n        if (!this.isInvisible) {\r\n            this.container.childNodes.forEach(function (node) {\r\n                _this.container.removeChild(node);\r\n            });\r\n        }\r\n    };\r\n    RecaptchaVerifier.prototype.validateStartingState = function () {\r\n        _assert(!this.parameters.sitekey, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\r\n        _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\r\n    };\r\n    RecaptchaVerifier.prototype.makeTokenCallback = function (existing) {\r\n        var _this = this;\r\n        return function (token) {\r\n            _this.tokenChangeListeners.forEach(function (listener) { return listener(token); });\r\n            if (typeof existing === 'function') {\r\n                existing(token);\r\n            }\r\n            else if (typeof existing === 'string') {\r\n                var globalFunc = _window()[existing];\r\n                if (typeof globalFunc === 'function') {\r\n                    globalFunc(token);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    RecaptchaVerifier.prototype.assertNotDestroyed = function () {\r\n        _assert(!this.destroyed, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n    };\r\n    RecaptchaVerifier.prototype.makeRenderPromise = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var container, guaranteedEmpty;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.init()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        if (!this.widgetId) {\r\n                            container = this.container;\r\n                            if (!this.isInvisible) {\r\n                                guaranteedEmpty = document.createElement('div');\r\n                                container.appendChild(guaranteedEmpty);\r\n                                container = guaranteedEmpty;\r\n                            }\r\n                            this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);\r\n                        }\r\n                        return [2 /*return*/, this.widgetId];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    RecaptchaVerifier.prototype.init = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, siteKey;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _assert(_isHttpOrHttps() && !_isWorker(), this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n                        return [4 /*yield*/, domReady()];\r\n                    case 1:\r\n                        _b.sent();\r\n                        _a = this;\r\n                        return [4 /*yield*/, this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined)];\r\n                    case 2:\r\n                        _a.recaptcha = _b.sent();\r\n                        return [4 /*yield*/, getRecaptchaParams(this.auth)];\r\n                    case 3:\r\n                        siteKey = _b.sent();\r\n                        _assert(siteKey, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n                        this.parameters.sitekey = siteKey;\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    RecaptchaVerifier.prototype.getAssertedRecaptcha = function () {\r\n        _assert(this.recaptcha, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        return this.recaptcha;\r\n    };\r\n    return RecaptchaVerifier;\r\n}());\r\nexport { RecaptchaVerifier };\r\nfunction domReady() {\r\n    var resolver = null;\r\n    return new Promise(function (resolve) {\r\n        if (document.readyState === 'complete') {\r\n            resolve();\r\n            return;\r\n        }\r\n        // Document not ready, wait for load before resolving.\r\n        // Save resolver, so we can remove listener in case it was externally\r\n        // cancelled.\r\n        resolver = function () { return resolve(); };\r\n        window.addEventListener('load', resolver);\r\n    }).catch(function (e) {\r\n        if (resolver) {\r\n            window.removeEventListener('load', resolver);\r\n        }\r\n        throw e;\r\n    });\r\n}\r\n//# sourceMappingURL=recaptcha_verifier.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/recaptcha.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/auth/auth_impl.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/errors.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/assert.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/location.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/application_verifier.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/auth.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/auth_window.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/util/worker.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/recaptcha/recaptcha.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/recaptcha/recaptcha_loader.ts"],"map":"{\"version\":3,\"file\":\"recaptcha_verifier.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/platform_browser/recaptcha/recaptcha_verifier.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/platform_browser/recaptcha/recaptcha_verifier.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Auth, RecaptchaParameters } from '../../model/public_types';\r\nimport { ApplicationVerifierInternal } from '../../model/application_verifier';\r\nimport { ReCaptchaLoader } from './recaptcha_loader';\r\nexport declare const RECAPTCHA_VERIFIER_TYPE = \"recaptcha\";\r\n/**\r\n * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\r\n *\r\n * @remarks\r\n * `RecaptchaVerifier` does not work in a Node.js environment.\r\n *\r\n * @public\r\n */\r\nexport declare class RecaptchaVerifier implements ApplicationVerifierInternal {\r\n    private readonly parameters;\r\n    /**\r\n     * The application verifier type.\r\n     *\r\n     * @remarks\r\n     * For a reCAPTCHA verifier, this is 'recaptcha'.\r\n     */\r\n    readonly type = \"recaptcha\";\r\n    private destroyed;\r\n    private widgetId;\r\n    private readonly container;\r\n    private readonly isInvisible;\r\n    private readonly tokenChangeListeners;\r\n    private renderPromise;\r\n    private readonly auth;\r\n    /** @internal */\r\n    readonly _recaptchaLoader: ReCaptchaLoader;\r\n    private recaptcha;\r\n    /**\r\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\r\n     *\r\n     * @param containerOrId - The reCAPTCHA container parameter.\r\n     *\r\n     * @remarks\r\n     * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\r\n     * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\r\n     * an element ID. The corresponding element must also must be in the DOM at the time of\r\n     * initialization.\r\n     *\r\n     * @param parameters - The optional reCAPTCHA parameters.\r\n     *\r\n     * @remarks\r\n     * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\r\n     * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\r\n     * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\r\n     * 'invisible'.\r\n     */\r\n    constructor(authExtern: Auth, containerOrId: HTMLElement | string, parameters?: RecaptchaParameters);\r\n    /**\r\n     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\r\n     *\r\n     * @returns A Promise for the reCAPTCHA token.\r\n     */\r\n    verify(): Promise<string>;\r\n    /**\r\n     * Renders the reCAPTCHA widget on the page.\r\n     *\r\n     * @returns A Promise that resolves with the reCAPTCHA widget ID.\r\n     */\r\n    render(): Promise<number>;\r\n    /** @internal */\r\n    _reset(): void;\r\n    /**\r\n     * Clears the reCAPTCHA widget from the page and destroys the instance.\r\n     */\r\n    clear(): void;\r\n    private validateStartingState;\r\n    private makeTokenCallback;\r\n    private assertNotDestroyed;\r\n    private makeRenderPromise;\r\n    private init;\r\n    private getAssertedRecaptcha;\r\n}\r\n"}}
