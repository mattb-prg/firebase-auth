{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { debugFail } from '../util/assert';\r\n/**\r\n * Interface that represents the credentials returned by an {@link AuthProvider}.\r\n *\r\n * @remarks\r\n * Implementations specify the details about each auth provider's credential requirements.\r\n *\r\n * @public\r\n */\r\nvar AuthCredential = /** @class */ (function () {\r\n    /** @internal */\r\n    function AuthCredential(\r\n    /**\r\n     * The authentication provider ID for the credential.\r\n     *\r\n     * @remarks\r\n     * For example, 'facebook.com', or 'google.com'.\r\n     */\r\n    providerId, \r\n    /**\r\n     * The authentication sign in method for the credential.\r\n     *\r\n     * @remarks\r\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\r\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\r\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\r\n     */\r\n    signInMethod) {\r\n        this.providerId = providerId;\r\n        this.signInMethod = signInMethod;\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     *\r\n     * @returns a JSON-serializable representation of this object.\r\n     */\r\n    AuthCredential.prototype.toJSON = function () {\r\n        return debugFail('not implemented');\r\n    };\r\n    /** @internal */\r\n    AuthCredential.prototype._getIdTokenResponse = function (_auth) {\r\n        return debugFail('not implemented');\r\n    };\r\n    /** @internal */\r\n    AuthCredential.prototype._linkToIdToken = function (_auth, _idToken) {\r\n        return debugFail('not implemented');\r\n    };\r\n    /** @internal */\r\n    AuthCredential.prototype._getReauthenticationResolver = function (_auth) {\r\n        return debugFail('not implemented');\r\n    };\r\n    return AuthCredential;\r\n}());\r\nexport { AuthCredential };\r\n//# sourceMappingURL=auth_credential.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/mfa.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/auth.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/id_token.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/assert.ts"],"map":"{\"version\":3,\"file\":\"auth_credential.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/credentials/auth_credential.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;AAKH,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C;;;;;;;GAOG;AACH;IACE,gBAAgB;IAChB;IACE;;;;;OAKG;IACM,UAAkB;IAC3B;;;;;;;OAOG;IACM,YAAoB;QATpB,eAAU,GAAV,UAAU,CAAQ;QASlB,iBAAY,GAAZ,YAAY,CAAQ;IAC5B,CAAC;IAEJ;;;;OAIG;IACH,+BAAM,GAAN;QACE,OAAO,SAAS,CAAC,iBAAiB,CAAC,CAAC;IACtC,CAAC;IAED,gBAAgB;IAChB,4CAAmB,GAAnB,UAAoB,KAAmB;QACrC,OAAO,SAAS,CAAC,iBAAiB,CAAC,CAAC;IACtC,CAAC;IACD,gBAAgB;IAChB,uCAAc,GAAd,UACE,KAAmB,EACnB,QAAgB;QAEhB,OAAO,SAAS,CAAC,iBAAiB,CAAC,CAAC;IACtC,CAAC;IACD,gBAAgB;IAChB,qDAA4B,GAA5B,UAA6B,KAAmB;QAC9C,OAAO,SAAS,CAAC,iBAAiB,CAAC,CAAC;IACtC,CAAC;IACH,qBAAC;AAAD,CAAC,AA7CD,IA6CC\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/credentials/auth_credential.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\r\nimport { AuthInternal } from '../../model/auth';\r\nimport { IdTokenResponse } from '../../model/id_token';\r\n/**\r\n * Interface that represents the credentials returned by an {@link AuthProvider}.\r\n *\r\n * @remarks\r\n * Implementations specify the details about each auth provider's credential requirements.\r\n *\r\n * @public\r\n */\r\nexport declare class AuthCredential {\r\n    /**\r\n     * The authentication provider ID for the credential.\r\n     *\r\n     * @remarks\r\n     * For example, 'facebook.com', or 'google.com'.\r\n     */\r\n    readonly providerId: string;\r\n    /**\r\n     * The authentication sign in method for the credential.\r\n     *\r\n     * @remarks\r\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\r\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\r\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\r\n     */\r\n    readonly signInMethod: string;\r\n    /** @internal */\r\n    protected constructor(\r\n    /**\r\n     * The authentication provider ID for the credential.\r\n     *\r\n     * @remarks\r\n     * For example, 'facebook.com', or 'google.com'.\r\n     */\r\n    providerId: string, \r\n    /**\r\n     * The authentication sign in method for the credential.\r\n     *\r\n     * @remarks\r\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\r\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\r\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\r\n     */\r\n    signInMethod: string);\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     *\r\n     * @returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON(): object;\r\n    /** @internal */\r\n    _getIdTokenResponse(_auth: AuthInternal): Promise<PhoneOrOauthTokenResponse>;\r\n    /** @internal */\r\n    _linkToIdToken(_auth: AuthInternal, _idToken: string): Promise<IdTokenResponse>;\r\n    /** @internal */\r\n    _getReauthenticationResolver(_auth: AuthInternal): Promise<IdTokenResponse>;\r\n}\r\n"}}
