{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { FirebaseError, querystring } from '@firebase/util';\r\nimport { _createError, _errorWithCustomMessage, _fail } from '../core/util/assert';\r\nimport { Delay } from '../core/util/delay';\r\nimport { _emulatorUrl } from '../core/util/emulator';\r\nimport { FetchProvider } from '../core/util/fetch_provider';\r\nimport { SERVER_ERROR_MAP } from './errors';\r\nexport var DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);\r\nexport function _addTidIfNecessary(auth, request) {\r\n    if (auth.tenantId && !request.tenantId) {\r\n        return __assign(__assign({}, request), { tenantId: auth.tenantId });\r\n    }\r\n    return request;\r\n}\r\nexport function _performApiRequest(auth, method, path, request, customErrorMap) {\r\n    if (customErrorMap === void 0) { customErrorMap = {}; }\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var _this = this;\r\n        return __generator(this, function (_a) {\r\n            return [2 /*return*/, _performFetchWithErrorHandling(auth, customErrorMap, function () { return __awaiter(_this, void 0, void 0, function () {\r\n                    var body, params, query, headers;\r\n                    return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0:\r\n                                body = {};\r\n                                params = {};\r\n                                if (request) {\r\n                                    if (method === \"GET\" /* HttpMethod.GET */) {\r\n                                        params = request;\r\n                                    }\r\n                                    else {\r\n                                        body = {\r\n                                            body: JSON.stringify(request)\r\n                                        };\r\n                                    }\r\n                                }\r\n                                query = querystring(__assign({ key: auth.config.apiKey }, params)).slice(1);\r\n                                return [4 /*yield*/, auth._getAdditionalHeaders()];\r\n                            case 1:\r\n                                headers = _a.sent();\r\n                                headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/json';\r\n                                if (auth.languageCode) {\r\n                                    headers[\"X-Firebase-Locale\" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;\r\n                                }\r\n                                return [2 /*return*/, FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), __assign({ method: method, headers: headers, referrerPolicy: 'no-referrer' }, body))];\r\n                        }\r\n                    });\r\n                }); })];\r\n        });\r\n    });\r\n}\r\nexport function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var errorMap, networkTimeout, response, json, errorMessage, _a, serverErrorCode, serverErrorMessage, authError, e_1;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    auth._canInitEmulator = false;\r\n                    errorMap = __assign(__assign({}, SERVER_ERROR_MAP), customErrorMap);\r\n                    _b.label = 1;\r\n                case 1:\r\n                    _b.trys.push([1, 4, , 5]);\r\n                    networkTimeout = new NetworkTimeout(auth);\r\n                    return [4 /*yield*/, Promise.race([\r\n                            fetchFn(),\r\n                            networkTimeout.promise\r\n                        ])];\r\n                case 2:\r\n                    response = _b.sent();\r\n                    // If we've reached this point, the fetch succeeded and the networkTimeout\r\n                    // didn't throw; clear the network timeout delay so that Node won't hang\r\n                    networkTimeout.clearNetworkTimeout();\r\n                    return [4 /*yield*/, response.json()];\r\n                case 3:\r\n                    json = _b.sent();\r\n                    if ('needConfirmation' in json) {\r\n                        throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, json);\r\n                    }\r\n                    if (response.ok && !('errorMessage' in json)) {\r\n                        return [2 /*return*/, json];\r\n                    }\r\n                    else {\r\n                        errorMessage = response.ok ? json.errorMessage : json.error.message;\r\n                        _a = errorMessage.split(' : '), serverErrorCode = _a[0], serverErrorMessage = _a[1];\r\n                        if (serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */) {\r\n                            throw _makeTaggedError(auth, \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);\r\n                        }\r\n                        else if (serverErrorCode === \"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */) {\r\n                            throw _makeTaggedError(auth, \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */, json);\r\n                        }\r\n                        else if (serverErrorCode === \"USER_DISABLED\" /* ServerError.USER_DISABLED */) {\r\n                            throw _makeTaggedError(auth, \"user-disabled\" /* AuthErrorCode.USER_DISABLED */, json);\r\n                        }\r\n                        authError = errorMap[serverErrorCode] ||\r\n                            serverErrorCode\r\n                                .toLowerCase()\r\n                                .replace(/[_\\s]+/g, '-');\r\n                        if (serverErrorMessage) {\r\n                            throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\r\n                        }\r\n                        else {\r\n                            _fail(auth, authError);\r\n                        }\r\n                    }\r\n                    return [3 /*break*/, 5];\r\n                case 4:\r\n                    e_1 = _b.sent();\r\n                    if (e_1 instanceof FirebaseError) {\r\n                        throw e_1;\r\n                    }\r\n                    // Changing this to a different error code will log user out when there is a network error\r\n                    // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\r\n                    // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\r\n                    _fail(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, { 'message': String(e_1) });\r\n                    return [3 /*break*/, 5];\r\n                case 5: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function _performSignInRequest(auth, method, path, request, customErrorMap) {\r\n    if (customErrorMap === void 0) { customErrorMap = {}; }\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var serverResponse;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, _performApiRequest(auth, method, path, request, customErrorMap)];\r\n                case 1:\r\n                    serverResponse = (_a.sent());\r\n                    if ('mfaPendingCredential' in serverResponse) {\r\n                        _fail(auth, \"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */, {\r\n                            _serverResponse: serverResponse\r\n                        });\r\n                    }\r\n                    return [2 /*return*/, serverResponse];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function _getFinalTarget(auth, host, path, query) {\r\n    var base = \"\".concat(host).concat(path, \"?\").concat(query);\r\n    if (!auth.config.emulator) {\r\n        return \"\".concat(auth.config.apiScheme, \"://\").concat(base);\r\n    }\r\n    return _emulatorUrl(auth.config, base);\r\n}\r\nexport function _parseEnforcementState(enforcementStateStr) {\r\n    switch (enforcementStateStr) {\r\n        case 'ENFORCE':\r\n            return \"ENFORCE\" /* EnforcementState.ENFORCE */;\r\n        case 'AUDIT':\r\n            return \"AUDIT\" /* EnforcementState.AUDIT */;\r\n        case 'OFF':\r\n            return \"OFF\" /* EnforcementState.OFF */;\r\n        default:\r\n            return \"ENFORCEMENT_STATE_UNSPECIFIED\" /* EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED */;\r\n    }\r\n}\r\nvar NetworkTimeout = /** @class */ (function () {\r\n    function NetworkTimeout(auth) {\r\n        var _this = this;\r\n        this.auth = auth;\r\n        // Node timers and browser timers are fundamentally incompatible, but we\r\n        // don't care about the value here\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.timer = null;\r\n        this.promise = new Promise(function (_, reject) {\r\n            _this.timer = setTimeout(function () {\r\n                return reject(_createError(_this.auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\r\n            }, DEFAULT_API_TIMEOUT_MS.get());\r\n        });\r\n    }\r\n    NetworkTimeout.prototype.clearNetworkTimeout = function () {\r\n        clearTimeout(this.timer);\r\n    };\r\n    return NetworkTimeout;\r\n}());\r\nexport function _makeTaggedError(auth, code, response) {\r\n    var errorParams = {\r\n        appName: auth.name\r\n    };\r\n    if (response.email) {\r\n        errorParams.email = response.email;\r\n    }\r\n    if (response.phoneNumber) {\r\n        errorParams.phoneNumber = response.phoneNumber;\r\n    }\r\n    var error = _createError(auth, code, errorParams);\r\n    // We know customData is defined on error because errorParams is defined\r\n    error.customData._tokenResponse = response;\r\n    return error;\r\n}\r\n//# sourceMappingURL=index.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/errors.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/assert.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/delay.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/emulator.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/fetch_provider.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/auth.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/id_token.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/mfa.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/errors.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/api/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/api/index.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { FirebaseError } from '@firebase/util';\r\nimport { AuthErrorCode } from '../core/errors';\r\nimport { Delay } from '../core/util/delay';\r\nimport { Auth } from '../model/public_types';\r\nimport { IdTokenResponse } from '../model/id_token';\r\nimport { ServerError, ServerErrorMap } from './errors';\r\nexport declare const enum HttpMethod {\r\n    POST = \"POST\",\r\n    GET = \"GET\"\r\n}\r\nexport declare const enum HttpHeader {\r\n    CONTENT_TYPE = \"Content-Type\",\r\n    X_FIREBASE_LOCALE = \"X-Firebase-Locale\",\r\n    X_CLIENT_VERSION = \"X-Client-Version\",\r\n    X_FIREBASE_GMPID = \"X-Firebase-gmpid\",\r\n    X_FIREBASE_CLIENT = \"X-Firebase-Client\",\r\n    X_FIREBASE_APP_CHECK = \"X-Firebase-AppCheck\"\r\n}\r\nexport declare const enum Endpoint {\r\n    CREATE_AUTH_URI = \"/v1/accounts:createAuthUri\",\r\n    DELETE_ACCOUNT = \"/v1/accounts:delete\",\r\n    RESET_PASSWORD = \"/v1/accounts:resetPassword\",\r\n    SIGN_UP = \"/v1/accounts:signUp\",\r\n    SIGN_IN_WITH_CUSTOM_TOKEN = \"/v1/accounts:signInWithCustomToken\",\r\n    SIGN_IN_WITH_EMAIL_LINK = \"/v1/accounts:signInWithEmailLink\",\r\n    SIGN_IN_WITH_IDP = \"/v1/accounts:signInWithIdp\",\r\n    SIGN_IN_WITH_PASSWORD = \"/v1/accounts:signInWithPassword\",\r\n    SIGN_IN_WITH_PHONE_NUMBER = \"/v1/accounts:signInWithPhoneNumber\",\r\n    SEND_VERIFICATION_CODE = \"/v1/accounts:sendVerificationCode\",\r\n    SEND_OOB_CODE = \"/v1/accounts:sendOobCode\",\r\n    SET_ACCOUNT_INFO = \"/v1/accounts:update\",\r\n    GET_ACCOUNT_INFO = \"/v1/accounts:lookup\",\r\n    GET_RECAPTCHA_PARAM = \"/v1/recaptchaParams\",\r\n    START_MFA_ENROLLMENT = \"/v2/accounts/mfaEnrollment:start\",\r\n    FINALIZE_MFA_ENROLLMENT = \"/v2/accounts/mfaEnrollment:finalize\",\r\n    START_MFA_SIGN_IN = \"/v2/accounts/mfaSignIn:start\",\r\n    FINALIZE_MFA_SIGN_IN = \"/v2/accounts/mfaSignIn:finalize\",\r\n    WITHDRAW_MFA = \"/v2/accounts/mfaEnrollment:withdraw\",\r\n    GET_PROJECT_CONFIG = \"/v1/projects\",\r\n    GET_RECAPTCHA_CONFIG = \"/v2/recaptchaConfig\",\r\n    GET_PASSWORD_POLICY = \"/v2/passwordPolicy\"\r\n}\r\nexport declare const enum RecaptchaClientType {\r\n    WEB = \"CLIENT_TYPE_WEB\",\r\n    ANDROID = \"CLIENT_TYPE_ANDROID\",\r\n    IOS = \"CLIENT_TYPE_IOS\"\r\n}\r\nexport declare const enum RecaptchaVersion {\r\n    ENTERPRISE = \"RECAPTCHA_ENTERPRISE\"\r\n}\r\nexport declare const enum RecaptchaActionName {\r\n    SIGN_IN_WITH_PASSWORD = \"signInWithPassword\",\r\n    GET_OOB_CODE = \"getOobCode\",\r\n    SIGN_UP_PASSWORD = \"signUpPassword\"\r\n}\r\nexport declare const enum EnforcementState {\r\n    ENFORCE = \"ENFORCE\",\r\n    AUDIT = \"AUDIT\",\r\n    OFF = \"OFF\",\r\n    ENFORCEMENT_STATE_UNSPECIFIED = \"ENFORCEMENT_STATE_UNSPECIFIED\"\r\n}\r\nexport declare const enum RecaptchaProvider {\r\n    EMAIL_PASSWORD_PROVIDER = \"EMAIL_PASSWORD_PROVIDER\"\r\n}\r\nexport declare const DEFAULT_API_TIMEOUT_MS: Delay;\r\nexport declare function _addTidIfNecessary<T extends {\r\n    tenantId?: string;\r\n}>(auth: Auth, request: T): T;\r\nexport declare function _performApiRequest<T, V>(auth: Auth, method: HttpMethod, path: Endpoint, request?: T, customErrorMap?: Partial<ServerErrorMap<ServerError>>): Promise<V>;\r\nexport declare function _performFetchWithErrorHandling<V>(auth: Auth, customErrorMap: Partial<ServerErrorMap<ServerError>>, fetchFn: () => Promise<Response>): Promise<V>;\r\nexport declare function _performSignInRequest<T, V extends IdTokenResponse>(auth: Auth, method: HttpMethod, path: Endpoint, request?: T, customErrorMap?: Partial<ServerErrorMap<ServerError>>): Promise<V>;\r\nexport declare function _getFinalTarget(auth: Auth, host: string, path: string, query: string): string;\r\nexport declare function _parseEnforcementState(enforcementStateStr: string): EnforcementState;\r\ninterface PotentialResponse extends IdTokenResponse {\r\n    email?: string;\r\n    phoneNumber?: string;\r\n}\r\nexport declare function _makeTaggedError(auth: Auth, code: AuthErrorCode, response: PotentialResponse): FirebaseError;\r\nexport {};\r\n"}}
