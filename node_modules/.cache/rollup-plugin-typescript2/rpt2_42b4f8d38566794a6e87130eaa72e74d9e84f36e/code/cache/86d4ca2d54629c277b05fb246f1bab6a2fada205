{"code":"import { __extends } from \"tslib\";\r\nimport { MultiFactorAssertionImpl } from '../../../mfa/mfa_assertion';\r\nimport { finalizeEnrollPhoneMfa } from '../../../api/account_management/mfa';\r\nimport { finalizeSignInPhoneMfa } from '../../../api/authentication/mfa';\r\n/**\r\n * {@inheritdoc PhoneMultiFactorAssertion}\r\n *\r\n * @public\r\n */\r\nvar PhoneMultiFactorAssertionImpl = /** @class */ (function (_super) {\r\n    __extends(PhoneMultiFactorAssertionImpl, _super);\r\n    function PhoneMultiFactorAssertionImpl(credential) {\r\n        var _this = _super.call(this, \"phone\" /* FactorId.PHONE */) || this;\r\n        _this.credential = credential;\r\n        return _this;\r\n    }\r\n    /** @internal */\r\n    PhoneMultiFactorAssertionImpl._fromCredential = function (credential) {\r\n        return new PhoneMultiFactorAssertionImpl(credential);\r\n    };\r\n    /** @internal */\r\n    PhoneMultiFactorAssertionImpl.prototype._finalizeEnroll = function (auth, idToken, displayName) {\r\n        return finalizeEnrollPhoneMfa(auth, {\r\n            idToken: idToken,\r\n            displayName: displayName,\r\n            phoneVerificationInfo: this.credential._makeVerificationRequest()\r\n        });\r\n    };\r\n    /** @internal */\r\n    PhoneMultiFactorAssertionImpl.prototype._finalizeSignIn = function (auth, mfaPendingCredential) {\r\n        return finalizeSignInPhoneMfa(auth, {\r\n            mfaPendingCredential: mfaPendingCredential,\r\n            phoneVerificationInfo: this.credential._makeVerificationRequest()\r\n        });\r\n    };\r\n    return PhoneMultiFactorAssertionImpl;\r\n}(MultiFactorAssertionImpl));\r\nexport { PhoneMultiFactorAssertionImpl };\r\n/**\r\n * Provider for generating a {@link PhoneMultiFactorAssertion}.\r\n *\r\n * @public\r\n */\r\nvar PhoneMultiFactorGenerator = /** @class */ (function () {\r\n    function PhoneMultiFactorGenerator() {\r\n    }\r\n    /**\r\n     * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\r\n     *\r\n     * @remarks\r\n     * This method does not work in a Node.js environment.\r\n     *\r\n     * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\r\n     * @returns A {@link PhoneMultiFactorAssertion} which can be used with\r\n     * {@link MultiFactorResolver.resolveSignIn}\r\n     */\r\n    PhoneMultiFactorGenerator.assertion = function (credential) {\r\n        return PhoneMultiFactorAssertionImpl._fromCredential(credential);\r\n    };\r\n    /**\r\n     * The identifier of the phone second factor: `phone`.\r\n     */\r\n    PhoneMultiFactorGenerator.FACTOR_ID = 'phone';\r\n    return PhoneMultiFactorGenerator;\r\n}());\r\nexport { PhoneMultiFactorGenerator };\r\n//# sourceMappingURL=phone.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/mfa/mfa_assertion.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/auth.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/account_management/mfa.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/credentials/phone.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/mfa.ts"],"map":"{\"version\":3,\"file\":\"phone.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/platform_browser/mfa/assertions/phone.ts\"],\"names\":[],\"mappings\":\";AAqBA,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AAEtE,OAAO,EAAE,sBAAsB,EAAE,MAAM,qCAAqC,CAAC;AAE7E,OAAO,EACL,sBAAsB,EAEvB,MAAM,iCAAiC,CAAC;AAEzC;;;;GAIG;AACH;IACU,iDAAwB;IAGhC,uCAAqC,UAA+B;QAApE,YACE,+CAAqB,SACtB;QAFoC,gBAAU,GAAV,UAAU,CAAqB;;IAEpE,CAAC;IAED,gBAAgB;IACT,6CAAe,GAAtB,UACE,UAA+B;QAE/B,OAAO,IAAI,6BAA6B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAED,gBAAgB;IAChB,uDAAe,GAAf,UACE,IAAkB,EAClB,OAAe,EACf,WAA2B;QAE3B,OAAO,sBAAsB,CAAC,IAAI,EAAE;YAClC,OAAO,SAAA;YACP,WAAW,aAAA;YACX,qBAAqB,EAAE,IAAI,CAAC,UAAU,CAAC,wBAAwB,EAAE;SAClE,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB;IAChB,uDAAe,GAAf,UACE,IAAkB,EAClB,oBAA4B;QAE5B,OAAO,sBAAsB,CAAC,IAAI,EAAE;YAClC,oBAAoB,sBAAA;YACpB,qBAAqB,EAAE,IAAI,CAAC,UAAU,CAAC,wBAAwB,EAAE;SAClE,CAAC,CAAC;IACL,CAAC;IACH,oCAAC;AAAD,CAAC,AAtCD,CACU,wBAAwB,GAqCjC;;AAED;;;;GAIG;AACH;IACE;IAAuB,CAAC;IAExB;;;;;;;;;OASG;IACI,mCAAS,GAAhB,UAAiB,UAA+B;QAC9C,OAAO,6BAA6B,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;IACnE,CAAC;IAED;;OAEG;IACI,mCAAS,GAAG,OAAO,CAAC;IAC7B,gCAAC;CAAA,AArBD,IAqBC;SArBY,yBAAyB\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/platform_browser/mfa/assertions/phone.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { PhoneMultiFactorAssertion } from '../../../model/public_types';\r\nimport { MultiFactorAssertionImpl } from '../../../mfa/mfa_assertion';\r\nimport { AuthInternal } from '../../../model/auth';\r\nimport { PhoneAuthCredential } from '../../../core/credentials/phone';\r\nimport { FinalizeMfaResponse } from '../../../api/authentication/mfa';\r\n/**\r\n * {@inheritdoc PhoneMultiFactorAssertion}\r\n *\r\n * @public\r\n */\r\nexport declare class PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl implements PhoneMultiFactorAssertion {\r\n    private readonly credential;\r\n    private constructor();\r\n    /** @internal */\r\n    static _fromCredential(credential: PhoneAuthCredential): PhoneMultiFactorAssertionImpl;\r\n    /** @internal */\r\n    _finalizeEnroll(auth: AuthInternal, idToken: string, displayName?: string | null): Promise<FinalizeMfaResponse>;\r\n    /** @internal */\r\n    _finalizeSignIn(auth: AuthInternal, mfaPendingCredential: string): Promise<FinalizeMfaResponse>;\r\n}\r\n/**\r\n * Provider for generating a {@link PhoneMultiFactorAssertion}.\r\n *\r\n * @public\r\n */\r\nexport declare class PhoneMultiFactorGenerator {\r\n    private constructor();\r\n    /**\r\n     * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\r\n     *\r\n     * @remarks\r\n     * This method does not work in a Node.js environment.\r\n     *\r\n     * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\r\n     * @returns A {@link PhoneMultiFactorAssertion} which can be used with\r\n     * {@link MultiFactorResolver.resolveSignIn}\r\n     */\r\n    static assertion(credential: PhoneAuthCredential): PhoneMultiFactorAssertion;\r\n    /**\r\n     * The identifier of the phone second factor: `phone`.\r\n     */\r\n    static FACTOR_ID: string;\r\n}\r\n"}}
