{"code":"/* eslint-disable @typescript-eslint/no-require-imports */\r\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { isEnterprise, RecaptchaConfig } from './recaptcha';\r\nimport { getRecaptchaConfig } from '../../api/authentication/recaptcha';\r\nimport { _castAuth } from '../../core/auth/auth_impl';\r\nimport * as jsHelpers from '../load_js';\r\nvar RECAPTCHA_ENTERPRISE_URL = 'https://www.google.com/recaptcha/enterprise.js?render=';\r\nexport var RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\r\nexport var FAKE_TOKEN = 'NO_RECAPTCHA';\r\nvar RecaptchaEnterpriseVerifier = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\r\n     *\r\n     */\r\n    function RecaptchaEnterpriseVerifier(authExtern) {\r\n        /**\r\n         * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\r\n         */\r\n        this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\r\n        this.auth = _castAuth(authExtern);\r\n    }\r\n    /**\r\n     * Executes the verification process.\r\n     *\r\n     * @returns A Promise for a token that can be used to assert the validity of a request.\r\n     */\r\n    RecaptchaEnterpriseVerifier.prototype.verify = function (action, forceRefresh) {\r\n        if (action === void 0) { action = 'verify'; }\r\n        if (forceRefresh === void 0) { forceRefresh = false; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            function retrieveSiteKey(auth) {\r\n                return __awaiter(this, void 0, void 0, function () {\r\n                    var _this = this;\r\n                    return __generator(this, function (_a) {\r\n                        if (!forceRefresh) {\r\n                            if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\r\n                                return [2 /*return*/, auth._agentRecaptchaConfig.siteKey];\r\n                            }\r\n                            if (auth.tenantId != null &&\r\n                                auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) {\r\n                                return [2 /*return*/, auth._tenantRecaptchaConfigs[auth.tenantId].siteKey];\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {\r\n                                return __generator(this, function (_a) {\r\n                                    getRecaptchaConfig(auth, {\r\n                                        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\r\n                                        version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\r\n                                    })\r\n                                        .then(function (response) {\r\n                                        if (response.recaptchaKey === undefined) {\r\n                                            reject(new Error('recaptcha Enterprise site key undefined'));\r\n                                        }\r\n                                        else {\r\n                                            var config = new RecaptchaConfig(response);\r\n                                            if (auth.tenantId == null) {\r\n                                                auth._agentRecaptchaConfig = config;\r\n                                            }\r\n                                            else {\r\n                                                auth._tenantRecaptchaConfigs[auth.tenantId] = config;\r\n                                            }\r\n                                            return resolve(config.siteKey);\r\n                                        }\r\n                                    })\r\n                                        .catch(function (error) {\r\n                                        reject(error);\r\n                                    });\r\n                                    return [2 /*return*/];\r\n                                });\r\n                            }); })];\r\n                    });\r\n                });\r\n            }\r\n            function retrieveRecaptchaToken(siteKey, resolve, reject) {\r\n                var grecaptcha = window.grecaptcha;\r\n                if (isEnterprise(grecaptcha)) {\r\n                    grecaptcha.enterprise.ready(function () {\r\n                        grecaptcha.enterprise\r\n                            .execute(siteKey, { action: action })\r\n                            .then(function (token) {\r\n                            resolve(token);\r\n                        })\r\n                            .catch(function () {\r\n                            resolve(FAKE_TOKEN);\r\n                        });\r\n                    });\r\n                }\r\n                else {\r\n                    reject(Error('No reCAPTCHA enterprise script loaded.'));\r\n                }\r\n            }\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                        retrieveSiteKey(_this.auth)\r\n                            .then(function (siteKey) {\r\n                            if (!forceRefresh && isEnterprise(window.grecaptcha)) {\r\n                                retrieveRecaptchaToken(siteKey, resolve, reject);\r\n                            }\r\n                            else {\r\n                                if (typeof window === 'undefined') {\r\n                                    reject(new Error('RecaptchaVerifier is only supported in browser'));\r\n                                    return;\r\n                                }\r\n                                jsHelpers\r\n                                    ._loadJS(RECAPTCHA_ENTERPRISE_URL + siteKey)\r\n                                    .then(function () {\r\n                                    retrieveRecaptchaToken(siteKey, resolve, reject);\r\n                                })\r\n                                    .catch(function (error) {\r\n                                    reject(error);\r\n                                });\r\n                            }\r\n                        })\r\n                            .catch(function (error) {\r\n                            reject(error);\r\n                        });\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    return RecaptchaEnterpriseVerifier;\r\n}());\r\nexport { RecaptchaEnterpriseVerifier };\r\nexport function injectRecaptchaFields(auth, request, action, captchaResp) {\r\n    if (captchaResp === void 0) { captchaResp = false; }\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var verifier, captchaResponse, error_1, newRequest;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    verifier = new RecaptchaEnterpriseVerifier(auth);\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, 3, , 5]);\r\n                    return [4 /*yield*/, verifier.verify(action)];\r\n                case 2:\r\n                    captchaResponse = _a.sent();\r\n                    return [3 /*break*/, 5];\r\n                case 3:\r\n                    error_1 = _a.sent();\r\n                    return [4 /*yield*/, verifier.verify(action, true)];\r\n                case 4:\r\n                    captchaResponse = _a.sent();\r\n                    return [3 /*break*/, 5];\r\n                case 5:\r\n                    newRequest = __assign({}, request);\r\n                    if (!captchaResp) {\r\n                        Object.assign(newRequest, { captchaResponse: captchaResponse });\r\n                    }\r\n                    else {\r\n                        Object.assign(newRequest, { 'captchaResp': captchaResponse });\r\n                    }\r\n                    Object.assign(newRequest, { 'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */ });\r\n                    Object.assign(newRequest, {\r\n                        'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\r\n                    });\r\n                    return [2 /*return*/, newRequest];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function handleRecaptchaFlow(authInstance, request, actionName, actionMethod) {\r\n    var _a;\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var requestWithRecaptcha;\r\n        var _this = this;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    if (!((_a = authInstance\r\n                        ._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaProvider.EMAIL_PASSWORD_PROVIDER */))) return [3 /*break*/, 2];\r\n                    return [4 /*yield*/, injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */)];\r\n                case 1:\r\n                    requestWithRecaptcha = _b.sent();\r\n                    return [2 /*return*/, actionMethod(authInstance, requestWithRecaptcha)];\r\n                case 2: return [2 /*return*/, actionMethod(authInstance, request).catch(function (error) { return __awaiter(_this, void 0, void 0, function () {\r\n                        var requestWithRecaptcha;\r\n                        return __generator(this, function (_a) {\r\n                            switch (_a.label) {\r\n                                case 0:\r\n                                    if (!(error.code === \"auth/\".concat(\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */))) return [3 /*break*/, 2];\r\n                                    console.log(\"\".concat(actionName, \" is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.\"));\r\n                                    return [4 /*yield*/, injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */)];\r\n                                case 1:\r\n                                    requestWithRecaptcha = _a.sent();\r\n                                    return [2 /*return*/, actionMethod(authInstance, requestWithRecaptcha)];\r\n                                case 2: return [2 /*return*/, Promise.reject(error)];\r\n                            }\r\n                        });\r\n                    }); })];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function _initializeRecaptchaConfig(auth) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var authInternal, response, config, verifier;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    authInternal = _castAuth(auth);\r\n                    return [4 /*yield*/, getRecaptchaConfig(authInternal, {\r\n                            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\r\n                            version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\r\n                        })];\r\n                case 1:\r\n                    response = _a.sent();\r\n                    config = new RecaptchaConfig(response);\r\n                    if (authInternal.tenantId == null) {\r\n                        authInternal._agentRecaptchaConfig = config;\r\n                    }\r\n                    else {\r\n                        authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\r\n                    }\r\n                    if (config.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaProvider.EMAIL_PASSWORD_PROVIDER */)) {\r\n                        verifier = new RecaptchaEnterpriseVerifier(authInternal);\r\n                        void verifier.verify();\r\n                    }\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=recaptcha_enterprise_verifier.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/recaptcha/recaptcha.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/recaptcha.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/index.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/auth.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/auth/auth_impl.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/platform_browser/load_js.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/errors.ts"],"map":"{\"version\":3,\"file\":\"recaptcha_enterprise_verifier.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/platform_browser/recaptcha/recaptcha_enterprise_verifier.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/platform_browser/recaptcha/recaptcha_enterprise_verifier.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { RecaptchaActionName } from '../../api';\r\nimport { Auth } from '../../model/public_types';\r\nimport { AuthInternal } from '../../model/auth';\r\nexport declare const RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = \"recaptcha-enterprise\";\r\nexport declare const FAKE_TOKEN = \"NO_RECAPTCHA\";\r\nexport declare class RecaptchaEnterpriseVerifier {\r\n    /**\r\n     * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\r\n     */\r\n    readonly type = \"recaptcha-enterprise\";\r\n    private readonly auth;\r\n    /**\r\n     *\r\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\r\n     *\r\n     */\r\n    constructor(authExtern: Auth);\r\n    /**\r\n     * Executes the verification process.\r\n     *\r\n     * @returns A Promise for a token that can be used to assert the validity of a request.\r\n     */\r\n    verify(action?: string, forceRefresh?: boolean): Promise<string>;\r\n}\r\nexport declare function injectRecaptchaFields<T>(auth: AuthInternal, request: T, action: RecaptchaActionName, captchaResp?: boolean): Promise<T>;\r\ndeclare type ActionMethod<TRequest, TResponse> = (auth: Auth, request: TRequest) => Promise<TResponse>;\r\nexport declare function handleRecaptchaFlow<TRequest, TResponse>(authInstance: AuthInternal, request: TRequest, actionName: RecaptchaActionName, actionMethod: ActionMethod<TRequest, TResponse>): Promise<TResponse>;\r\nexport declare function _initializeRecaptchaConfig(auth: Auth): Promise<void>;\r\nexport {};\r\n"}}
