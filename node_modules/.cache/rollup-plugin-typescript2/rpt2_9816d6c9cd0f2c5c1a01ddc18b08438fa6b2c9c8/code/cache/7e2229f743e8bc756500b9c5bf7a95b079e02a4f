{"code":"/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Minimum min password length enforced by the backend, even if no minimum length is set.\r\nvar MINIMUM_MIN_PASSWORD_LENGTH = 6;\r\n/**\r\n * Stores password policy requirements and provides password validation against the policy.\r\n *\r\n * @internal\r\n */\r\nvar PasswordPolicyImpl = /** @class */ (function () {\r\n    function PasswordPolicyImpl(response) {\r\n        var _a, _b, _c, _d;\r\n        // Only include custom strength options defined in the response.\r\n        var responseOptions = response.customStrengthOptions;\r\n        this.customStrengthOptions = {};\r\n        // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.\r\n        this.customStrengthOptions.minPasswordLength =\r\n            (_a = responseOptions.minPasswordLength) !== null && _a !== void 0 ? _a : MINIMUM_MIN_PASSWORD_LENGTH;\r\n        if (responseOptions.maxPasswordLength) {\r\n            this.customStrengthOptions.maxPasswordLength =\r\n                responseOptions.maxPasswordLength;\r\n        }\r\n        if (responseOptions.containsLowercaseCharacter !== undefined) {\r\n            this.customStrengthOptions.containsLowercaseLetter =\r\n                responseOptions.containsLowercaseCharacter;\r\n        }\r\n        if (responseOptions.containsUppercaseCharacter !== undefined) {\r\n            this.customStrengthOptions.containsUppercaseLetter =\r\n                responseOptions.containsUppercaseCharacter;\r\n        }\r\n        if (responseOptions.containsNumericCharacter !== undefined) {\r\n            this.customStrengthOptions.containsNumericCharacter =\r\n                responseOptions.containsNumericCharacter;\r\n        }\r\n        if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\r\n            this.customStrengthOptions.containsNonAlphanumericCharacter =\r\n                responseOptions.containsNonAlphanumericCharacter;\r\n        }\r\n        this.enforcementState = response.enforcementState;\r\n        if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {\r\n            this.enforcementState = 'OFF';\r\n        }\r\n        // Use an empty string if no non-alphanumeric characters are specified in the response.\r\n        this.allowedNonAlphanumericCharacters =\r\n            (_c = (_b = response.allowedNonAlphanumericCharacters) === null || _b === void 0 ? void 0 : _b.join('')) !== null && _c !== void 0 ? _c : '';\r\n        this.forceUpgradeOnSignin = (_d = response.forceUpgradeOnSignin) !== null && _d !== void 0 ? _d : false;\r\n        this.schemaVersion = response.schemaVersion;\r\n    }\r\n    PasswordPolicyImpl.prototype.validatePassword = function (password) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        var status = {\r\n            isValid: true,\r\n            passwordPolicy: this\r\n        };\r\n        // Check the password length and character options.\r\n        this.validatePasswordLengthOptions(password, status);\r\n        this.validatePasswordCharacterOptions(password, status);\r\n        // Combine the status into single isValid property.\r\n        status.isValid && (status.isValid = (_a = status.meetsMinPasswordLength) !== null && _a !== void 0 ? _a : true);\r\n        status.isValid && (status.isValid = (_b = status.meetsMaxPasswordLength) !== null && _b !== void 0 ? _b : true);\r\n        status.isValid && (status.isValid = (_c = status.containsLowercaseLetter) !== null && _c !== void 0 ? _c : true);\r\n        status.isValid && (status.isValid = (_d = status.containsUppercaseLetter) !== null && _d !== void 0 ? _d : true);\r\n        status.isValid && (status.isValid = (_e = status.containsNumericCharacter) !== null && _e !== void 0 ? _e : true);\r\n        status.isValid && (status.isValid = (_f = status.containsNonAlphanumericCharacter) !== null && _f !== void 0 ? _f : true);\r\n        return status;\r\n    };\r\n    /**\r\n     * Validates that the password meets the length options for the policy.\r\n     *\r\n     * @param password Password to validate.\r\n     * @param status Validation status.\r\n     */\r\n    PasswordPolicyImpl.prototype.validatePasswordLengthOptions = function (password, status) {\r\n        var minPasswordLength = this.customStrengthOptions.minPasswordLength;\r\n        var maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\r\n        if (minPasswordLength) {\r\n            status.meetsMinPasswordLength = password.length >= minPasswordLength;\r\n        }\r\n        if (maxPasswordLength) {\r\n            status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\r\n        }\r\n    };\r\n    /**\r\n     * Validates that the password meets the character options for the policy.\r\n     *\r\n     * @param password Password to validate.\r\n     * @param status Validation status.\r\n     */\r\n    PasswordPolicyImpl.prototype.validatePasswordCharacterOptions = function (password, status) {\r\n        // Assign statuses for requirements even if the password is an empty string.\r\n        this.updatePasswordCharacterOptionsStatuses(status, \r\n        /* containsLowercaseCharacter= */ false, \r\n        /* containsUppercaseCharacter= */ false, \r\n        /* containsNumericCharacter= */ false, \r\n        /* containsNonAlphanumericCharacter= */ false);\r\n        var passwordChar;\r\n        for (var i = 0; i < password.length; i++) {\r\n            passwordChar = password.charAt(i);\r\n            this.updatePasswordCharacterOptionsStatuses(status, \r\n            /* containsLowercaseCharacter= */ passwordChar >= 'a' &&\r\n                passwordChar <= 'z', \r\n            /* containsUppercaseCharacter= */ passwordChar >= 'A' &&\r\n                passwordChar <= 'Z', \r\n            /* containsNumericCharacter= */ passwordChar >= '0' &&\r\n                passwordChar <= '9', \r\n            /* containsNonAlphanumericCharacter= */ this.allowedNonAlphanumericCharacters.includes(passwordChar));\r\n        }\r\n    };\r\n    /**\r\n     * Updates the running validation status with the statuses for the character options.\r\n     * Expected to be called each time a character is processed to update each option status\r\n     * based on the current character.\r\n     *\r\n     * @param status Validation status.\r\n     * @param containsLowercaseCharacter Whether the character is a lowercase letter.\r\n     * @param containsUppercaseCharacter Whether the character is an uppercase letter.\r\n     * @param containsNumericCharacter Whether the character is a numeric character.\r\n     * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\r\n     */\r\n    PasswordPolicyImpl.prototype.updatePasswordCharacterOptionsStatuses = function (status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {\r\n        if (this.customStrengthOptions.containsLowercaseLetter) {\r\n            status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);\r\n        }\r\n        if (this.customStrengthOptions.containsUppercaseLetter) {\r\n            status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);\r\n        }\r\n        if (this.customStrengthOptions.containsNumericCharacter) {\r\n            status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);\r\n        }\r\n        if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\r\n            status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);\r\n        }\r\n    };\r\n    return PasswordPolicyImpl;\r\n}());\r\nexport { PasswordPolicyImpl };\r\n//# sourceMappingURL=password_policy_impl.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/password_policy/get_password_policy.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/password_policy.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts"],"map":"{\"version\":3,\"file\":\"password_policy_impl.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/auth/password_policy_impl.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;AAUH,yFAAyF;AACzF,IAAM,2BAA2B,GAAG,CAAC,CAAC;AAEtC;;;;GAIG;AACH;IAOE,4BAAY,QAAmC;;QAC7C,gEAAgE;QAChE,IAAM,eAAe,GAAG,QAAQ,CAAC,qBAAqB,CAAC;QACvD,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;QAChC,gJAAgJ;QAChJ,IAAI,CAAC,qBAAqB,CAAC,iBAAiB;YAC1C,MAAA,eAAe,CAAC,iBAAiB,mCAAI,2BAA2B,CAAC;QACnE,IAAI,eAAe,CAAC,iBAAiB,EAAE;YACrC,IAAI,CAAC,qBAAqB,CAAC,iBAAiB;gBAC1C,eAAe,CAAC,iBAAiB,CAAC;SACrC;QACD,IAAI,eAAe,CAAC,0BAA0B,KAAK,SAAS,EAAE;YAC5D,IAAI,CAAC,qBAAqB,CAAC,uBAAuB;gBAChD,eAAe,CAAC,0BAA0B,CAAC;SAC9C;QACD,IAAI,eAAe,CAAC,0BAA0B,KAAK,SAAS,EAAE;YAC5D,IAAI,CAAC,qBAAqB,CAAC,uBAAuB;gBAChD,eAAe,CAAC,0BAA0B,CAAC;SAC9C;QACD,IAAI,eAAe,CAAC,wBAAwB,KAAK,SAAS,EAAE;YAC1D,IAAI,CAAC,qBAAqB,CAAC,wBAAwB;gBACjD,eAAe,CAAC,wBAAwB,CAAC;SAC5C;QACD,IAAI,eAAe,CAAC,gCAAgC,KAAK,SAAS,EAAE;YAClE,IAAI,CAAC,qBAAqB,CAAC,gCAAgC;gBACzD,eAAe,CAAC,gCAAgC,CAAC;SACpD;QAED,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC,gBAAgB,CAAC;QAClD,IAAI,IAAI,CAAC,gBAAgB,KAAK,+BAA+B,EAAE;YAC7D,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;SAC/B;QAED,uFAAuF;QACvF,IAAI,CAAC,gCAAgC;YACnC,MAAA,MAAA,QAAQ,CAAC,gCAAgC,0CAAE,IAAI,CAAC,EAAE,CAAC,mCAAI,EAAE,CAAC;QAE5D,IAAI,CAAC,oBAAoB,GAAG,MAAA,QAAQ,CAAC,oBAAoB,mCAAI,KAAK,CAAC;QACnE,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC;IAC9C,CAAC;IAED,6CAAgB,GAAhB,UAAiB,QAAgB;;QAC/B,IAAM,MAAM,GAAqC;YAC/C,OAAO,EAAE,IAAI;YACb,cAAc,EAAE,IAAI;SACrB,CAAC;QAEF,mDAAmD;QACnD,IAAI,CAAC,6BAA6B,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACrD,IAAI,CAAC,gCAAgC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAExD,mDAAmD;QACnD,MAAM,CAAC,OAAO,KAAd,MAAM,CAAC,OAAO,GAAK,MAAA,MAAM,CAAC,sBAAsB,mCAAI,IAAI,EAAC;QACzD,MAAM,CAAC,OAAO,KAAd,MAAM,CAAC,OAAO,GAAK,MAAA,MAAM,CAAC,sBAAsB,mCAAI,IAAI,EAAC;QACzD,MAAM,CAAC,OAAO,KAAd,MAAM,CAAC,OAAO,GAAK,MAAA,MAAM,CAAC,uBAAuB,mCAAI,IAAI,EAAC;QAC1D,MAAM,CAAC,OAAO,KAAd,MAAM,CAAC,OAAO,GAAK,MAAA,MAAM,CAAC,uBAAuB,mCAAI,IAAI,EAAC;QAC1D,MAAM,CAAC,OAAO,KAAd,MAAM,CAAC,OAAO,GAAK,MAAA,MAAM,CAAC,wBAAwB,mCAAI,IAAI,EAAC;QAC3D,MAAM,CAAC,OAAO,KAAd,MAAM,CAAC,OAAO,GAAK,MAAA,MAAM,CAAC,gCAAgC,mCAAI,IAAI,EAAC;QAEnE,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACK,0DAA6B,GAArC,UACE,QAAgB,EAChB,MAAwC;QAExC,IAAM,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC;QACvE,IAAM,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC;QACvE,IAAI,iBAAiB,EAAE;YACrB,MAAM,CAAC,sBAAsB,GAAG,QAAQ,CAAC,MAAM,IAAI,iBAAiB,CAAC;SACtE;QACD,IAAI,iBAAiB,EAAE;YACrB,MAAM,CAAC,sBAAsB,GAAG,QAAQ,CAAC,MAAM,IAAI,iBAAiB,CAAC;SACtE;IACH,CAAC;IAED;;;;;OAKG;IACK,6DAAgC,GAAxC,UACE,QAAgB,EAChB,MAAwC;QAExC,4EAA4E;QAC5E,IAAI,CAAC,sCAAsC,CACzC,MAAM;QACN,iCAAiC,CAAC,KAAK;QACvC,iCAAiC,CAAC,KAAK;QACvC,+BAA+B,CAAC,KAAK;QACrC,uCAAuC,CAAC,KAAK,CAC9C,CAAC;QAEF,IAAI,YAAY,CAAC;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxC,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,sCAAsC,CACzC,MAAM;YACN,iCAAiC,CAAC,YAAY,IAAI,GAAG;gBACnD,YAAY,IAAI,GAAG;YACrB,iCAAiC,CAAC,YAAY,IAAI,GAAG;gBACnD,YAAY,IAAI,GAAG;YACrB,+BAA+B,CAAC,YAAY,IAAI,GAAG;gBACjD,YAAY,IAAI,GAAG;YACrB,uCAAuC,CAAC,IAAI,CAAC,gCAAgC,CAAC,QAAQ,CACpF,YAAY,CACb,CACF,CAAC;SACH;IACH,CAAC;IAED;;;;;;;;;;OAUG;IACK,mEAAsC,GAA9C,UACE,MAAwC,EACxC,0BAAmC,EACnC,0BAAmC,EACnC,wBAAiC,EACjC,gCAAyC;QAEzC,IAAI,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,EAAE;YACtD,MAAM,CAAC,uBAAuB,KAA9B,MAAM,CAAC,uBAAuB,GAAK,0BAA0B,EAAC;SAC/D;QACD,IAAI,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,EAAE;YACtD,MAAM,CAAC,uBAAuB,KAA9B,MAAM,CAAC,uBAAuB,GAAK,0BAA0B,EAAC;SAC/D;QACD,IAAI,IAAI,CAAC,qBAAqB,CAAC,wBAAwB,EAAE;YACvD,MAAM,CAAC,wBAAwB,KAA/B,MAAM,CAAC,wBAAwB,GAAK,wBAAwB,EAAC;SAC9D;QACD,IAAI,IAAI,CAAC,qBAAqB,CAAC,gCAAgC,EAAE;YAC/D,MAAM,CAAC,gCAAgC,KAAvC,MAAM,CAAC,gCAAgC,GACrC,gCAAgC,EAAC;SACpC;IACH,CAAC;IACH,yBAAC;AAAD,CAAC,AA9JD,IA8JC\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/auth/password_policy_impl.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { GetPasswordPolicyResponse } from '../../api/password_policy/get_password_policy';\r\nimport { PasswordPolicyCustomStrengthOptions, PasswordPolicyInternal } from '../../model/password_policy';\r\nimport { PasswordValidationStatus } from '../../model/public_types';\r\n/**\r\n * Stores password policy requirements and provides password validation against the policy.\r\n *\r\n * @internal\r\n */\r\nexport declare class PasswordPolicyImpl implements PasswordPolicyInternal {\r\n    readonly customStrengthOptions: PasswordPolicyCustomStrengthOptions;\r\n    readonly allowedNonAlphanumericCharacters: string;\r\n    readonly enforcementState: string;\r\n    readonly forceUpgradeOnSignin: boolean;\r\n    readonly schemaVersion: number;\r\n    constructor(response: GetPasswordPolicyResponse);\r\n    validatePassword(password: string): PasswordValidationStatus;\r\n    /**\r\n     * Validates that the password meets the length options for the policy.\r\n     *\r\n     * @param password Password to validate.\r\n     * @param status Validation status.\r\n     */\r\n    private validatePasswordLengthOptions;\r\n    /**\r\n     * Validates that the password meets the character options for the policy.\r\n     *\r\n     * @param password Password to validate.\r\n     * @param status Validation status.\r\n     */\r\n    private validatePasswordCharacterOptions;\r\n    /**\r\n     * Updates the running validation status with the statuses for the character options.\r\n     * Expected to be called each time a character is processed to update each option status\r\n     * based on the current character.\r\n     *\r\n     * @param status Validation status.\r\n     * @param containsLowercaseCharacter Whether the character is a lowercase letter.\r\n     * @param containsUppercaseCharacter Whether the character is an uppercase letter.\r\n     * @param containsNumericCharacter Whether the character is a numeric character.\r\n     * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\r\n     */\r\n    private updatePasswordCharacterOptionsStatuses;\r\n}\r\n"}}
