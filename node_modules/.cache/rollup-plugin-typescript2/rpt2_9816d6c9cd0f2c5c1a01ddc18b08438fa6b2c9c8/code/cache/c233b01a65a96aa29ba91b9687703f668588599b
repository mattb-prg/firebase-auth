{"code":"import { __awaiter, __generator } from \"tslib\";\r\nimport { withdrawMfa } from '../api/account_management/mfa';\r\nimport { _logoutIfInvalidated } from '../core/user/invalidation';\r\nimport { MultiFactorInfoImpl } from './mfa_info';\r\nimport { MultiFactorSessionImpl } from './mfa_session';\r\nimport { getModularInstance } from '@firebase/util';\r\nvar MultiFactorUserImpl = /** @class */ (function () {\r\n    function MultiFactorUserImpl(user) {\r\n        var _this = this;\r\n        this.user = user;\r\n        this.enrolledFactors = [];\r\n        user._onReload(function (userInfo) {\r\n            if (userInfo.mfaInfo) {\r\n                _this.enrolledFactors = userInfo.mfaInfo.map(function (enrollment) {\r\n                    return MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    MultiFactorUserImpl._fromUser = function (user) {\r\n        return new MultiFactorUserImpl(user);\r\n    };\r\n    MultiFactorUserImpl.prototype.getSession = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, _b;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        _b = (_a = MultiFactorSessionImpl)._fromIdtoken;\r\n                        return [4 /*yield*/, this.user.getIdToken()];\r\n                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(), this.user])];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    MultiFactorUserImpl.prototype.enroll = function (assertionExtern, displayName) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var assertion, session, finalizeMfaResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        assertion = assertionExtern;\r\n                        return [4 /*yield*/, this.getSession()];\r\n                    case 1:\r\n                        session = (_a.sent());\r\n                        return [4 /*yield*/, _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName))];\r\n                    case 2:\r\n                        finalizeMfaResponse = _a.sent();\r\n                        // New tokens will be issued after enrollment of the new second factors.\r\n                        // They need to be updated on the user.\r\n                        return [4 /*yield*/, this.user._updateTokensIfNecessary(finalizeMfaResponse)];\r\n                    case 3:\r\n                        // New tokens will be issued after enrollment of the new second factors.\r\n                        // They need to be updated on the user.\r\n                        _a.sent();\r\n                        // The user needs to be reloaded to get the new multi-factor information\r\n                        // from server. USER_RELOADED event will be triggered and `enrolledFactors`\r\n                        // will be updated.\r\n                        return [2 /*return*/, this.user.reload()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    MultiFactorUserImpl.prototype.unenroll = function (infoOrUid) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var mfaEnrollmentId, idToken, idTokenResponse, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\r\n                        return [4 /*yield*/, this.user.getIdToken()];\r\n                    case 1:\r\n                        idToken = _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        _a.trys.push([2, 6, , 7]);\r\n                        return [4 /*yield*/, _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {\r\n                                idToken: idToken,\r\n                                mfaEnrollmentId: mfaEnrollmentId\r\n                            }))];\r\n                    case 3:\r\n                        idTokenResponse = _a.sent();\r\n                        // Remove the second factor from the user's list.\r\n                        this.enrolledFactors = this.enrolledFactors.filter(function (_a) {\r\n                            var uid = _a.uid;\r\n                            return uid !== mfaEnrollmentId;\r\n                        });\r\n                        // Depending on whether the backend decided to revoke the user's session,\r\n                        // the tokenResponse may be empty. If the tokens were not updated (and they\r\n                        // are now invalid), reloading the user will discover this and invalidate\r\n                        // the user's state accordingly.\r\n                        return [4 /*yield*/, this.user._updateTokensIfNecessary(idTokenResponse)];\r\n                    case 4:\r\n                        // Depending on whether the backend decided to revoke the user's session,\r\n                        // the tokenResponse may be empty. If the tokens were not updated (and they\r\n                        // are now invalid), reloading the user will discover this and invalidate\r\n                        // the user's state accordingly.\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.user.reload()];\r\n                    case 5:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 7];\r\n                    case 6:\r\n                        e_1 = _a.sent();\r\n                        throw e_1;\r\n                    case 7: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return MultiFactorUserImpl;\r\n}());\r\nexport { MultiFactorUserImpl };\r\nvar multiFactorUserCache = new WeakMap();\r\n/**\r\n * The {@link MultiFactorUser} corresponding to the user.\r\n *\r\n * @remarks\r\n * This is used to access all multi-factor properties and operations related to the user.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */\r\nexport function multiFactor(user) {\r\n    var userModular = getModularInstance(user);\r\n    if (!multiFactorUserCache.has(userModular)) {\r\n        multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));\r\n    }\r\n    return multiFactorUserCache.get(userModular);\r\n}\r\n//# sourceMappingURL=mfa_user.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/public_types.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/account_management/mfa.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/user/invalidation.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/user.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/mfa/mfa_assertion.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/mfa/mfa_info.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/mfa/mfa_session.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/util/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"mfa_user.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/mfa/mfa_user.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/mfa/mfa_user.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { MultiFactorAssertion, MultiFactorInfo, MultiFactorSession, MultiFactorUser, User } from '../model/public_types';\r\nimport { UserInternal } from '../model/user';\r\nexport declare class MultiFactorUserImpl implements MultiFactorUser {\r\n    readonly user: UserInternal;\r\n    enrolledFactors: MultiFactorInfo[];\r\n    private constructor();\r\n    static _fromUser(user: UserInternal): MultiFactorUserImpl;\r\n    getSession(): Promise<MultiFactorSession>;\r\n    enroll(assertionExtern: MultiFactorAssertion, displayName?: string | null): Promise<void>;\r\n    unenroll(infoOrUid: MultiFactorInfo | string): Promise<void>;\r\n}\r\n/**\r\n * The {@link MultiFactorUser} corresponding to the user.\r\n *\r\n * @remarks\r\n * This is used to access all multi-factor properties and operations related to the user.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */\r\nexport declare function multiFactor(user: User): MultiFactorUser;\r\n"}}
