{"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { requestStsToken } from '../../api/authentication/token';\r\nimport { _assert, debugFail } from '../util/assert';\r\nimport { _tokenExpiresIn } from './id_token_result';\r\n/**\r\n * We need to mark this class as internal explicitly to exclude it in the public typings, because\r\n * it references AuthInternal which has a circular dependency with UserInternal.\r\n *\r\n * @internal\r\n */\r\nvar StsTokenManager = /** @class */ (function () {\r\n    function StsTokenManager() {\r\n        this.refreshToken = null;\r\n        this.accessToken = null;\r\n        this.expirationTime = null;\r\n    }\r\n    Object.defineProperty(StsTokenManager.prototype, \"isExpired\", {\r\n        get: function () {\r\n            return (!this.expirationTime ||\r\n                Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    StsTokenManager.prototype.updateFromServerResponse = function (response) {\r\n        _assert(response.idToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        _assert(typeof response.idToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        _assert(typeof response.refreshToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\r\n        var expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined'\r\n            ? Number(response.expiresIn)\r\n            : _tokenExpiresIn(response.idToken);\r\n        this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\r\n    };\r\n    StsTokenManager.prototype.getToken = function (auth, forceRefresh) {\r\n        if (forceRefresh === void 0) { forceRefresh = false; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _assert(!this.accessToken || this.refreshToken, auth, \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */);\r\n                        if (!forceRefresh && this.accessToken && !this.isExpired) {\r\n                            return [2 /*return*/, this.accessToken];\r\n                        }\r\n                        if (!this.refreshToken) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.refresh(auth, this.refreshToken)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/, this.accessToken];\r\n                    case 2: return [2 /*return*/, null];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    StsTokenManager.prototype.clearRefreshToken = function () {\r\n        this.refreshToken = null;\r\n    };\r\n    StsTokenManager.prototype.refresh = function (auth, oldToken) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, accessToken, refreshToken, expiresIn;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, requestStsToken(auth, oldToken)];\r\n                    case 1:\r\n                        _a = _b.sent(), accessToken = _a.accessToken, refreshToken = _a.refreshToken, expiresIn = _a.expiresIn;\r\n                        this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    StsTokenManager.prototype.updateTokensAndExpiration = function (accessToken, refreshToken, expiresInSec) {\r\n        this.refreshToken = refreshToken || null;\r\n        this.accessToken = accessToken || null;\r\n        this.expirationTime = Date.now() + expiresInSec * 1000;\r\n    };\r\n    StsTokenManager.fromJSON = function (appName, object) {\r\n        var refreshToken = object.refreshToken, accessToken = object.accessToken, expirationTime = object.expirationTime;\r\n        var manager = new StsTokenManager();\r\n        if (refreshToken) {\r\n            _assert(typeof refreshToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\r\n                appName: appName\r\n            });\r\n            manager.refreshToken = refreshToken;\r\n        }\r\n        if (accessToken) {\r\n            _assert(typeof accessToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\r\n                appName: appName\r\n            });\r\n            manager.accessToken = accessToken;\r\n        }\r\n        if (expirationTime) {\r\n            _assert(typeof expirationTime === 'number', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\r\n                appName: appName\r\n            });\r\n            manager.expirationTime = expirationTime;\r\n        }\r\n        return manager;\r\n    };\r\n    StsTokenManager.prototype.toJSON = function () {\r\n        return {\r\n            refreshToken: this.refreshToken,\r\n            accessToken: this.accessToken,\r\n            expirationTime: this.expirationTime\r\n        };\r\n    };\r\n    StsTokenManager.prototype._assign = function (stsTokenManager) {\r\n        this.accessToken = stsTokenManager.accessToken;\r\n        this.refreshToken = stsTokenManager.refreshToken;\r\n        this.expirationTime = stsTokenManager.expirationTime;\r\n    };\r\n    StsTokenManager.prototype._clone = function () {\r\n        return Object.assign(new StsTokenManager(), this.toJSON());\r\n    };\r\n    StsTokenManager.prototype._performRefresh = function () {\r\n        return debugFail('not implemented');\r\n    };\r\n    return StsTokenManager;\r\n}());\r\nexport { StsTokenManager };\r\n//# sourceMappingURL=token_manager.js.map","references":["/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/mfa.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/api/authentication/token.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/auth.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/model/id_token.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/errors.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/persistence/index.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/util/assert.ts","/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/src/core/user/id_token_result.ts"],"map":"{\"version\":3,\"file\":\"token_manager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/core/user/token_manager.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;;AAGH,OAAO,EAAE,eAAe,EAAE,MAAM,gCAAgC,CAAC;AAKjE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AACpD,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAUpD;;;;;GAKG;AACH;IAAA;QACE,iBAAY,GAAkB,IAAI,CAAC;QACnC,gBAAW,GAAkB,IAAI,CAAC;QAClC,mBAAc,GAAkB,IAAI,CAAC;IAkIvC,CAAC;IAhIC,sBAAI,sCAAS;aAAb;YACE,OAAO,CACL,CAAC,IAAI,CAAC,cAAc;gBACpB,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,cAAc,mCAAuB,CACxD,CAAC;QACJ,CAAC;;;OAAA;IAED,kDAAwB,GAAxB,UACE,QAA+C;QAE/C,OAAO,CAAC,QAAQ,CAAC,OAAO,sDAA+B,CAAC;QACxD,OAAO,CACL,OAAO,QAAQ,CAAC,OAAO,KAAK,WAAW,sDAExC,CAAC;QACF,OAAO,CACL,OAAO,QAAQ,CAAC,YAAY,KAAK,WAAW,sDAE7C,CAAC;QACF,IAAM,SAAS,GACb,WAAW,IAAI,QAAQ,IAAI,OAAO,QAAQ,CAAC,SAAS,KAAK,WAAW;YAClE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;YAC5B,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACxC,IAAI,CAAC,yBAAyB,CAC5B,QAAQ,CAAC,OAAO,EAChB,QAAQ,CAAC,YAAY,EACrB,SAAS,CACV,CAAC;IACJ,CAAC;IAEK,kCAAQ,GAAd,UACE,IAAkB,EAClB,YAAoB;QAApB,6BAAA,EAAA,oBAAoB;;;;;wBAEpB,OAAO,CACL,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,YAAY,EACtC,IAAI,yDAEL,CAAC;wBAEF,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;4BACxD,sBAAO,IAAI,CAAC,WAAW,EAAC;yBACzB;6BAEG,IAAI,CAAC,YAAY,EAAjB,wBAAiB;wBACnB,qBAAM,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,YAAa,CAAC,EAAA;;wBAA5C,SAA4C,CAAC;wBAC7C,sBAAO,IAAI,CAAC,WAAW,EAAC;4BAG1B,sBAAO,IAAI,EAAC;;;;KACb;IAED,2CAAiB,GAAjB;QACE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC3B,CAAC;IAEa,iCAAO,GAArB,UAAsB,IAAkB,EAAE,QAAgB;;;;;4BACP,qBAAM,eAAe,CACpE,IAAI,EACJ,QAAQ,CACT,EAAA;;wBAHK,KAA2C,SAGhD,EAHO,WAAW,iBAAA,EAAE,YAAY,kBAAA,EAAE,SAAS,eAAA;wBAI5C,IAAI,CAAC,yBAAyB,CAC5B,WAAW,EACX,YAAY,EACZ,MAAM,CAAC,SAAS,CAAC,CAClB,CAAC;;;;;KACH;IAEO,mDAAyB,GAAjC,UACE,WAAmB,EACnB,YAAoB,EACpB,YAAoB;QAEpB,IAAI,CAAC,YAAY,GAAG,YAAY,IAAI,IAAI,CAAC;QACzC,IAAI,CAAC,WAAW,GAAG,WAAW,IAAI,IAAI,CAAC;QACvC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,YAAY,GAAG,IAAI,CAAC;IACzD,CAAC;IAEM,wBAAQ,GAAf,UAAgB,OAAe,EAAE,MAAqB;QAC5C,IAAA,YAAY,GAAkC,MAAM,aAAxC,EAAE,WAAW,GAAqB,MAAM,YAA3B,EAAE,cAAc,GAAK,MAAM,eAAX,CAAY;QAE7D,IAAM,OAAO,GAAG,IAAI,eAAe,EAAE,CAAC;QACtC,IAAI,YAAY,EAAE;YAChB,OAAO,CAAC,OAAO,YAAY,KAAK,QAAQ,uDAAgC;gBACtE,OAAO,SAAA;aACR,CAAC,CAAC;YACH,OAAO,CAAC,YAAY,GAAG,YAAY,CAAC;SACrC;QACD,IAAI,WAAW,EAAE;YACf,OAAO,CAAC,OAAO,WAAW,KAAK,QAAQ,uDAAgC;gBACrE,OAAO,SAAA;aACR,CAAC,CAAC;YACH,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC;SACnC;QACD,IAAI,cAAc,EAAE;YAClB,OAAO,CACL,OAAO,cAAc,KAAK,QAAQ,uDAElC;gBACE,OAAO,SAAA;aACR,CACF,CAAC;YACF,OAAO,CAAC,cAAc,GAAG,cAAc,CAAC;SACzC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,gCAAM,GAAN;QACE,OAAO;YACL,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,cAAc,EAAE,IAAI,CAAC,cAAc;SACpC,CAAC;IACJ,CAAC;IAED,iCAAO,GAAP,UAAQ,eAAgC;QACtC,IAAI,CAAC,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;QAC/C,IAAI,CAAC,YAAY,GAAG,eAAe,CAAC,YAAY,CAAC;QACjD,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC,cAAc,CAAC;IACvD,CAAC;IAED,gCAAM,GAAN;QACE,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,eAAe,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED,yCAAe,GAAf;QACE,OAAO,SAAS,CAAC,iBAAiB,CAAC,CAAC;IACtC,CAAC;IACH,sBAAC;AAAD,CAAC,AArID,IAqIC\"}","dts":{"name":"/home/matt/Desktop/Projects/Freelance/Damon Chen/firebase-package/packages/auth/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/core/user/token_manager.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { FinalizeMfaResponse } from '../../api/authentication/mfa';\r\nimport { AuthInternal } from '../../model/auth';\r\nimport { IdTokenResponse } from '../../model/id_token';\r\nimport { PersistedBlob } from '../persistence';\r\n/**\r\n * The number of milliseconds before the official expiration time of a token\r\n * to refresh that token, to provide a buffer for RPCs to complete.\r\n */\r\nexport declare const enum Buffer {\r\n    TOKEN_REFRESH = 30000\r\n}\r\n/**\r\n * We need to mark this class as internal explicitly to exclude it in the public typings, because\r\n * it references AuthInternal which has a circular dependency with UserInternal.\r\n *\r\n * @internal\r\n */\r\nexport declare class StsTokenManager {\r\n    refreshToken: string | null;\r\n    accessToken: string | null;\r\n    expirationTime: number | null;\r\n    get isExpired(): boolean;\r\n    updateFromServerResponse(response: IdTokenResponse | FinalizeMfaResponse): void;\r\n    getToken(auth: AuthInternal, forceRefresh?: boolean): Promise<string | null>;\r\n    clearRefreshToken(): void;\r\n    private refresh;\r\n    private updateTokensAndExpiration;\r\n    static fromJSON(appName: string, object: PersistedBlob): StsTokenManager;\r\n    toJSON(): object;\r\n    _assign(stsTokenManager: StsTokenManager): void;\r\n    _clone(): StsTokenManager;\r\n    _performRefresh(): never;\r\n}\r\n"}}
