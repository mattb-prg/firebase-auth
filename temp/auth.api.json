{
  "metadata": {
    "toolPackage": "api-extractor-me",
    "toolVersion": "0.1.2",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "@firebase/auth!",
  "docComment": "/**\n * Firebase Authentication\n *\n * @packageDocumentation\n */\n",
  "name": "@firebase/auth",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@firebase/auth!",
      "name": "",
      "members": [
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!ActionCodeInfo:interface",
          "docComment": "/**\n * A response from {@link checkActionCode}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ActionCodeInfo "
            }
          ],
          "releaseTag": "Public",
          "name": "ActionCodeInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!ActionCodeInfo#data:member",
              "docComment": "/**\n * The data associated with the action code.\n *\n * @remarks\n *\n * For the {@link ActionCodeOperation}.PASSWORD_RESET, {@link ActionCodeOperation}.VERIFY_EMAIL, and {@link ActionCodeOperation}.RECOVER_EMAIL actions, this object contains an email field with the address the email was sent to.\n *\n * For the {@link ActionCodeOperation}.RECOVER_EMAIL action, which allows a user to undo an email address change, this object also contains a `previousEmail` field with the user account's current email address. After the action completes, the user's email address will revert to the value in the `email` field from the value in `previousEmail` field.\n *\n * For the {@link ActionCodeOperation}.VERIFY_AND_CHANGE_EMAIL action, which allows a user to verify the email before updating it, this object contains a `previousEmail` field with the user account's email address before updating. After the action completes, the user's email address will be updated to the value in the `email` field from the value in `previousEmail` field.\n *\n * For the {@link ActionCodeOperation}.REVERT_SECOND_FACTOR_ADDITION action, which allows a user to unenroll a newly added second factor, this object contains a `multiFactorInfo` field with the information about the second factor. For phone second factor, the `multiFactorInfo` is a {@link MultiFactorInfo} object, which contains the phone number.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        email?: string | null;\n        multiFactorInfo?: "
                },
                {
                  "kind": "Reference",
                  "text": "MultiFactorInfo",
                  "canonicalReference": "@firebase/auth!MultiFactorInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null;\n        previousEmail?: string | null;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!ActionCodeInfo#operation:member",
              "docComment": "/**\n * The type of operation that generated the action code.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "operation: "
                },
                {
                  "kind": "Content",
                  "text": "(typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ActionCodeOperationMap",
                  "canonicalReference": "@firebase/auth!ActionCodeOperation:var"
                },
                {
                  "kind": "Content",
                  "text": ")[keyof typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ActionCodeOperationMap",
                  "canonicalReference": "@firebase/auth!ActionCodeOperation:var"
                },
                {
                  "kind": "Content",
                  "text": "]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "operation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@firebase/auth!ActionCodeOperation:var",
          "docComment": "/**\n * An enumeration of the possible email action types.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ActionCodeOperation: "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly EMAIL_SIGNIN: \"EMAIL_SIGNIN\";\n    readonly PASSWORD_RESET: \"PASSWORD_RESET\";\n    readonly RECOVER_EMAIL: \"RECOVER_EMAIL\";\n    readonly REVERT_SECOND_FACTOR_ADDITION: \"REVERT_SECOND_FACTOR_ADDITION\";\n    readonly VERIFY_AND_CHANGE_EMAIL: \"VERIFY_AND_CHANGE_EMAIL\";\n    readonly VERIFY_EMAIL: \"VERIFY_EMAIL\";\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "ActionCodeOperation",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!ActionCodeSettings:interface",
          "docComment": "/**\n * An interface that defines the required continue/state URL with optional Android and iOS bundle identifiers.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ActionCodeSettings "
            }
          ],
          "releaseTag": "Public",
          "name": "ActionCodeSettings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!ActionCodeSettings#android:member",
              "docComment": "/**\n * Sets the Android package name.\n *\n * @remarks\n *\n * This will try to open the link in an android app if it is installed. If `installApp` is passed, it specifies whether to install the Android app if the device supports it and the app is not already installed. If this field is provided without a `packageName`, an error is thrown explaining that the `packageName` must be provided in conjunction with this field. If `minimumVersion` is specified, and an older version of the app is installed, the user is taken to the Play Store to upgrade the app.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "android?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        installApp?: boolean;\n        minimumVersion?: string;\n        packageName: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "android",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!ActionCodeSettings#dynamicLinkDomain:member",
              "docComment": "/**\n * When multiple custom dynamic link domains are defined for a project, specify which one to use when the link is to be opened via a specified mobile app (for example, `example.page.link`).\n *\n * @defaultValue\n *\n * The first domain is automatically selected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dynamicLinkDomain?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dynamicLinkDomain",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!ActionCodeSettings#handleCodeInApp:member",
              "docComment": "/**\n * When set to true, the action code link will be be sent as a Universal Link or Android App Link and will be opened by the app if installed.\n *\n * @remarks\n *\n * In the false case, the code will be sent to the web widget first and then on continue will redirect to the app if installed.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handleCodeInApp?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "handleCodeInApp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!ActionCodeSettings#iOS:member",
              "docComment": "/**\n * Sets the iOS bundle ID.\n *\n * @remarks\n *\n * This will try to open the link in an iOS app if it is installed.\n *\n * App installation is not supported for iOS.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iOS?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        bundleId: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "iOS",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!ActionCodeSettings#url:member",
              "docComment": "/**\n * Sets the link continue/state URL.\n *\n * @remarks\n *\n * This has different meanings in different contexts: - When the link is handled in the web action widgets, this is the deep link in the `continueUrl` query parameter. - When the link is handled in the app directly, this is the `continueUrl` query parameter in the deep link of the Dynamic Link.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/auth!ActionCodeURL:class",
          "docComment": "/**\n * A utility class to parse email action URLs such as password reset, email verification, email link sign in, etc.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `ActionCodeURL` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ActionCodeURL "
            }
          ],
          "releaseTag": "Public",
          "name": "ActionCodeURL",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!ActionCodeURL#apiKey:member",
              "docComment": "/**\n * The API key of the email action link.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly apiKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "apiKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!ActionCodeURL#code:member",
              "docComment": "/**\n * The action code of the email action link.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly code: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "code",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!ActionCodeURL#continueUrl:member",
              "docComment": "/**\n * The continue URL of the email action link. Null if not provided.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly continueUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "continueUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!ActionCodeURL#languageCode:member",
              "docComment": "/**\n * The language code of the email action link. Null if not provided.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly languageCode: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "languageCode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!ActionCodeURL#operation:member",
              "docComment": "/**\n * The action performed by the email action link. It returns from one of the types from {@link ActionCodeInfo}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly operation: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "operation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!ActionCodeURL.parseLink:member(1)",
              "docComment": "/**\n * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid, otherwise returns null.\n *\n * @param link - The email action link string.\n *\n * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static parseLink(link: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ActionCodeURL",
                  "canonicalReference": "@firebase/auth!ActionCodeURL:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "link",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "parseLink"
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!ActionCodeURL#tenantId:member",
              "docComment": "/**\n * The tenant ID of the email action link. Null if the email action is from the parent project.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tenantId: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tenantId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!AdditionalUserInfo:interface",
          "docComment": "/**\n * A structure containing additional user information from a federated identity provider.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AdditionalUserInfo "
            }
          ],
          "releaseTag": "Public",
          "name": "AdditionalUserInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!AdditionalUserInfo#isNewUser:member",
              "docComment": "/**\n * Whether the user is new (created via sign-up) or existing (authenticated using sign-in).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly isNewUser: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isNewUser",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!AdditionalUserInfo#profile:member",
              "docComment": "/**\n * Map containing IDP-specific user data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly profile: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, unknown> | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "profile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!AdditionalUserInfo#providerId:member",
              "docComment": "/**\n * Identifier for the provider used to authenticate this user.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly providerId: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "providerId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!AdditionalUserInfo#username:member",
              "docComment": "/**\n * The username if the provider is GitHub or Twitter.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly username?: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "username",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!ApplicationVerifier:interface",
          "docComment": "/**\n * A verifier for domain verification and abuse prevention.\n *\n * @remarks\n *\n * Currently, the only implementation is {@link RecaptchaVerifier}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ApplicationVerifier "
            }
          ],
          "releaseTag": "Public",
          "name": "ApplicationVerifier",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!ApplicationVerifier#type:member",
              "docComment": "/**\n * Identifies the type of application verifier (e.g. \"recaptcha\").\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!ApplicationVerifier#verify:member(1)",
              "docComment": "/**\n * Executes the verification process.\n *\n * @returns A Promise for a token that can be used to assert the validity of a request.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "verify(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "verify"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!applyActionCode:function(1)",
          "docComment": "/**\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param oobCode - A verification code sent to the user.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function applyActionCode(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", oobCode: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "oobCode",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "applyActionCode"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!Auth:interface",
          "docComment": "/**\n * Interface representing Firebase Auth service.\n *\n * @remarks\n *\n * See {@link https://firebase.google.com/docs/auth/ | Firebase Authentication} for a full guide on how to use the Firebase Auth service.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Auth "
            }
          ],
          "releaseTag": "Public",
          "name": "Auth",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Auth#app:member",
              "docComment": "/**\n * The {@link @firebase/app#FirebaseApp} associated with the `Auth` service instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly app: "
                },
                {
                  "kind": "Reference",
                  "text": "FirebaseApp",
                  "canonicalReference": "@firebase/app!FirebaseApp:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "app",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!Auth#authStateReady:member(1)",
              "docComment": "/**\n * returns a promise that resolves immediately when the initial auth state is settled. When the promise resolves, the current user might be a valid user or `null` if the user signed out.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "authStateReady(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "authStateReady"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!Auth#beforeAuthStateChanged:member(1)",
              "docComment": "/**\n * Adds a blocking callback that runs before an auth state change sets a new user.\n *\n * @param callback - callback triggered before new user value is set. If this throws, it blocks the user from being set.\n *\n * @param onAbort - callback triggered if a later `beforeAuthStateChanged()` callback throws, allowing you to undo any side effects.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beforeAuthStateChanged(callback: "
                },
                {
                  "kind": "Content",
                  "text": "(user: "
                },
                {
                  "kind": "Reference",
                  "text": "User",
                  "canonicalReference": "@firebase/auth!User:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null) => void | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ", onAbort?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Unsubscribe",
                  "canonicalReference": "@firebase/util!Unsubscribe:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "onAbort",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "beforeAuthStateChanged"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Auth#config:member",
              "docComment": "/**\n * The {@link Config} used to initialize this instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly config: "
                },
                {
                  "kind": "Reference",
                  "text": "Config",
                  "canonicalReference": "@firebase/auth!Config:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Auth#currentUser:member",
              "docComment": "/**\n * The currently signed-in user (or null).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly currentUser: "
                },
                {
                  "kind": "Reference",
                  "text": "User",
                  "canonicalReference": "@firebase/auth!User:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "currentUser",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Auth#emulatorConfig:member",
              "docComment": "/**\n * The current emulator configuration (or null).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly emulatorConfig: "
                },
                {
                  "kind": "Reference",
                  "text": "EmulatorConfig",
                  "canonicalReference": "@firebase/auth!EmulatorConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "emulatorConfig",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Auth#languageCode:member",
              "docComment": "/**\n * The {@link Auth} instance's language code.\n *\n * @remarks\n *\n * This is a readable/writable property. When set to null, the default Firebase Console language setting is applied. The language code will propagate to email action templates (password reset, email verification and email change revocation), SMS templates for phone authentication, reCAPTCHA verifier and OAuth popup/redirect operations provided the specified providers support localization with the language code specified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "languageCode: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "languageCode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Auth#name:member",
              "docComment": "/**\n * The name of the app associated with the `Auth` service instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!Auth#onAuthStateChanged:member(1)",
              "docComment": "/**\n * Adds an observer for changes to the user's sign-in state.\n *\n * @remarks\n *\n * To keep the old behavior, see {@link Auth.onIdTokenChanged}.\n *\n * @param nextOrObserver - callback triggered on change.\n *\n * @param error - Deprecated. This callback is never triggered. Errors on signing in/out can be caught in promises returned from sign-in/sign-out functions.\n *\n * @param completed - Deprecated. This callback is never triggered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onAuthStateChanged(nextOrObserver: "
                },
                {
                  "kind": "Reference",
                  "text": "NextOrObserver",
                  "canonicalReference": "@firebase/auth!NextOrObserver:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "User",
                  "canonicalReference": "@firebase/auth!User:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ", error?: "
                },
                {
                  "kind": "Reference",
                  "text": "ErrorFn",
                  "canonicalReference": "@firebase/util!ErrorFn:type"
                },
                {
                  "kind": "Content",
                  "text": ", completed?: "
                },
                {
                  "kind": "Reference",
                  "text": "CompleteFn",
                  "canonicalReference": "@firebase/util!CompleteFn:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Unsubscribe",
                  "canonicalReference": "@firebase/util!Unsubscribe:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nextOrObserver",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "completed",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "onAuthStateChanged"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!Auth#onIdTokenChanged:member(1)",
              "docComment": "/**\n * Adds an observer for changes to the signed-in user's ID token.\n *\n * @remarks\n *\n * This includes sign-in, sign-out, and token refresh events.\n *\n * @param nextOrObserver - callback triggered on change.\n *\n * @param error - Deprecated. This callback is never triggered. Errors on signing in/out can be caught in promises returned from sign-in/sign-out functions.\n *\n * @param completed - Deprecated. This callback is never triggered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onIdTokenChanged(nextOrObserver: "
                },
                {
                  "kind": "Reference",
                  "text": "NextOrObserver",
                  "canonicalReference": "@firebase/auth!NextOrObserver:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "User",
                  "canonicalReference": "@firebase/auth!User:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ", error?: "
                },
                {
                  "kind": "Reference",
                  "text": "ErrorFn",
                  "canonicalReference": "@firebase/util!ErrorFn:type"
                },
                {
                  "kind": "Content",
                  "text": ", completed?: "
                },
                {
                  "kind": "Reference",
                  "text": "CompleteFn",
                  "canonicalReference": "@firebase/util!CompleteFn:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Unsubscribe",
                  "canonicalReference": "@firebase/util!Unsubscribe:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nextOrObserver",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "completed",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "onIdTokenChanged"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!Auth#setPersistence:member(1)",
              "docComment": "/**\n * Changes the type of persistence on the `Auth` instance.\n *\n * @remarks\n *\n * This will affect the currently saved Auth session and applies this type of persistence for future sign-in requests, including sign-in with redirect requests.\n *\n * This makes it easy for a user signing in to specify whether their session should be remembered or not. It also makes it easier to never persist the Auth state for applications that are shared by other users or have sensitive data.\n *\n * This method does not work in a Node.js environment.\n *\n * @param persistence - The {@link Persistence} to use.\n *\n * @example\n * ```javascript\n * auth.setPersistence(browserSessionPersistence);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setPersistence(persistence: "
                },
                {
                  "kind": "Reference",
                  "text": "Persistence",
                  "canonicalReference": "@firebase/auth!Persistence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "persistence",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setPersistence"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Auth#settings:member",
              "docComment": "/**\n * The {@link Auth} instance's settings.\n *\n * @remarks\n *\n * This is used to edit/read configuration related options such as app verification mode for phone authentication.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly settings: "
                },
                {
                  "kind": "Reference",
                  "text": "AuthSettings",
                  "canonicalReference": "@firebase/auth!AuthSettings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "settings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!Auth#signOut:member(1)",
              "docComment": "/**\n * Signs out the current user. This does not automatically revoke the user's ID token.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "signOut(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "signOut"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Auth#tenantId:member",
              "docComment": "/**\n * The {@link Auth} instance's tenant ID.\n *\n * @remarks\n *\n * This is a readable/writable property. When you set the tenant ID of an {@link Auth} instance, all future sign-in/sign-up operations will pass this tenant ID and sign in or sign up users to the specified tenant project. When set to null, users are signed in to the parent project.\n *\n * @example\n * ```javascript\n * // Set the tenant ID on Auth instance.\n * auth.tenantId = 'TENANT_PROJECT_ID';\n *\n * // All future sign-in request now include tenant ID.\n * const result = await signInWithEmailAndPassword(auth, email, password);\n * // result.user.tenantId should be 'TENANT_PROJECT_ID'.\n * ```\n *\n * @defaultValue\n *\n * null\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tenantId: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tenantId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!Auth#updateCurrentUser:member(1)",
              "docComment": "/**\n * Asynchronously sets the provided user as {@link Auth.currentUser} on the {@link Auth} instance.\n *\n * @remarks\n *\n * A new instance copy of the user provided will be made and set as currentUser.\n *\n * This will trigger {@link Auth.onAuthStateChanged} and {@link Auth.onIdTokenChanged} listeners like other sign in methods.\n *\n * The operation fails with an error if the user to be updated belongs to a different Firebase project.\n *\n * @param user - The new {@link User}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateCurrentUser(user: "
                },
                {
                  "kind": "Reference",
                  "text": "User",
                  "canonicalReference": "@firebase/auth!User:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "user",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "updateCurrentUser"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!Auth#useDeviceLanguage:member(1)",
              "docComment": "/**\n * Sets the current language to the default device/browser preference.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "useDeviceLanguage(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "useDeviceLanguage"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/auth!AuthCredential:class",
          "docComment": "/**\n * Interface that represents the credentials returned by an {@link AuthProvider}.\n *\n * @remarks\n *\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `AuthCredential` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class AuthCredential "
            }
          ],
          "releaseTag": "Public",
          "name": "AuthCredential",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!AuthCredential#providerId:member",
              "docComment": "/**\n * The authentication provider ID for the credential.\n *\n * @remarks\n *\n * For example, 'facebook.com', or 'google.com'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly providerId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "providerId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!AuthCredential#signInMethod:member",
              "docComment": "/**\n * The authentication sign in method for the credential.\n *\n * @remarks\n *\n * For example, {@link SignInMethod}.EMAIL_PASSWORD, or {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method identifier as returned in {@link fetchSignInMethodsForEmail}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly signInMethod: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "signInMethod",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!AuthCredential#toJSON:member(1)",
              "docComment": "/**\n * Returns a JSON-serializable representation of this object.\n *\n * @returns a JSON-serializable representation of this object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toJSON"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!AuthError:interface",
          "docComment": "/**\n * Interface for an `Auth` error.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AuthError extends "
            },
            {
              "kind": "Reference",
              "text": "FirebaseError",
              "canonicalReference": "@firebase/util!FirebaseError:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "AuthError",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!AuthError#customData:member",
              "docComment": "/**\n * Details about the Firebase Auth error.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly customData: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readonly appName: string;\n        readonly email?: string;\n        readonly phoneNumber?: string;\n        readonly tenantId?: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "customData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@firebase/auth!AuthErrorCodes:var",
          "docComment": "/**\n * A map of potential `Auth` error codes, for easier comparison with errors thrown by the SDK.\n *\n * @remarks\n *\n * Note that you can't tree-shake individual keys in the map, so by using the map you might substantially increase your bundle size.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY: "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly ADMIN_ONLY_OPERATION: \"auth/admin-restricted-operation\";\n    readonly ARGUMENT_ERROR: \"auth/argument-error\";\n    readonly APP_NOT_AUTHORIZED: \"auth/app-not-authorized\";\n    readonly APP_NOT_INSTALLED: \"auth/app-not-installed\";\n    readonly CAPTCHA_CHECK_FAILED: \"auth/captcha-check-failed\";\n    readonly CODE_EXPIRED: \"auth/code-expired\";\n    readonly CORDOVA_NOT_READY: \"auth/cordova-not-ready\";\n    readonly CORS_UNSUPPORTED: \"auth/cors-unsupported\";\n    readonly CREDENTIAL_ALREADY_IN_USE: \"auth/credential-already-in-use\";\n    readonly CREDENTIAL_MISMATCH: \"auth/custom-token-mismatch\";\n    readonly CREDENTIAL_TOO_OLD_LOGIN_AGAIN: \"auth/requires-recent-login\";\n    readonly DEPENDENT_SDK_INIT_BEFORE_AUTH: \"auth/dependent-sdk-initialized-before-auth\";\n    readonly DYNAMIC_LINK_NOT_ACTIVATED: \"auth/dynamic-link-not-activated\";\n    readonly EMAIL_CHANGE_NEEDS_VERIFICATION: \"auth/email-change-needs-verification\";\n    readonly EMAIL_EXISTS: \"auth/email-already-in-use\";\n    readonly EMULATOR_CONFIG_FAILED: \"auth/emulator-config-failed\";\n    readonly EXPIRED_OOB_CODE: \"auth/expired-action-code\";\n    readonly EXPIRED_POPUP_REQUEST: \"auth/cancelled-popup-request\";\n    readonly INTERNAL_ERROR: \"auth/internal-error\";\n    readonly INVALID_API_KEY: \"auth/invalid-api-key\";\n    readonly INVALID_APP_CREDENTIAL: \"auth/invalid-app-credential\";\n    readonly INVALID_APP_ID: \"auth/invalid-app-id\";\n    readonly INVALID_AUTH: \"auth/invalid-user-token\";\n    readonly INVALID_AUTH_EVENT: \"auth/invalid-auth-event\";\n    readonly INVALID_CERT_HASH: \"auth/invalid-cert-hash\";\n    readonly INVALID_CODE: \"auth/invalid-verification-code\";\n    readonly INVALID_CONTINUE_URI: \"auth/invalid-continue-uri\";\n    readonly INVALID_CORDOVA_CONFIGURATION: \"auth/invalid-cordova-configuration\";\n    readonly INVALID_CUSTOM_TOKEN: \"auth/invalid-custom-token\";\n    readonly INVALID_DYNAMIC_LINK_DOMAIN: \"auth/invalid-dynamic-link-domain\";\n    readonly INVALID_EMAIL: \"auth/invalid-email\";\n    readonly INVALID_EMULATOR_SCHEME: \"auth/invalid-emulator-scheme\";\n    readonly INVALID_IDP_RESPONSE: \"auth/invalid-credential\";\n    readonly INVALID_MESSAGE_PAYLOAD: \"auth/invalid-message-payload\";\n    readonly INVALID_MFA_SESSION: \"auth/invalid-multi-factor-session\";\n    readonly INVALID_OAUTH_CLIENT_ID: \"auth/invalid-oauth-client-id\";\n    readonly INVALID_OAUTH_PROVIDER: \"auth/invalid-oauth-provider\";\n    readonly INVALID_OOB_CODE: \"auth/invalid-action-code\";\n    readonly INVALID_ORIGIN: \"auth/unauthorized-domain\";\n    readonly INVALID_PASSWORD: \"auth/wrong-password\";\n    readonly INVALID_PERSISTENCE: \"auth/invalid-persistence-type\";\n    readonly INVALID_PHONE_NUMBER: \"auth/invalid-phone-number\";\n    readonly INVALID_PROVIDER_ID: \"auth/invalid-provider-id\";\n    readonly INVALID_RECIPIENT_EMAIL: \"auth/invalid-recipient-email\";\n    readonly INVALID_SENDER: \"auth/invalid-sender\";\n    readonly INVALID_SESSION_INFO: \"auth/invalid-verification-id\";\n    readonly INVALID_TENANT_ID: \"auth/invalid-tenant-id\";\n    readonly MFA_INFO_NOT_FOUND: \"auth/multi-factor-info-not-found\";\n    readonly MFA_REQUIRED: \"auth/multi-factor-auth-required\";\n    readonly MISSING_ANDROID_PACKAGE_NAME: \"auth/missing-android-pkg-name\";\n    readonly MISSING_APP_CREDENTIAL: \"auth/missing-app-credential\";\n    readonly MISSING_AUTH_DOMAIN: \"auth/auth-domain-config-required\";\n    readonly MISSING_CODE: \"auth/missing-verification-code\";\n    readonly MISSING_CONTINUE_URI: \"auth/missing-continue-uri\";\n    readonly MISSING_IFRAME_START: \"auth/missing-iframe-start\";\n    readonly MISSING_IOS_BUNDLE_ID: \"auth/missing-ios-bundle-id\";\n    readonly MISSING_OR_INVALID_NONCE: \"auth/missing-or-invalid-nonce\";\n    readonly MISSING_MFA_INFO: \"auth/missing-multi-factor-info\";\n    readonly MISSING_MFA_SESSION: \"auth/missing-multi-factor-session\";\n    readonly MISSING_PHONE_NUMBER: \"auth/missing-phone-number\";\n    readonly MISSING_SESSION_INFO: \"auth/missing-verification-id\";\n    readonly MODULE_DESTROYED: \"auth/app-deleted\";\n    readonly NEED_CONFIRMATION: \"auth/account-exists-with-different-credential\";\n    readonly NETWORK_REQUEST_FAILED: \"auth/network-request-failed\";\n    readonly NULL_USER: \"auth/null-user\";\n    readonly NO_AUTH_EVENT: \"auth/no-auth-event\";\n    readonly NO_SUCH_PROVIDER: \"auth/no-such-provider\";\n    readonly OPERATION_NOT_ALLOWED: \"auth/operation-not-allowed\";\n    readonly OPERATION_NOT_SUPPORTED: \"auth/operation-not-supported-in-this-environment\";\n    readonly POPUP_BLOCKED: \"auth/popup-blocked\";\n    readonly POPUP_CLOSED_BY_USER: \"auth/popup-closed-by-user\";\n    readonly PROVIDER_ALREADY_LINKED: \"auth/provider-already-linked\";\n    readonly QUOTA_EXCEEDED: \"auth/quota-exceeded\";\n    readonly REDIRECT_CANCELLED_BY_USER: \"auth/redirect-cancelled-by-user\";\n    readonly REDIRECT_OPERATION_PENDING: \"auth/redirect-operation-pending\";\n    readonly REJECTED_CREDENTIAL: \"auth/rejected-credential\";\n    readonly SECOND_FACTOR_ALREADY_ENROLLED: \"auth/second-factor-already-in-use\";\n    readonly SECOND_FACTOR_LIMIT_EXCEEDED: \"auth/maximum-second-factor-count-exceeded\";\n    readonly TENANT_ID_MISMATCH: \"auth/tenant-id-mismatch\";\n    readonly TIMEOUT: \"auth/timeout\";\n    readonly TOKEN_EXPIRED: \"auth/user-token-expired\";\n    readonly TOO_MANY_ATTEMPTS_TRY_LATER: \"auth/too-many-requests\";\n    readonly UNAUTHORIZED_DOMAIN: \"auth/unauthorized-continue-uri\";\n    readonly UNSUPPORTED_FIRST_FACTOR: \"auth/unsupported-first-factor\";\n    readonly UNSUPPORTED_PERSISTENCE: \"auth/unsupported-persistence-type\";\n    readonly UNSUPPORTED_TENANT_OPERATION: \"auth/unsupported-tenant-operation\";\n    readonly UNVERIFIED_EMAIL: \"auth/unverified-email\";\n    readonly USER_CANCELLED: \"auth/user-cancelled\";\n    readonly USER_DELETED: \"auth/user-not-found\";\n    readonly USER_DISABLED: \"auth/user-disabled\";\n    readonly USER_MISMATCH: \"auth/user-mismatch\";\n    readonly USER_SIGNED_OUT: \"auth/user-signed-out\";\n    readonly WEAK_PASSWORD: \"auth/weak-password\";\n    readonly WEB_STORAGE_UNSUPPORTED: \"auth/web-storage-unsupported\";\n    readonly ALREADY_INITIALIZED: \"auth/already-initialized\";\n    readonly RECAPTCHA_NOT_ENABLED: \"auth/recaptcha-not-enabled\";\n    readonly MISSING_RECAPTCHA_TOKEN: \"auth/missing-recaptcha-token\";\n    readonly INVALID_RECAPTCHA_TOKEN: \"auth/invalid-recaptcha-token\";\n    readonly INVALID_RECAPTCHA_ACTION: \"auth/invalid-recaptcha-action\";\n    readonly MISSING_CLIENT_TYPE: \"auth/missing-client-type\";\n    readonly MISSING_RECAPTCHA_VERSION: \"auth/missing-recaptcha-version\";\n    readonly INVALID_RECAPTCHA_VERSION: \"auth/invalid-recaptcha-version\";\n    readonly INVALID_REQ_TYPE: \"auth/invalid-req-type\";\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "AuthErrorCodes",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!AuthErrorMap:interface",
          "docComment": "/**\n * A mapping of error codes to error messages.\n *\n * @remarks\n *\n * While error messages are useful for debugging (providing verbose textual context around what went wrong), these strings take up a lot of space in the compiled code. When deploying code in production, using {@link prodErrorMap} will save you roughly 10k compressed/gzipped over {@link debugErrorMap}. You can select the error map during initialization:\n * ```javascript\n * initializeAuth(app, {errorMap: debugErrorMap})\n * ```\n *\n * When initializing Auth, {@link prodErrorMap} is default.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AuthErrorMap "
            }
          ],
          "releaseTag": "Public",
          "name": "AuthErrorMap",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!AuthProvider:interface",
          "docComment": "/**\n * Interface that represents an auth provider, used to facilitate creating {@link AuthCredential}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AuthProvider "
            }
          ],
          "releaseTag": "Public",
          "name": "AuthProvider",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!AuthProvider#providerId:member",
              "docComment": "/**\n * Provider for which credentials can be constructed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly providerId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "providerId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!AuthSettings:interface",
          "docComment": "/**\n * Interface representing an {@link Auth} instance's settings.\n *\n * @remarks\n *\n * Currently used for enabling/disabling app verification for phone Auth testing.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AuthSettings "
            }
          ],
          "releaseTag": "Public",
          "name": "AuthSettings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!AuthSettings#appVerificationDisabledForTesting:member",
              "docComment": "/**\n * When set, this property disables app verification for the purpose of testing phone authentication. For this property to take effect, it needs to be set before rendering a reCAPTCHA app verifier. When this is disabled, a mock reCAPTCHA is rendered instead. This is useful for manual testing during development or for automated integration tests.\n *\n * In order to use this feature, you will need to {@link https://firebase.google.com/docs/auth/web/phone-auth#test-with-whitelisted-phone-numbers | whitelist your phone number} via the Firebase Console.\n *\n * The default value is false (app verification is enabled).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "appVerificationDisabledForTesting: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "appVerificationDisabledForTesting",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!beforeAuthStateChanged:function(1)",
          "docComment": "/**\n * Adds a blocking callback that runs before an auth state change sets a new user.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param callback - callback triggered before new user value is set. If this throws, it blocks the user from being set.\n *\n * @param onAbort - callback triggered if a later `beforeAuthStateChanged()` callback throws, allowing you to undo any side effects.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function beforeAuthStateChanged(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": " | null) => void | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ", onAbort?: "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/util!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            },
            {
              "parameterName": "onAbort",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "name": "beforeAuthStateChanged"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@firebase/auth!browserLocalPersistence:var",
          "docComment": "/**\n * An implementation of {@link Persistence} of type `LOCAL` using `localStorage` for the underlying storage.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "browserLocalPersistence: "
            },
            {
              "kind": "Reference",
              "text": "Persistence",
              "canonicalReference": "@firebase/auth!Persistence:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "browserLocalPersistence",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@firebase/auth!browserPopupRedirectResolver:var",
          "docComment": "/**\n * An implementation of {@link PopupRedirectResolver} suitable for browser based applications.\n *\n * @remarks\n *\n * This method does not work in a Node.js environment.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "browserPopupRedirectResolver: "
            },
            {
              "kind": "Reference",
              "text": "PopupRedirectResolver",
              "canonicalReference": "@firebase/auth!PopupRedirectResolver:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "browserPopupRedirectResolver",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@firebase/auth!browserSessionPersistence:var",
          "docComment": "/**\n * An implementation of {@link Persistence} of `SESSION` using `sessionStorage` for the underlying storage.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "browserSessionPersistence: "
            },
            {
              "kind": "Reference",
              "text": "Persistence",
              "canonicalReference": "@firebase/auth!Persistence:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "browserSessionPersistence",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!checkActionCode:function(1)",
          "docComment": "/**\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param oobCode - A verification code sent to the user.\n *\n * @returns metadata about the code.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function checkActionCode(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", oobCode: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ActionCodeInfo",
              "canonicalReference": "@firebase/auth!ActionCodeInfo:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "oobCode",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "checkActionCode"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!Config:interface",
          "docComment": "/**\n * Interface representing the `Auth` config.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Config "
            }
          ],
          "releaseTag": "Public",
          "name": "Config",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Config#apiHost:member",
              "docComment": "/**\n * The host at which the Firebase Auth backend is running.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "apiHost: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "apiHost",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Config#apiKey:member",
              "docComment": "/**\n * The API Key used to communicate with the Firebase Auth backend.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "apiKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "apiKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Config#apiScheme:member",
              "docComment": "/**\n * The scheme used to communicate with the Firebase Auth backend.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "apiScheme: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "apiScheme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Config#authDomain:member",
              "docComment": "/**\n * The domain at which the web widgets are hosted (provided via Firebase Config).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "authDomain?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "authDomain",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Config#sdkClientVersion:member",
              "docComment": "/**\n * The SDK Client Version.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sdkClientVersion: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sdkClientVersion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Config#tokenApiHost:member",
              "docComment": "/**\n * The host at which the Secure Token API is running.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tokenApiHost: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tokenApiHost",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!ConfirmationResult:interface",
          "docComment": "/**\n * A result from a phone number sign-in, link, or reauthenticate call.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ConfirmationResult "
            }
          ],
          "releaseTag": "Public",
          "name": "ConfirmationResult",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!ConfirmationResult#confirm:member(1)",
              "docComment": "/**\n * Finishes a phone number sign-in, link, or reauthentication.\n *\n * @param verificationCode - The code that was sent to the user's mobile device.\n *\n * @example\n * ```javascript\n * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n * // Obtain verificationCode from the user.\n * const userCredential = await confirmationResult.confirm(verificationCode);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "confirm(verificationCode: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UserCredential",
                  "canonicalReference": "@firebase/auth!UserCredential:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "verificationCode",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "confirm"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!ConfirmationResult#verificationId:member",
              "docComment": "/**\n * The phone number authentication operation's verification ID.\n *\n * @remarks\n *\n * This can be used along with the verification code to initialize a {@link PhoneAuthCredential}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly verificationId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "verificationId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!confirmPasswordReset:function(1)",
          "docComment": "/**\n * Completes the password reset process, given a confirmation code and new password.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param oobCode - A confirmation code sent to the user.\n *\n * @param newPassword - The new password.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function confirmPasswordReset(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", oobCode: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", newPassword: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "oobCode",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "newPassword",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "confirmPasswordReset"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!connectAuthEmulator:function(1)",
          "docComment": "/**\n * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production Firebase Auth services.\n *\n * @remarks\n *\n * This must be called synchronously immediately following the first call to {@link initializeAuth}. Do not use with production credentials as emulator traffic is not encrypted.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\n *\n * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to `true` to disable the warning banner attached to the DOM.\n *\n * @example\n * ```javascript\n * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function connectAuthEmulator(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", url: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Content",
              "text": "{\n    disableWarnings: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "connectAuthEmulator"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!createUserWithEmailAndPassword:function(1)",
          "docComment": "/**\n * Creates a new user account associated with the specified email address and password.\n *\n * @remarks\n *\n * On successful creation of the user account, this user will also be signed in to your application.\n *\n * User account creation can fail if the account already exists or the password is invalid.\n *\n * Note: The email address acts as a unique identifier for the user and enables an email-based password reset. This function will create a new user account and set the initial user password.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param email - The user's email address.\n *\n * @param password - The user's chosen password.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createUserWithEmailAndPassword(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", email: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", password: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UserCredential",
              "canonicalReference": "@firebase/auth!UserCredential:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "email",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "password",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "createUserWithEmailAndPassword"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@firebase/auth!CustomParameters:type",
          "docComment": "/**\n * Map of OAuth Custom Parameters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CustomParameters = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CustomParameters",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@firebase/auth!debugErrorMap:var",
          "docComment": "/**\n * A verbose error map with detailed descriptions for most error codes.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "debugErrorMap: "
            },
            {
              "kind": "Reference",
              "text": "AuthErrorMap",
              "canonicalReference": "@firebase/auth!AuthErrorMap:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "debugErrorMap",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!deleteUser:function(1)",
          "docComment": "/**\n * Deletes and signs out the user.\n *\n * @remarks\n *\n * Important: this is a security-sensitive operation that requires the user to have recently signed in. If this requirement isn't met, ask the user to authenticate again and then call {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deleteUser(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "deleteUser"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!Dependencies:interface",
          "docComment": "/**\n * The dependencies that can be used to initialize an {@link Auth} instance.\n *\n * @remarks\n *\n * The modular SDK enables tree shaking by allowing explicit declarations of dependencies. For example, a web app does not need to include code that enables Cordova redirect sign in. That functionality is therefore split into {@link browserPopupRedirectResolver} and {@link cordovaPopupRedirectResolver}. The dependencies object is how Auth is configured to reduce bundle sizes.\n *\n * There are two ways to initialize an {@link Auth} instance: {@link getAuth} and {@link initializeAuth}. `getAuth` initializes everything using platform-specific configurations, while `initializeAuth` takes a `Dependencies` object directly, giving you more control over what is used.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Dependencies "
            }
          ],
          "releaseTag": "Public",
          "name": "Dependencies",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Dependencies#errorMap:member",
              "docComment": "/**\n * Which {@link AuthErrorMap} to use.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "errorMap?: "
                },
                {
                  "kind": "Reference",
                  "text": "AuthErrorMap",
                  "canonicalReference": "@firebase/auth!AuthErrorMap:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "errorMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Dependencies#persistence:member",
              "docComment": "/**\n * Which {@link Persistence} to use. If this is an array, the first `Persistence` that the device supports is used. The SDK searches for an existing account in order and, if one is found in a secondary `Persistence`, the account is moved to the primary `Persistence`.\n *\n * If no persistence is provided, the SDK falls back on {@link inMemoryPersistence}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "persistence?: "
                },
                {
                  "kind": "Reference",
                  "text": "Persistence",
                  "canonicalReference": "@firebase/auth!Persistence:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Persistence",
                  "canonicalReference": "@firebase/auth!Persistence:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "persistence",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Dependencies#popupRedirectResolver:member",
              "docComment": "/**\n * The {@link PopupRedirectResolver} to use. This value depends on the platform. Options are {@link browserPopupRedirectResolver} and {@link cordovaPopupRedirectResolver}. This field is optional if neither {@link signInWithPopup} or {@link signInWithRedirect} are being used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "popupRedirectResolver?: "
                },
                {
                  "kind": "Reference",
                  "text": "PopupRedirectResolver",
                  "canonicalReference": "@firebase/auth!PopupRedirectResolver:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "popupRedirectResolver",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/auth!EmailAuthCredential:class",
          "docComment": "/**\n * Interface that represents the credentials returned by {@link EmailAuthProvider} for {@link ProviderId}.PASSWORD\n *\n * @remarks\n *\n * Covers both {@link SignInMethod}.EMAIL_PASSWORD and {@link SignInMethod}.EMAIL_LINK.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `EmailAuthCredential` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class EmailAuthCredential extends "
            },
            {
              "kind": "Reference",
              "text": "AuthCredential",
              "canonicalReference": "@firebase/auth!AuthCredential:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EmailAuthCredential",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!EmailAuthCredential.fromJSON:member(1)",
              "docComment": "/**\n * Static method to deserialize a JSON representation of an object into an {@link AuthCredential}.\n *\n * @param json - Either `object` or the stringified representation of the object. When string is provided, `JSON.parse` would be called first.\n *\n * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromJSON(json: "
                },
                {
                  "kind": "Content",
                  "text": "object | string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EmailAuthCredential",
                  "canonicalReference": "@firebase/auth!EmailAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "json",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromJSON"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!EmailAuthCredential#toJSON:member(1)",
              "docComment": "/**\n * Returns a JSON-serializable representation of this object.\n *\n * @returns a JSON-serializable representation of this object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toJSON"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/auth!EmailAuthProvider:class",
          "docComment": "/**\n * Provider for generating {@link EmailAuthCredential}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class EmailAuthProvider implements "
            },
            {
              "kind": "Reference",
              "text": "AuthProvider",
              "canonicalReference": "@firebase/auth!AuthProvider:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EmailAuthProvider",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!EmailAuthProvider.credential:member(1)",
              "docComment": "/**\n * Initialize an {@link AuthCredential} using an email and password.\n *\n * @param email - Email address.\n *\n * @param password - User account password.\n *\n * @returns The auth provider credential.\n *\n * @example\n * ```javascript\n * const authCredential = EmailAuthProvider.credential(email, password);\n * const userCredential = await signInWithCredential(auth, authCredential);\n * ```\n *\n * @example\n * ```javascript\n * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credential(email: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", password: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EmailAuthCredential",
                  "canonicalReference": "@firebase/auth!EmailAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "email",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "password",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "credential"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!EmailAuthProvider.credentialWithLink:member(1)",
              "docComment": "/**\n * Initialize an {@link AuthCredential} using an email and an email link after a sign in with email link operation.\n *\n * @param auth - The {@link Auth} instance used to verify the link.\n *\n * @param email - Email address.\n *\n * @param emailLink - Sign-in email link.\n *\n * @returns - The auth provider credential.\n *\n * @example\n * ```javascript\n * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n * const userCredential = await signInWithCredential(auth, authCredential);\n * ```\n *\n * @example\n * ```javascript\n * await sendSignInLinkToEmail(auth, email);\n * // Obtain emailLink from user.\n * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credentialWithLink(email: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", emailLink: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EmailAuthCredential",
                  "canonicalReference": "@firebase/auth!EmailAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "email",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "emailLink",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "credentialWithLink"
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD:member",
              "docComment": "/**\n * Always set to {@link SignInMethod}.EMAIL_LINK.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly EMAIL_LINK_SIGN_IN_METHOD: "
                },
                {
                  "kind": "Content",
                  "text": "'emailLink'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "EMAIL_LINK_SIGN_IN_METHOD",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD:member",
              "docComment": "/**\n * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly EMAIL_PASSWORD_SIGN_IN_METHOD: "
                },
                {
                  "kind": "Content",
                  "text": "'password'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "EMAIL_PASSWORD_SIGN_IN_METHOD",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!EmailAuthProvider.PROVIDER_ID:member",
              "docComment": "/**\n * Always set to {@link ProviderId}.PASSWORD, even for email link.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly PROVIDER_ID: "
                },
                {
                  "kind": "Content",
                  "text": "'password'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "PROVIDER_ID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!EmailAuthProvider#providerId:member",
              "docComment": "/**\n * Always set to {@link ProviderId}.PASSWORD, even for email link.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly providerId: "
                },
                {
                  "kind": "Content",
                  "text": "\"password\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "providerId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!EmulatorConfig:interface",
          "docComment": "/**\n * Configuration of Firebase Authentication Emulator.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EmulatorConfig "
            }
          ],
          "releaseTag": "Public",
          "name": "EmulatorConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!EmulatorConfig#host:member",
              "docComment": "/**\n * The hostname of the emulator, which may be a domain (\"localhost\"), IPv4 address (\"127.0.0.1\") or quoted IPv6 address (\"[::1]\").\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly host: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "host",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!EmulatorConfig#options:member",
              "docComment": "/**\n * The emulator-specific options.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly options: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readonly disableWarnings: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!EmulatorConfig#port:member",
              "docComment": "/**\n * The port of the emulator, or null if port isn't specified (i.e. protocol default).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly port: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "port",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!EmulatorConfig#protocol:member",
              "docComment": "/**\n * The protocol used to communicate with the emulator (\"http\"/\"https\").\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly protocol: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "protocol",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/auth!FacebookAuthProvider:class",
          "docComment": "/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('user_birthday');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = FacebookAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * provider.addScope('user_birthday');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Facebook Access Token.\n * const credential = FacebookAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class FacebookAuthProvider extends "
            },
            {
              "kind": "Reference",
              "text": "BaseOAuthProvider",
              "canonicalReference": "@firebase/auth!BaseOAuthProvider:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "FacebookAuthProvider",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@firebase/auth!FacebookAuthProvider:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `FacebookAuthProvider` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!FacebookAuthProvider.credential:member(1)",
              "docComment": "/**\n * Creates a credential for Facebook.\n *\n * @param accessToken - Facebook access token.\n *\n * @example\n * ```javascript\n * // `event` from the Facebook auth.authResponseChange callback.\n * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n * const result = await signInWithCredential(credential);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credential(accessToken: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredential",
                  "canonicalReference": "@firebase/auth!OAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "accessToken",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credential"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!FacebookAuthProvider.credentialFromError:member(1)",
              "docComment": "/**\n * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was thrown during a sign-in, link, or reauthenticate operation.\n *\n * @param userCredential - The user credential.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credentialFromError(error: "
                },
                {
                  "kind": "Reference",
                  "text": "FirebaseError",
                  "canonicalReference": "@firebase/util!FirebaseError:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredential",
                  "canonicalReference": "@firebase/auth!OAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credentialFromError"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!FacebookAuthProvider.credentialFromResult:member(1)",
              "docComment": "/**\n * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n *\n * @param userCredential - The user credential.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credentialFromResult(userCredential: "
                },
                {
                  "kind": "Reference",
                  "text": "UserCredential",
                  "canonicalReference": "@firebase/auth!UserCredential:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredential",
                  "canonicalReference": "@firebase/auth!OAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userCredential",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credentialFromResult"
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD:member",
              "docComment": "/**\n * Always set to {@link SignInMethod}.FACEBOOK.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly FACEBOOK_SIGN_IN_METHOD: "
                },
                {
                  "kind": "Content",
                  "text": "'facebook.com'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "FACEBOOK_SIGN_IN_METHOD",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!FacebookAuthProvider.PROVIDER_ID:member",
              "docComment": "/**\n * Always set to {@link ProviderId}.FACEBOOK.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly PROVIDER_ID: "
                },
                {
                  "kind": "Content",
                  "text": "'facebook.com'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "PROVIDER_ID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@firebase/auth!FactorId:var",
          "docComment": "/**\n * An enum of factors that may be used for multifactor authentication.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FactorId: "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly PHONE: \"phone\";\n    readonly TOTP: \"totp\";\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "FactorId",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!fetchSignInMethodsForEmail:function(1)",
          "docComment": "/**\n * Gets the list of possible sign in methods for the given email address.\n *\n * @remarks\n *\n * This is useful to differentiate methods of sign-in for the same provider, eg. {@link EmailAuthProvider} which has 2 methods of sign-in, {@link SignInMethod}.EMAIL_PASSWORD and {@link SignInMethod}.EMAIL_LINK.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param email - The user's email address.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fetchSignInMethodsForEmail(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", email: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string[]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "email",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "fetchSignInMethodsForEmail"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!getAdditionalUserInfo:function(1)",
          "docComment": "/**\n * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\n *\n * @param userCredential - The user credential.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAdditionalUserInfo(userCredential: "
            },
            {
              "kind": "Reference",
              "text": "UserCredential",
              "canonicalReference": "@firebase/auth!UserCredential:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AdditionalUserInfo",
              "canonicalReference": "@firebase/auth!AdditionalUserInfo:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "userCredential",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "getAdditionalUserInfo"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!getAuth:function(1)",
          "docComment": "/**\n * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}. If no instance exists, initializes an Auth instance with platform-specific default dependencies.\n *\n * @param app - The Firebase App.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAuth(app?: "
            },
            {
              "kind": "Reference",
              "text": "FirebaseApp",
              "canonicalReference": "@firebase/app!FirebaseApp:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "app",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "getAuth"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!getIdToken:function(1)",
          "docComment": "/**\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n *\n * Returns the current token if it has not expired or if it will not expire in the next five minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n *\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getIdToken(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ", forceRefresh?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "forceRefresh",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "getIdToken"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!getIdTokenResult:function(1)",
          "docComment": "/**\n * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n *\n * Returns the current token if it has not expired or if it will not expire in the next five minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n *\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getIdTokenResult(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ", forceRefresh?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IdTokenResult",
              "canonicalReference": "@firebase/auth!IdTokenResult:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "forceRefresh",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "getIdTokenResult"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!getMultiFactorResolver:function(1)",
          "docComment": "/**\n * Provides a {@link MultiFactorResolver} suitable for completion of a multi-factor flow.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param error - The {@link MultiFactorError} raised during a sign-in, or reauthentication operation.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getMultiFactorResolver(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", error: "
            },
            {
              "kind": "Reference",
              "text": "MultiFactorError",
              "canonicalReference": "@firebase/auth!MultiFactorError:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "MultiFactorResolver",
              "canonicalReference": "@firebase/auth!MultiFactorResolver:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "error",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "getMultiFactorResolver"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!getRedirectResult:function(1)",
          "docComment": "/**\n * Returns a {@link UserCredential} from the redirect-based sign-in flow.\n *\n * @remarks\n *\n * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an error. If no redirect operation was called, returns `null`.\n *\n * This method does not work in a Node.js environment.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // You can add additional scopes to the provider:\n * provider.addScope('user_birthday');\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * // As this API can be used for sign-in, linking and reauthentication,\n * // check the operationType to determine what triggered this redirect\n * // operation.\n * const operationType = result.operationType;\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRedirectResult(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", resolver?: "
            },
            {
              "kind": "Reference",
              "text": "PopupRedirectResolver",
              "canonicalReference": "@firebase/auth!PopupRedirectResolver:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UserCredential",
              "canonicalReference": "@firebase/auth!UserCredential:interface"
            },
            {
              "kind": "Content",
              "text": " | null>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "resolver",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "getRedirectResult"
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/auth!GithubAuthProvider:class",
          "docComment": "/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\n *\n * @remarks\n *\n * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use the {@link signInWithPopup} handler:\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GithubAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('repo');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Github Access Token.\n *   const credential = GithubAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GithubAuthProvider();\n * provider.addScope('repo');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Github Access Token.\n * const credential = GithubAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class GithubAuthProvider extends "
            },
            {
              "kind": "Reference",
              "text": "BaseOAuthProvider",
              "canonicalReference": "@firebase/auth!BaseOAuthProvider:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "GithubAuthProvider",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@firebase/auth!GithubAuthProvider:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `GithubAuthProvider` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!GithubAuthProvider.credential:member(1)",
              "docComment": "/**\n * Creates a credential for Github.\n *\n * @param accessToken - Github access token.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credential(accessToken: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredential",
                  "canonicalReference": "@firebase/auth!OAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "accessToken",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credential"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!GithubAuthProvider.credentialFromError:member(1)",
              "docComment": "/**\n * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was thrown during a sign-in, link, or reauthenticate operation.\n *\n * @param userCredential - The user credential.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credentialFromError(error: "
                },
                {
                  "kind": "Reference",
                  "text": "FirebaseError",
                  "canonicalReference": "@firebase/util!FirebaseError:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredential",
                  "canonicalReference": "@firebase/auth!OAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credentialFromError"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!GithubAuthProvider.credentialFromResult:member(1)",
              "docComment": "/**\n * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n *\n * @param userCredential - The user credential.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credentialFromResult(userCredential: "
                },
                {
                  "kind": "Reference",
                  "text": "UserCredential",
                  "canonicalReference": "@firebase/auth!UserCredential:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredential",
                  "canonicalReference": "@firebase/auth!OAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userCredential",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credentialFromResult"
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!GithubAuthProvider.GITHUB_SIGN_IN_METHOD:member",
              "docComment": "/**\n * Always set to {@link SignInMethod}.GITHUB.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly GITHUB_SIGN_IN_METHOD: "
                },
                {
                  "kind": "Content",
                  "text": "'github.com'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GITHUB_SIGN_IN_METHOD",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!GithubAuthProvider.PROVIDER_ID:member",
              "docComment": "/**\n * Always set to {@link ProviderId}.GITHUB.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly PROVIDER_ID: "
                },
                {
                  "kind": "Content",
                  "text": "'github.com'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "PROVIDER_ID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/auth!GoogleAuthProvider:class",
          "docComment": "/**\n * Provider for generating an an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GoogleAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Google Access Token.\n *   const credential = GoogleAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GoogleAuthProvider();\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Google Access Token.\n * const credential = GoogleAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class GoogleAuthProvider extends "
            },
            {
              "kind": "Reference",
              "text": "BaseOAuthProvider",
              "canonicalReference": "@firebase/auth!BaseOAuthProvider:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "GoogleAuthProvider",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@firebase/auth!GoogleAuthProvider:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `GoogleAuthProvider` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!GoogleAuthProvider.credential:member(1)",
              "docComment": "/**\n * Creates a credential for Google. At least one of ID token and access token is required.\n *\n * @param idToken - Google ID token.\n *\n * @param accessToken - Google access token.\n *\n * @example\n * ```javascript\n * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n * const result = await signInWithCredential(credential);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credential(idToken?: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ", accessToken?: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredential",
                  "canonicalReference": "@firebase/auth!OAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "idToken",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "accessToken",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "credential"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!GoogleAuthProvider.credentialFromError:member(1)",
              "docComment": "/**\n * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was thrown during a sign-in, link, or reauthenticate operation.\n *\n * @param userCredential - The user credential.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credentialFromError(error: "
                },
                {
                  "kind": "Reference",
                  "text": "FirebaseError",
                  "canonicalReference": "@firebase/util!FirebaseError:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredential",
                  "canonicalReference": "@firebase/auth!OAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credentialFromError"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!GoogleAuthProvider.credentialFromResult:member(1)",
              "docComment": "/**\n * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n *\n * @param userCredential - The user credential.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credentialFromResult(userCredential: "
                },
                {
                  "kind": "Reference",
                  "text": "UserCredential",
                  "canonicalReference": "@firebase/auth!UserCredential:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredential",
                  "canonicalReference": "@firebase/auth!OAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userCredential",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credentialFromResult"
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD:member",
              "docComment": "/**\n * Always set to {@link SignInMethod}.GOOGLE.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly GOOGLE_SIGN_IN_METHOD: "
                },
                {
                  "kind": "Content",
                  "text": "'google.com'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "GOOGLE_SIGN_IN_METHOD",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!GoogleAuthProvider.PROVIDER_ID:member",
              "docComment": "/**\n * Always set to {@link ProviderId}.GOOGLE.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly PROVIDER_ID: "
                },
                {
                  "kind": "Content",
                  "text": "'google.com'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "PROVIDER_ID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!IdTokenResult:interface",
          "docComment": "/**\n * Interface representing ID token result obtained from {@link User.getIdTokenResult}.\n *\n * @remarks\n *\n * `IdTokenResult` contains the ID token JWT string and other helper properties for getting different data associated with the token as well as all the decoded payload claims.\n *\n * Note that these claims are not to be trusted as they are parsed client side. Only server side verification can guarantee the integrity of the token claims.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IdTokenResult "
            }
          ],
          "releaseTag": "Public",
          "name": "IdTokenResult",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!IdTokenResult#authTime:member",
              "docComment": "/**\n * The authentication time formatted as a UTC string.\n *\n * @remarks\n *\n * This is the time the user authenticated (signed in) and not the time the token was refreshed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "authTime: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "authTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!IdTokenResult#claims:member",
              "docComment": "/**\n * The entire payload claims of the ID token including the standard reserved claims as well as the custom claims.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "claims: "
                },
                {
                  "kind": "Reference",
                  "text": "ParsedToken",
                  "canonicalReference": "@firebase/auth!ParsedToken:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "claims",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!IdTokenResult#expirationTime:member",
              "docComment": "/**\n * The ID token expiration time formatted as a UTC string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expirationTime: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "expirationTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!IdTokenResult#issuedAtTime:member",
              "docComment": "/**\n * The ID token issuance time formatted as a UTC string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "issuedAtTime: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "issuedAtTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!IdTokenResult#signInProvider:member",
              "docComment": "/**\n * The sign-in provider through which the ID token was obtained (anonymous, custom, phone, password, etc).\n *\n * @remarks\n *\n * Note, this does not map to provider IDs.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "signInProvider: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "signInProvider",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!IdTokenResult#signInSecondFactor:member",
              "docComment": "/**\n * The type of second factor associated with this session, provided the user was multi-factor authenticated (eg. phone, etc).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "signInSecondFactor: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "signInSecondFactor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!IdTokenResult#token:member",
              "docComment": "/**\n * The Firebase Auth ID token JWT string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "token: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "token",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@firebase/auth!indexedDBLocalPersistence:var",
          "docComment": "/**\n * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB` for the underlying storage.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "indexedDBLocalPersistence: "
            },
            {
              "kind": "Reference",
              "text": "Persistence",
              "canonicalReference": "@firebase/auth!Persistence:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "indexedDBLocalPersistence",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!initializeAuth:function(1)",
          "docComment": "/**\n * Initializes an {@link Auth} instance with fine-grained control over {@link Dependencies}.\n *\n * @remarks\n *\n * This function allows more control over the {@link Auth} instance than {@link getAuth}. `getAuth` uses platform-specific defaults to supply the {@link Dependencies}. In general, `getAuth` is the easiest way to initialize Auth and works for most use cases. Use `initializeAuth` if you need control over which persistence layer is used, or to minimize bundle size if you're not using either `signInWithPopup` or `signInWithRedirect`.\n *\n * For example, if your app only uses anonymous accounts and you only want accounts saved for the current session, initialize `Auth` with:\n * ```js\n * const auth = initializeAuth(app, {\n *   persistence: browserSessionPersistence,\n *   popupRedirectResolver: undefined,\n * });\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function initializeAuth(app: "
            },
            {
              "kind": "Reference",
              "text": "FirebaseApp",
              "canonicalReference": "@firebase/app!FirebaseApp:interface"
            },
            {
              "kind": "Content",
              "text": ", deps?: "
            },
            {
              "kind": "Reference",
              "text": "Dependencies",
              "canonicalReference": "@firebase/auth!Dependencies:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "app",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "deps",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "initializeAuth"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!initializeRecaptchaConfig:function(1)",
          "docComment": "/**\n * Loads the reCAPTCHA configuration into the `Auth` instance.\n *\n * @remarks\n *\n * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA verification flow should be triggered for each auth provider, into the current Auth session.\n *\n * If initializeRecaptchaConfig() is not invoked, the auth flow will always start without reCAPTCHA verification. If the provider is configured to require reCAPTCHA verification, the SDK will transparently load the reCAPTCHA config and restart the auth flows.\n *\n * Thus, by calling this optional method, you will reduce the latency of future auth flows. Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\n *\n * This method does not work in a Node.js environment.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @example\n * ```javascript\n * initializeRecaptchaConfig(auth);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function initializeRecaptchaConfig(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "initializeRecaptchaConfig"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@firebase/auth!inMemoryPersistence:var",
          "docComment": "/**\n * An implementation of {@link Persistence} of type 'NONE'.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "inMemoryPersistence: "
            },
            {
              "kind": "Reference",
              "text": "Persistence",
              "canonicalReference": "@firebase/auth!Persistence:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "inMemoryPersistence",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!isSignInWithEmailLink:function(1)",
          "docComment": "/**\n * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param emailLink - The link sent to the user's email address.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSignInWithEmailLink(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", emailLink: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "emailLink",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "isSignInWithEmailLink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!linkWithCredential:function(1)",
          "docComment": "/**\n * Links the user account with the given credentials.\n *\n * @remarks\n *\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * @param user - The user.\n *\n * @param credential - The auth credential.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function linkWithCredential(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ", credential: "
            },
            {
              "kind": "Reference",
              "text": "AuthCredential",
              "canonicalReference": "@firebase/auth!AuthCredential:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UserCredential",
              "canonicalReference": "@firebase/auth!UserCredential:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "credential",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "linkWithCredential"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!linkWithPhoneNumber:function(1)",
          "docComment": "/**\n * Links the user account with the given phone number.\n *\n * @remarks\n *\n * This method does not work in a Node.js environment.\n *\n * @param user - The user.\n *\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n *\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function linkWithPhoneNumber(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ", phoneNumber: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", appVerifier: "
            },
            {
              "kind": "Reference",
              "text": "ApplicationVerifier",
              "canonicalReference": "@firebase/auth!ApplicationVerifier:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ConfirmationResult",
              "canonicalReference": "@firebase/auth!ConfirmationResult:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "phoneNumber",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "appVerifier",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "linkWithPhoneNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!linkWithPopup:function(1)",
          "docComment": "/**\n * Links the authenticated provider to the user account using a pop-up based OAuth flow.\n *\n * @remarks\n *\n * If the linking is successful, the returned result will contain the user and the provider's credential.\n *\n * This method does not work in a Node.js environment.\n *\n * @param user - The user.\n *\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}. Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n *\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @example\n * ```javascript\n * // Sign in using some other provider.\n * const result = await signInWithEmailAndPassword(auth, email, password);\n * // Link using a popup.\n * const provider = new FacebookAuthProvider();\n * await linkWithPopup(result.user, provider);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function linkWithPopup(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ", provider: "
            },
            {
              "kind": "Reference",
              "text": "AuthProvider",
              "canonicalReference": "@firebase/auth!AuthProvider:interface"
            },
            {
              "kind": "Content",
              "text": ", resolver?: "
            },
            {
              "kind": "Reference",
              "text": "PopupRedirectResolver",
              "canonicalReference": "@firebase/auth!PopupRedirectResolver:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UserCredential",
              "canonicalReference": "@firebase/auth!UserCredential:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "provider",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "resolver",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "linkWithPopup"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!linkWithRedirect:function(1)",
          "docComment": "/**\n * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.\n *\n * @remarks\n *\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}. Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices | best practices} when using {@link linkWithRedirect}.\n *\n * This method does not work in a Node.js environment.\n *\n * @param user - The user.\n *\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}. Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n *\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @example\n * ```javascript\n * // Sign in using some other provider.\n * const result = await signInWithEmailAndPassword(auth, email, password);\n * // Link using a redirect.\n * const provider = new FacebookAuthProvider();\n * await linkWithRedirect(result.user, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function linkWithRedirect(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ", provider: "
            },
            {
              "kind": "Reference",
              "text": "AuthProvider",
              "canonicalReference": "@firebase/auth!AuthProvider:interface"
            },
            {
              "kind": "Content",
              "text": ", resolver?: "
            },
            {
              "kind": "Reference",
              "text": "PopupRedirectResolver",
              "canonicalReference": "@firebase/auth!PopupRedirectResolver:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<never>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "provider",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "resolver",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "linkWithRedirect"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!multiFactor:function(1)",
          "docComment": "/**\n * The {@link MultiFactorUser} corresponding to the user.\n *\n * @remarks\n *\n * This is used to access all multi-factor properties and operations related to the user.\n *\n * @param user - The user.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function multiFactor(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "MultiFactorUser",
              "canonicalReference": "@firebase/auth!MultiFactorUser:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "multiFactor"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!MultiFactorAssertion:interface",
          "docComment": "/**\n * The base class for asserting ownership of a second factor.\n *\n * @remarks\n *\n * This is used to facilitate enrollment of a second factor on an existing user or sign-in of a user who already verified the first factor.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MultiFactorAssertion "
            }
          ],
          "releaseTag": "Public",
          "name": "MultiFactorAssertion",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!MultiFactorAssertion#factorId:member",
              "docComment": "/**\n * The identifier of the second factor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly factorId: "
                },
                {
                  "kind": "Content",
                  "text": "(typeof "
                },
                {
                  "kind": "Reference",
                  "text": "FactorIdMap",
                  "canonicalReference": "@firebase/auth!FactorId:var"
                },
                {
                  "kind": "Content",
                  "text": ")[keyof typeof "
                },
                {
                  "kind": "Reference",
                  "text": "FactorIdMap",
                  "canonicalReference": "@firebase/auth!FactorId:var"
                },
                {
                  "kind": "Content",
                  "text": "]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "factorId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!MultiFactorError:interface",
          "docComment": "/**\n * The error thrown when the user needs to provide a second factor to sign in successfully.\n *\n * @remarks\n *\n * The error code for this error is `auth/multi-factor-auth-required`.\n *\n * @example\n * ```javascript\n * let resolver;\n * let multiFactorHints;\n *\n * signInWithEmailAndPassword(auth, email, password)\n *     .then((result) => {\n *       // User signed in. No 2nd factor challenge is needed.\n *     })\n *     .catch((error) => {\n *       if (error.code == 'auth/multi-factor-auth-required') {\n *         resolver = getMultiFactorResolver(auth, error);\n *         multiFactorHints = resolver.hints;\n *       } else {\n *         // Handle other errors.\n *       }\n *     });\n *\n * // Obtain a multiFactorAssertion by verifying the second factor.\n *\n * const userCredential = await resolver.resolveSignIn(multiFactorAssertion);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MultiFactorError extends "
            },
            {
              "kind": "Reference",
              "text": "AuthError",
              "canonicalReference": "@firebase/auth!AuthError:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "MultiFactorError",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!MultiFactorError#customData:member",
              "docComment": "/**\n * Details about the MultiFactorError.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly customData: "
                },
                {
                  "kind": "Reference",
                  "text": "AuthError",
                  "canonicalReference": "@firebase/auth!AuthError:interface"
                },
                {
                  "kind": "Content",
                  "text": "['customData'] & {\n        readonly operationType: (typeof "
                },
                {
                  "kind": "Reference",
                  "text": "OperationTypeMap",
                  "canonicalReference": "@firebase/auth!OperationType:var"
                },
                {
                  "kind": "Content",
                  "text": ")[keyof typeof "
                },
                {
                  "kind": "Reference",
                  "text": "OperationTypeMap",
                  "canonicalReference": "@firebase/auth!OperationType:var"
                },
                {
                  "kind": "Content",
                  "text": "];\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "customData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!MultiFactorInfo:interface",
          "docComment": "/**\n * A structure containing the information of a second factor entity.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MultiFactorInfo "
            }
          ],
          "releaseTag": "Public",
          "name": "MultiFactorInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!MultiFactorInfo#displayName:member",
              "docComment": "/**\n * The user friendly name of the current second factor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly displayName?: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "displayName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!MultiFactorInfo#enrollmentTime:member",
              "docComment": "/**\n * The enrollment date of the second factor formatted as a UTC string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly enrollmentTime: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "enrollmentTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!MultiFactorInfo#factorId:member",
              "docComment": "/**\n * The identifier of the second factor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly factorId: "
                },
                {
                  "kind": "Content",
                  "text": "(typeof "
                },
                {
                  "kind": "Reference",
                  "text": "FactorIdMap",
                  "canonicalReference": "@firebase/auth!FactorId:var"
                },
                {
                  "kind": "Content",
                  "text": ")[keyof typeof "
                },
                {
                  "kind": "Reference",
                  "text": "FactorIdMap",
                  "canonicalReference": "@firebase/auth!FactorId:var"
                },
                {
                  "kind": "Content",
                  "text": "]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "factorId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!MultiFactorInfo#uid:member",
              "docComment": "/**\n * The multi-factor enrollment ID.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly uid: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "uid",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!MultiFactorResolver:interface",
          "docComment": "/**\n * The class used to facilitate recovery from {@link MultiFactorError} when a user needs to provide a second factor to sign in.\n *\n * @example\n * ```javascript\n * let resolver;\n * let multiFactorHints;\n *\n * signInWithEmailAndPassword(auth, email, password)\n *     .then((result) => {\n *       // User signed in. No 2nd factor challenge is needed.\n *     })\n *     .catch((error) => {\n *       if (error.code == 'auth/multi-factor-auth-required') {\n *         resolver = getMultiFactorResolver(auth, error);\n *         // Show UI to let user select second factor.\n *         multiFactorHints = resolver.hints;\n *       } else {\n *         // Handle other errors.\n *       }\n *     });\n *\n * // The enrolled second factors that can be used to complete\n * // sign-in are returned in the `MultiFactorResolver.hints` list.\n * // UI needs to be presented to allow the user to select a second factor\n * // from that list.\n *\n * const selectedHint = // ; selected from multiFactorHints\n * const phoneAuthProvider = new PhoneAuthProvider(auth);\n * const phoneInfoOptions = {\n *   multiFactorHint: selectedHint,\n *   session: resolver.session\n * };\n * const verificationId = phoneAuthProvider.verifyPhoneNumber(phoneInfoOptions, appVerifier);\n * // Store `verificationId` and show UI to let user enter verification code.\n *\n * // UI to enter verification code and continue.\n * // Continue button click handler\n * const phoneAuthCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * const multiFactorAssertion = PhoneMultiFactorGenerator.assertion(phoneAuthCredential);\n * const userCredential = await resolver.resolveSignIn(multiFactorAssertion);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MultiFactorResolver "
            }
          ],
          "releaseTag": "Public",
          "name": "MultiFactorResolver",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!MultiFactorResolver#hints:member",
              "docComment": "/**\n * The list of hints for the second factors needed to complete the sign-in for the current session.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly hints: "
                },
                {
                  "kind": "Reference",
                  "text": "MultiFactorInfo",
                  "canonicalReference": "@firebase/auth!MultiFactorInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hints",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!MultiFactorResolver#resolveSignIn:member(1)",
              "docComment": "/**\n * A helper function to help users complete sign in with a second factor using an {@link MultiFactorAssertion} confirming the user successfully completed the second factor challenge.\n *\n * @param assertion - The multi-factor assertion to resolve sign-in with.\n *\n * @returns The promise that resolves with the user credential object.\n *\n * @example\n * ```javascript\n * const phoneAuthCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * const multiFactorAssertion = PhoneMultiFactorGenerator.assertion(phoneAuthCredential);\n * const userCredential = await resolver.resolveSignIn(multiFactorAssertion);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resolveSignIn(assertion: "
                },
                {
                  "kind": "Reference",
                  "text": "MultiFactorAssertion",
                  "canonicalReference": "@firebase/auth!MultiFactorAssertion:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UserCredential",
                  "canonicalReference": "@firebase/auth!UserCredential:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "assertion",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "resolveSignIn"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!MultiFactorResolver#session:member",
              "docComment": "/**\n * The session identifier for the current sign-in flow, which can be used to complete the second factor sign-in.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly session: "
                },
                {
                  "kind": "Reference",
                  "text": "MultiFactorSession",
                  "canonicalReference": "@firebase/auth!MultiFactorSession:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "session",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!MultiFactorSession:interface",
          "docComment": "/**\n * An interface defining the multi-factor session object used for enrolling a second factor on a user or helping sign in an enrolled user with a second factor.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MultiFactorSession "
            }
          ],
          "releaseTag": "Public",
          "name": "MultiFactorSession",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!MultiFactorUser:interface",
          "docComment": "/**\n * An interface that defines the multi-factor related properties and operations pertaining to a {@link User}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MultiFactorUser "
            }
          ],
          "releaseTag": "Public",
          "name": "MultiFactorUser",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!MultiFactorUser#enroll:member(1)",
              "docComment": "/**\n * Enrolls a second factor as identified by the {@link MultiFactorAssertion} for the user.\n *\n * @remarks\n *\n * On resolution, the user tokens are updated to reflect the change in the JWT payload. Accepts an additional display name parameter used to identify the second factor to the end user. Recent re-authentication is required for this operation to succeed. On successful enrollment, existing Firebase sessions (refresh tokens) are revoked. When a new factor is enrolled, an email notification is sent to the user’s email.\n *\n * @param assertion - The multi-factor assertion to enroll with.\n *\n * @param displayName - The display name of the second factor.\n *\n * @example\n * ```javascript\n * const multiFactorUser = multiFactor(auth.currentUser);\n * const multiFactorSession = await multiFactorUser.getSession();\n *\n * // Send verification code.\n * const phoneAuthProvider = new PhoneAuthProvider(auth);\n * const phoneInfoOptions = {\n *   phoneNumber: phoneNumber,\n *   session: multiFactorSession\n * };\n * const verificationId = await phoneAuthProvider.verifyPhoneNumber(phoneInfoOptions, appVerifier);\n *\n * // Obtain verification code from user.\n * const phoneAuthCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * const multiFactorAssertion = PhoneMultiFactorGenerator.assertion(phoneAuthCredential);\n * await multiFactorUser.enroll(multiFactorAssertion);\n * // Second factor enrolled.\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enroll(assertion: "
                },
                {
                  "kind": "Reference",
                  "text": "MultiFactorAssertion",
                  "canonicalReference": "@firebase/auth!MultiFactorAssertion:interface"
                },
                {
                  "kind": "Content",
                  "text": ", displayName?: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "assertion",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "displayName",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "enroll"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!MultiFactorUser#enrolledFactors:member",
              "docComment": "/**\n * Returns a list of the user's enrolled second factors.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly enrolledFactors: "
                },
                {
                  "kind": "Reference",
                  "text": "MultiFactorInfo",
                  "canonicalReference": "@firebase/auth!MultiFactorInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "enrolledFactors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!MultiFactorUser#getSession:member(1)",
              "docComment": "/**\n * Returns the session identifier for a second factor enrollment operation. This is used to identify the user trying to enroll a second factor.\n *\n * @returns The promise that resolves with the {@link MultiFactorSession}.\n *\n * @example\n * ```javascript\n * const multiFactorUser = multiFactor(auth.currentUser);\n * const multiFactorSession = await multiFactorUser.getSession();\n *\n * // Send verification code.\n * const phoneAuthProvider = new PhoneAuthProvider(auth);\n * const phoneInfoOptions = {\n *   phoneNumber: phoneNumber,\n *   session: multiFactorSession\n * };\n * const verificationId = await phoneAuthProvider.verifyPhoneNumber(phoneInfoOptions, appVerifier);\n *\n * // Obtain verification code from user.\n * const phoneAuthCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * const multiFactorAssertion = PhoneMultiFactorGenerator.assertion(phoneAuthCredential);\n * await multiFactorUser.enroll(multiFactorAssertion);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSession(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "MultiFactorSession",
                  "canonicalReference": "@firebase/auth!MultiFactorSession:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getSession"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!MultiFactorUser#unenroll:member(1)",
              "docComment": "/**\n * Unenrolls the specified second factor.\n *\n * @remarks\n *\n * To specify the factor to remove, pass a {@link MultiFactorInfo} object (retrieved from {@link MultiFactorUser.enrolledFactors}) or the factor's UID string. Sessions are not revoked when the account is unenrolled. An email notification is likely to be sent to the user notifying them of the change. Recent re-authentication is required for this operation to succeed. When an existing factor is unenrolled, an email notification is sent to the user’s email.\n *\n * @param option - The multi-factor option to unenroll.\n *\n * @returns - A `Promise` which resolves when the unenroll operation is complete.\n *\n * @example\n * ```javascript\n * const multiFactorUser = multiFactor(auth.currentUser);\n * // Present user the option to choose which factor to unenroll.\n * await multiFactorUser.unenroll(multiFactorUser.enrolledFactors[i])\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unenroll(option: "
                },
                {
                  "kind": "Reference",
                  "text": "MultiFactorInfo",
                  "canonicalReference": "@firebase/auth!MultiFactorInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "option",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "unenroll"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@firebase/auth!NextOrObserver:type",
          "docComment": "/**\n * Type definition for an event callback.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type NextOrObserver<T> = "
            },
            {
              "kind": "Reference",
              "text": "NextFn",
              "canonicalReference": "@firebase/util!NextFn:type"
            },
            {
              "kind": "Content",
              "text": "<T | null> | "
            },
            {
              "kind": "Reference",
              "text": "Observer",
              "canonicalReference": "@firebase/util!Observer:interface"
            },
            {
              "kind": "Content",
              "text": "<T | null>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "NextOrObserver",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/auth!OAuthCredential:class",
          "docComment": "/**\n * Represents the OAuth credentials returned by an {@link OAuthProvider}.\n *\n * @remarks\n *\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class OAuthCredential extends "
            },
            {
              "kind": "Reference",
              "text": "AuthCredential",
              "canonicalReference": "@firebase/auth!AuthCredential:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "OAuthCredential",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!OAuthCredential#accessToken:member",
              "docComment": "/**\n * The OAuth access token associated with the credential if it belongs to an {@link OAuthProvider}, such as `facebook.com`, `twitter.com`, etc.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessToken?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "accessToken",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!OAuthCredential.fromJSON:member(1)",
              "docComment": "/**\n * Static method to deserialize a JSON representation of an object into an {@link AuthCredential}.\n *\n * @param json - Input can be either Object or the stringified representation of the object. When string is provided, JSON.parse would be called first.\n *\n * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromJSON(json: "
                },
                {
                  "kind": "Content",
                  "text": "string | object"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredential",
                  "canonicalReference": "@firebase/auth!OAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "json",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromJSON"
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!OAuthCredential#idToken:member",
              "docComment": "/**\n * The OAuth ID token associated with the credential if it belongs to an OIDC provider, such as `google.com`.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "idToken?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "idToken",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!OAuthCredential#secret:member",
              "docComment": "/**\n * The OAuth access token secret associated with the credential if it belongs to an OAuth 1.0 provider, such as `twitter.com`.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "secret?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "secret",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!OAuthCredential#toJSON:member(1)",
              "docComment": "/**\n * Returns a JSON-serializable representation of this object.\n *\n * @returns a JSON-serializable representation of this object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toJSON"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!OAuthCredentialOptions:interface",
          "docComment": "/**\n * Defines the options for initializing an {@link OAuthCredential}.\n *\n * @remarks\n *\n * For ID tokens with nonce claim, the raw nonce has to also be provided.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface OAuthCredentialOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "OAuthCredentialOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!OAuthCredentialOptions#accessToken:member",
              "docComment": "/**\n * The OAuth access token used to initialize the {@link OAuthCredential}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessToken?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "accessToken",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!OAuthCredentialOptions#idToken:member",
              "docComment": "/**\n * The OAuth ID token used to initialize the {@link OAuthCredential}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "idToken?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "idToken",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!OAuthCredentialOptions#rawNonce:member",
              "docComment": "/**\n * The raw nonce associated with the ID token.\n *\n * @remarks\n *\n * It is required when an ID token with a nonce field is provided. The SHA-256 hash of the raw nonce must match the nonce field in the ID token.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rawNonce?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "rawNonce",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/auth!OAuthProvider:class",
          "docComment": "/**\n * Provider for generating generic {@link OAuthCredential}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new OAuthProvider('google.com');\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a OAuth Access Token for the provider.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new OAuthProvider('google.com');\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a OAuth Access Token for the provider.\n * const credential = provider.credentialFromResult(auth, result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class OAuthProvider extends "
            },
            {
              "kind": "Reference",
              "text": "BaseOAuthProvider",
              "canonicalReference": "@firebase/auth!BaseOAuthProvider:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "OAuthProvider",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!OAuthProvider#credential:member(1)",
              "docComment": "/**\n * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n *\n * @remarks\n *\n * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of the raw nonce must match the nonce field in the ID token.\n *\n * @param params - Either the options object containing the ID token, access token and raw nonce or the ID token string.\n *\n * @example\n * ```javascript\n * // `googleUser` from the onsuccess Google Sign In callback.\n * // Initialize a generate OAuth provider with a `google.com` providerId.\n * const provider = new OAuthProvider('google.com');\n * const credential = provider.credential({\n *   idToken: googleUser.getAuthResponse().id_token,\n * });\n * const result = await signInWithCredential(credential);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "credential(params: "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredentialOptions",
                  "canonicalReference": "@firebase/auth!OAuthCredentialOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredential",
                  "canonicalReference": "@firebase/auth!OAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credential"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!OAuthProvider.credentialFromError:member(1)",
              "docComment": "/**\n * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was thrown during a sign-in, link, or reauthenticate operation.\n *\n * @param userCredential - The user credential.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credentialFromError(error: "
                },
                {
                  "kind": "Reference",
                  "text": "FirebaseError",
                  "canonicalReference": "@firebase/util!FirebaseError:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredential",
                  "canonicalReference": "@firebase/auth!OAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credentialFromError"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!OAuthProvider.credentialFromJSON:member(1)",
              "docComment": "/**\n * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n *\n * @param json - A plain object or a JSON string\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credentialFromJSON(json: "
                },
                {
                  "kind": "Content",
                  "text": "object | string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredential",
                  "canonicalReference": "@firebase/auth!OAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "json",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credentialFromJSON"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!OAuthProvider.credentialFromResult:member(1)",
              "docComment": "/**\n * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n *\n * @param userCredential - The user credential.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credentialFromResult(userCredential: "
                },
                {
                  "kind": "Reference",
                  "text": "UserCredential",
                  "canonicalReference": "@firebase/auth!UserCredential:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredential",
                  "canonicalReference": "@firebase/auth!OAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userCredential",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credentialFromResult"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!onAuthStateChanged:function(1)",
          "docComment": "/**\n * Adds an observer for changes to the user's sign-in state.\n *\n * @remarks\n *\n * To keep the old behavior, see {@link onIdTokenChanged}.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param nextOrObserver - callback triggered on change.\n *\n * @param error - Deprecated. This callback is never triggered. Errors on signing in/out can be caught in promises returned from sign-in/sign-out functions.\n *\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onAuthStateChanged(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", nextOrObserver: "
            },
            {
              "kind": "Reference",
              "text": "NextOrObserver",
              "canonicalReference": "@firebase/auth!NextOrObserver:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", error?: "
            },
            {
              "kind": "Reference",
              "text": "ErrorFn",
              "canonicalReference": "@firebase/util!ErrorFn:type"
            },
            {
              "kind": "Content",
              "text": ", completed?: "
            },
            {
              "kind": "Reference",
              "text": "CompleteFn",
              "canonicalReference": "@firebase/util!CompleteFn:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/util!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "nextOrObserver",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              }
            },
            {
              "parameterName": "error",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            },
            {
              "parameterName": "completed",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              }
            }
          ],
          "name": "onAuthStateChanged"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!onIdTokenChanged:function(1)",
          "docComment": "/**\n * Adds an observer for changes to the signed-in user's ID token.\n *\n * @remarks\n *\n * This includes sign-in, sign-out, and token refresh events. This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param nextOrObserver - callback triggered on change.\n *\n * @param error - Deprecated. This callback is never triggered. Errors on signing in/out can be caught in promises returned from sign-in/sign-out functions.\n *\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onIdTokenChanged(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", nextOrObserver: "
            },
            {
              "kind": "Reference",
              "text": "NextOrObserver",
              "canonicalReference": "@firebase/auth!NextOrObserver:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", error?: "
            },
            {
              "kind": "Reference",
              "text": "ErrorFn",
              "canonicalReference": "@firebase/util!ErrorFn:type"
            },
            {
              "kind": "Content",
              "text": ", completed?: "
            },
            {
              "kind": "Reference",
              "text": "CompleteFn",
              "canonicalReference": "@firebase/util!CompleteFn:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Unsubscribe",
              "canonicalReference": "@firebase/util!Unsubscribe:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "nextOrObserver",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              }
            },
            {
              "parameterName": "error",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            },
            {
              "parameterName": "completed",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              }
            }
          ],
          "name": "onIdTokenChanged"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@firebase/auth!OperationType:var",
          "docComment": "/**\n * Enumeration of supported operation types.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "OperationType: "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly LINK: \"link\";\n    readonly REAUTHENTICATE: \"reauthenticate\";\n    readonly SIGN_IN: \"signIn\";\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "OperationType",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!parseActionCodeURL:function(1)",
          "docComment": "/**\n * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid, otherwise returns null.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseActionCodeURL(link: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ActionCodeURL",
              "canonicalReference": "@firebase/auth!ActionCodeURL:class"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "link",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "parseActionCodeURL"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!ParsedToken:interface",
          "docComment": "/**\n * Interface representing a parsed ID token.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ParsedToken "
            }
          ],
          "releaseTag": "Public",
          "name": "ParsedToken",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@firebase/auth!ParsedToken:index(1)",
              "docComment": "/**\n * Map of any additional custom claims.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!ParsedToken#auth_time:member",
              "docComment": "/**\n * Time at which authentication was performed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'auth_time'?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "auth_time",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!ParsedToken#exp:member",
              "docComment": "/**\n * Expiration time of the token.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'exp'?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "exp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!ParsedToken#firebase:member",
              "docComment": "/**\n * Firebase specific claims, containing the provider(s) used to authenticate the user.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'firebase'?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        'sign_in_provider'?: string;\n        'sign_in_second_factor'?: string;\n        'identities'?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "firebase",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!ParsedToken#iat:member",
              "docComment": "/**\n * Issuance time of the token.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'iat'?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "iat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!ParsedToken#sub:member",
              "docComment": "/**\n * UID of the user.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'sub'?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "sub",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!PasswordPolicy:interface",
          "docComment": "/**\n * A structure specifying password policy requirements.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PasswordPolicy "
            }
          ],
          "releaseTag": "Public",
          "name": "PasswordPolicy",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PasswordPolicy#allowedNonAlphanumericCharacters:member",
              "docComment": "/**\n * List of characters that are considered non-alphanumeric during validation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly allowedNonAlphanumericCharacters: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "allowedNonAlphanumericCharacters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PasswordPolicy#customStrengthOptions:member",
              "docComment": "/**\n * Requirements enforced by this password policy.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly customStrengthOptions: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readonly minPasswordLength?: number;\n        readonly maxPasswordLength?: number;\n        readonly containsLowercaseLetter?: boolean;\n        readonly containsUppercaseLetter?: boolean;\n        readonly containsNumericCharacter?: boolean;\n        readonly containsNonAlphanumericCharacter?: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "customStrengthOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PasswordPolicy#enforcementState:member",
              "docComment": "/**\n * The enforcement state of the policy. Can be 'OFF' or 'ENFORCE'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly enforcementState: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "enforcementState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PasswordPolicy#forceUpgradeOnSignin:member",
              "docComment": "/**\n * Whether existing passwords must meet the policy.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly forceUpgradeOnSignin: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "forceUpgradeOnSignin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!PasswordValidationStatus:interface",
          "docComment": "/**\n * A structure indicating which password policy requirements were met or violated and what the requirements are.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PasswordValidationStatus "
            }
          ],
          "releaseTag": "Public",
          "name": "PasswordValidationStatus",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PasswordValidationStatus#containsLowercaseLetter:member",
              "docComment": "/**\n * Whether the password contains a lowercase letter, or undefined if not required.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly containsLowercaseLetter?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "containsLowercaseLetter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PasswordValidationStatus#containsNonAlphanumericCharacter:member",
              "docComment": "/**\n * Whether the password contains a non-alphanumeric character, or undefined if not required.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly containsNonAlphanumericCharacter?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "containsNonAlphanumericCharacter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PasswordValidationStatus#containsNumericCharacter:member",
              "docComment": "/**\n * Whether the password contains a numeric character, or undefined if not required.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly containsNumericCharacter?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "containsNumericCharacter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PasswordValidationStatus#containsUppercaseLetter:member",
              "docComment": "/**\n * Whether the password contains an uppercase letter, or undefined if not required.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly containsUppercaseLetter?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "containsUppercaseLetter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PasswordValidationStatus#isValid:member",
              "docComment": "/**\n * Whether the password meets all requirements.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly isValid: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isValid",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PasswordValidationStatus#meetsMaxPasswordLength:member",
              "docComment": "/**\n * Whether the password meets the maximum password length, or undefined if not required.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly meetsMaxPasswordLength?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "meetsMaxPasswordLength",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PasswordValidationStatus#meetsMinPasswordLength:member",
              "docComment": "/**\n * Whether the password meets the minimum password length, or undefined if not required.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly meetsMinPasswordLength?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "meetsMinPasswordLength",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PasswordValidationStatus#passwordPolicy:member",
              "docComment": "/**\n * The policy used to validate the password.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly passwordPolicy: "
                },
                {
                  "kind": "Reference",
                  "text": "PasswordPolicy",
                  "canonicalReference": "@firebase/auth!PasswordPolicy:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "passwordPolicy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!Persistence:interface",
          "docComment": "/**\n * An interface covering the possible persistence mechanism types.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Persistence "
            }
          ],
          "releaseTag": "Public",
          "name": "Persistence",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!Persistence#type:member",
              "docComment": "/**\n * Type of Persistence. - 'SESSION' is used for temporary persistence such as `sessionStorage`. - 'LOCAL' is used for long term persistence such as `localStorage` or `IndexedDB`. - 'NONE' is used for in-memory, or no persistence.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Content",
                  "text": "'SESSION' | 'LOCAL' | 'NONE'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/auth!PhoneAuthCredential:class",
          "docComment": "/**\n * Represents the credentials returned by {@link PhoneAuthProvider}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PhoneAuthCredential extends "
            },
            {
              "kind": "Reference",
              "text": "AuthCredential",
              "canonicalReference": "@firebase/auth!AuthCredential:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PhoneAuthCredential",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!PhoneAuthCredential.fromJSON:member(1)",
              "docComment": "/**\n * Generates a phone credential based on a plain object or a JSON string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromJSON(json: "
                },
                {
                  "kind": "Content",
                  "text": "object | string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PhoneAuthCredential",
                  "canonicalReference": "@firebase/auth!PhoneAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "json",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromJSON"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!PhoneAuthCredential#toJSON:member(1)",
              "docComment": "/**\n * Returns a JSON-serializable representation of this object.\n *\n * @returns a JSON-serializable representation of this object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toJSON"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/auth!PhoneAuthProvider:class",
          "docComment": "/**\n * Provider for generating an {@link PhoneAuthCredential}.\n *\n * @remarks\n *\n * `PhoneAuthProvider` does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n * // Obtain the verificationCode from the user.\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * const userCredential = await signInWithCredential(auth, phoneCredential);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PhoneAuthProvider "
            }
          ],
          "releaseTag": "Public",
          "name": "PhoneAuthProvider",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@firebase/auth!PhoneAuthProvider:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `PhoneAuthProvider` class\n *\n * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(auth: "
                },
                {
                  "kind": "Reference",
                  "text": "Auth",
                  "canonicalReference": "@firebase/auth!Auth:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "auth",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!PhoneAuthProvider.credential:member(1)",
              "docComment": "/**\n * Creates a phone auth credential, given the verification ID from {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's mobile device.\n *\n * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\n *\n * @param verificationCode - The verification code sent to the user's mobile device.\n *\n * @returns The auth provider credential.\n *\n * @example\n * ```javascript\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n * // Obtain verificationCode from the user.\n * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * const userCredential = signInWithCredential(auth, authCredential);\n * ```\n *\n * @example\n *\n * An alternative flow is provided using the `signInWithPhoneNumber` method.\n * ```javascript\n * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n * // Obtain verificationCode from the user.\n * const userCredential = await confirmationResult.confirm(verificationCode);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credential(verificationId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", verificationCode: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PhoneAuthCredential",
                  "canonicalReference": "@firebase/auth!PhoneAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "verificationId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "verificationCode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "credential"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!PhoneAuthProvider.credentialFromError:member(1)",
              "docComment": "/**\n * Returns an {@link AuthCredential} when passed an error.\n *\n * @remarks\n *\n * This method works for errors like `auth/account-exists-with-different-credentials`. This is useful for recovering when attempting to set a user's phone number but the number in question is already tied to another account. For example, the following code tries to update the current user's phone number, and if that fails, links the user with the account associated with that number:\n * ```js\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber(number, verifier);\n * try {\n *   const code = ''; // Prompt the user for the verification code\n *   await updatePhoneNumber(\n *       auth.currentUser,\n *       PhoneAuthProvider.credential(verificationId, code));\n * } catch (e) {\n *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\n *     const cred = PhoneAuthProvider.credentialFromError(e);\n *     await linkWithCredential(auth.currentUser, cred);\n *   }\n * }\n *\n * // At this point, auth.currentUser.phoneNumber === number.\n * ```\n *\n * @param error - The error to generate a credential from.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credentialFromError(error: "
                },
                {
                  "kind": "Reference",
                  "text": "FirebaseError",
                  "canonicalReference": "@firebase/util!FirebaseError:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AuthCredential",
                  "canonicalReference": "@firebase/auth!AuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credentialFromError"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!PhoneAuthProvider.credentialFromResult:member(1)",
              "docComment": "/**\n * Generates an {@link AuthCredential} from a {@link UserCredential}.\n *\n * @param userCredential - The user credential.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credentialFromResult(userCredential: "
                },
                {
                  "kind": "Reference",
                  "text": "UserCredential",
                  "canonicalReference": "@firebase/auth!UserCredential:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AuthCredential",
                  "canonicalReference": "@firebase/auth!AuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userCredential",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credentialFromResult"
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!PhoneAuthProvider.PHONE_SIGN_IN_METHOD:member",
              "docComment": "/**\n * Always set to {@link SignInMethod}.PHONE.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly PHONE_SIGN_IN_METHOD: "
                },
                {
                  "kind": "Content",
                  "text": "'phone'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "PHONE_SIGN_IN_METHOD",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!PhoneAuthProvider.PROVIDER_ID:member",
              "docComment": "/**\n * Always set to {@link ProviderId}.PHONE.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly PROVIDER_ID: "
                },
                {
                  "kind": "Content",
                  "text": "'phone'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "PROVIDER_ID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!PhoneAuthProvider#providerId:member",
              "docComment": "/**\n * Always set to {@link ProviderId}.PHONE.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly providerId: "
                },
                {
                  "kind": "Content",
                  "text": "\"phone\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "providerId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!PhoneAuthProvider#verifyPhoneNumber:member(1)",
              "docComment": "/**\n * Starts a phone number authentication flow by sending a verification code to the given phone number.\n *\n * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in E.164 format (e.g. +16505550101).\n *\n * @param applicationVerifier - For abuse prevention, this method also requires a {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.\n *\n * @returns A Promise for a verification ID that can be passed to {@link PhoneAuthProvider.credential} to identify this flow..\n *\n * @example\n * ```javascript\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n * // Obtain verificationCode from the user.\n * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * const userCredential = await signInWithCredential(auth, authCredential);\n * ```\n *\n * @example\n *\n * An alternative flow is provided using the `signInWithPhoneNumber` method.\n * ```javascript\n * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n * // Obtain verificationCode from the user.\n * const userCredential = confirmationResult.confirm(verificationCode);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "verifyPhoneNumber(phoneOptions: "
                },
                {
                  "kind": "Reference",
                  "text": "PhoneInfoOptions",
                  "canonicalReference": "@firebase/auth!PhoneInfoOptions:type"
                },
                {
                  "kind": "Content",
                  "text": " | string"
                },
                {
                  "kind": "Content",
                  "text": ", applicationVerifier: "
                },
                {
                  "kind": "Reference",
                  "text": "ApplicationVerifier",
                  "canonicalReference": "@firebase/auth!ApplicationVerifier:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "phoneOptions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "applicationVerifier",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "verifyPhoneNumber"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@firebase/auth!PhoneInfoOptions:type",
          "docComment": "/**\n * The information required to verify the ownership of a phone number.\n *\n * @remarks\n *\n * The information that's required depends on whether you are doing single-factor sign-in, multi-factor enrollment or multi-factor sign-in.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PhoneInfoOptions = "
            },
            {
              "kind": "Reference",
              "text": "PhoneSingleFactorInfoOptions",
              "canonicalReference": "@firebase/auth!PhoneSingleFactorInfoOptions:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "PhoneMultiFactorEnrollInfoOptions",
              "canonicalReference": "@firebase/auth!PhoneMultiFactorEnrollInfoOptions:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "PhoneMultiFactorSignInInfoOptions",
              "canonicalReference": "@firebase/auth!PhoneMultiFactorSignInInfoOptions:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PhoneInfoOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!PhoneMultiFactorAssertion:interface",
          "docComment": "/**\n * The class for asserting ownership of a phone second factor. Provided by {@link PhoneMultiFactorGenerator.assertion}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PhoneMultiFactorAssertion extends "
            },
            {
              "kind": "Reference",
              "text": "MultiFactorAssertion",
              "canonicalReference": "@firebase/auth!MultiFactorAssertion:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PhoneMultiFactorAssertion",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!PhoneMultiFactorEnrollInfoOptions:interface",
          "docComment": "/**\n * Options used for enrolling a second factor.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PhoneMultiFactorEnrollInfoOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "PhoneMultiFactorEnrollInfoOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PhoneMultiFactorEnrollInfoOptions#phoneNumber:member",
              "docComment": "/**\n * Phone number to send a verification code to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "phoneNumber: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "phoneNumber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PhoneMultiFactorEnrollInfoOptions#session:member",
              "docComment": "/**\n * The {@link MultiFactorSession} obtained via {@link MultiFactorUser.getSession}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "session: "
                },
                {
                  "kind": "Reference",
                  "text": "MultiFactorSession",
                  "canonicalReference": "@firebase/auth!MultiFactorSession:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "session",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/auth!PhoneMultiFactorGenerator:class",
          "docComment": "/**\n * Provider for generating a {@link PhoneMultiFactorAssertion}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PhoneMultiFactorGenerator "
            }
          ],
          "releaseTag": "Public",
          "name": "PhoneMultiFactorGenerator",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!PhoneMultiFactorGenerator.assertion:member(1)",
              "docComment": "/**\n * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\n *\n * @remarks\n *\n * This method does not work in a Node.js environment.\n *\n * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\n *\n * @returns A {@link PhoneMultiFactorAssertion} which can be used with {@link MultiFactorResolver.resolveSignIn}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static assertion(credential: "
                },
                {
                  "kind": "Reference",
                  "text": "PhoneAuthCredential",
                  "canonicalReference": "@firebase/auth!PhoneAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PhoneMultiFactorAssertion",
                  "canonicalReference": "@firebase/auth!PhoneMultiFactorAssertion:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "credential",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "assertion"
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!PhoneMultiFactorGenerator.FACTOR_ID:member",
              "docComment": "/**\n * The identifier of the phone second factor: `phone`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FACTOR_ID: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "FACTOR_ID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!PhoneMultiFactorInfo:interface",
          "docComment": "/**\n * The subclass of the {@link MultiFactorInfo} interface for phone number second factors. The `factorId` of this second factor is {@link FactorId}.PHONE.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PhoneMultiFactorInfo extends "
            },
            {
              "kind": "Reference",
              "text": "MultiFactorInfo",
              "canonicalReference": "@firebase/auth!MultiFactorInfo:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PhoneMultiFactorInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PhoneMultiFactorInfo#phoneNumber:member",
              "docComment": "/**\n * The phone number associated with the current second factor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly phoneNumber: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "phoneNumber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!PhoneMultiFactorSignInInfoOptions:interface",
          "docComment": "/**\n * Options used for signing in with a second factor.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PhoneMultiFactorSignInInfoOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "PhoneMultiFactorSignInInfoOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PhoneMultiFactorSignInInfoOptions#multiFactorHint:member",
              "docComment": "/**\n * The {@link MultiFactorInfo} obtained via {@link MultiFactorResolver.hints}.\n *\n * One of `multiFactorHint` or `multiFactorUid` is required.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiFactorHint?: "
                },
                {
                  "kind": "Reference",
                  "text": "MultiFactorInfo",
                  "canonicalReference": "@firebase/auth!MultiFactorInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "multiFactorHint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PhoneMultiFactorSignInInfoOptions#multiFactorUid:member",
              "docComment": "/**\n * The uid of the second factor.\n *\n * One of `multiFactorHint` or `multiFactorUid` is required.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiFactorUid?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "multiFactorUid",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PhoneMultiFactorSignInInfoOptions#session:member",
              "docComment": "/**\n * The {@link MultiFactorSession} obtained via {@link MultiFactorResolver.session}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "session: "
                },
                {
                  "kind": "Reference",
                  "text": "MultiFactorSession",
                  "canonicalReference": "@firebase/auth!MultiFactorSession:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "session",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!PhoneSingleFactorInfoOptions:interface",
          "docComment": "/**\n * Options used for single-factor sign-in.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PhoneSingleFactorInfoOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "PhoneSingleFactorInfoOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!PhoneSingleFactorInfoOptions#phoneNumber:member",
              "docComment": "/**\n * Phone number to send a verification code to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "phoneNumber: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "phoneNumber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!PopupRedirectResolver:interface",
          "docComment": "/**\n * A resolver used for handling DOM specific operations like {@link signInWithPopup} or {@link signInWithRedirect}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PopupRedirectResolver "
            }
          ],
          "releaseTag": "Public",
          "name": "PopupRedirectResolver",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@firebase/auth!prodErrorMap:var",
          "docComment": "/**\n * A minimal error map with all verbose error messages stripped.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "prodErrorMap: "
            },
            {
              "kind": "Reference",
              "text": "AuthErrorMap",
              "canonicalReference": "@firebase/auth!AuthErrorMap:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "prodErrorMap",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@firebase/auth!ProviderId:var",
          "docComment": "/**\n * Enumeration of supported providers.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ProviderId: "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly FACEBOOK: \"facebook.com\";\n    readonly GITHUB: \"github.com\";\n    readonly GOOGLE: \"google.com\";\n    readonly PASSWORD: \"password\";\n    readonly PHONE: \"phone\";\n    readonly TWITTER: \"twitter.com\";\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "ProviderId",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!ReactNativeAsyncStorage:interface",
          "docComment": "/**\n * Interface for a supplied `AsyncStorage`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ReactNativeAsyncStorage "
            }
          ],
          "releaseTag": "Public",
          "name": "ReactNativeAsyncStorage",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!ReactNativeAsyncStorage#getItem:member(1)",
              "docComment": "/**\n * Retrieve an item from storage.\n *\n * @param key - storage key.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getItem(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getItem"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!ReactNativeAsyncStorage#removeItem:member(1)",
              "docComment": "/**\n * Remove an item from storage.\n *\n * @param key - storage key.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeItem(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeItem"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!ReactNativeAsyncStorage#setItem:member(1)",
              "docComment": "/**\n * Persist an item in storage.\n *\n * @param key - storage key.\n *\n * @param value - storage value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setItem(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setItem"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!reauthenticateWithCredential:function(1)",
          "docComment": "/**\n * Re-authenticates a user using a fresh credential.\n *\n * @remarks\n *\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error or a `TOKEN_EXPIRED` error.\n *\n * @param user - The user.\n *\n * @param credential - The auth credential.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function reauthenticateWithCredential(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ", credential: "
            },
            {
              "kind": "Reference",
              "text": "AuthCredential",
              "canonicalReference": "@firebase/auth!AuthCredential:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UserCredential",
              "canonicalReference": "@firebase/auth!UserCredential:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "credential",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "reauthenticateWithCredential"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!reauthenticateWithPhoneNumber:function(1)",
          "docComment": "/**\n * Re-authenticates a user using a fresh phone credential.\n *\n * @remarks\n *\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\n *\n * This method does not work in a Node.js environment.\n *\n * @param user - The user.\n *\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n *\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function reauthenticateWithPhoneNumber(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ", phoneNumber: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", appVerifier: "
            },
            {
              "kind": "Reference",
              "text": "ApplicationVerifier",
              "canonicalReference": "@firebase/auth!ApplicationVerifier:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ConfirmationResult",
              "canonicalReference": "@firebase/auth!ConfirmationResult:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "phoneNumber",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "appVerifier",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "reauthenticateWithPhoneNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!reauthenticateWithPopup:function(1)",
          "docComment": "/**\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based OAuth flow.\n *\n * @remarks\n *\n * If the reauthentication is successful, the returned result will contain the user and the provider's credential.\n *\n * This method does not work in a Node.js environment.\n *\n * @param user - The user.\n *\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}. Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n *\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n * // Reauthenticate using a popup.\n * await reauthenticateWithPopup(result.user, provider);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function reauthenticateWithPopup(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ", provider: "
            },
            {
              "kind": "Reference",
              "text": "AuthProvider",
              "canonicalReference": "@firebase/auth!AuthProvider:interface"
            },
            {
              "kind": "Content",
              "text": ", resolver?: "
            },
            {
              "kind": "Reference",
              "text": "PopupRedirectResolver",
              "canonicalReference": "@firebase/auth!PopupRedirectResolver:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UserCredential",
              "canonicalReference": "@firebase/auth!UserCredential:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "provider",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "resolver",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "reauthenticateWithPopup"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!reauthenticateWithRedirect:function(1)",
          "docComment": "/**\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.\n *\n * @remarks\n *\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}. Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices | best practices} when using {@link reauthenticateWithRedirect}.\n *\n * This method does not work in a Node.js environment.\n *\n * @param user - The user.\n *\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}. Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n *\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * // Reauthenticate using a redirect.\n * await reauthenticateWithRedirect(result.user, provider);\n * // This will again trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function reauthenticateWithRedirect(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ", provider: "
            },
            {
              "kind": "Reference",
              "text": "AuthProvider",
              "canonicalReference": "@firebase/auth!AuthProvider:interface"
            },
            {
              "kind": "Content",
              "text": ", resolver?: "
            },
            {
              "kind": "Reference",
              "text": "PopupRedirectResolver",
              "canonicalReference": "@firebase/auth!PopupRedirectResolver:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<never>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "provider",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "resolver",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "reauthenticateWithRedirect"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!RecaptchaParameters:interface",
          "docComment": "/**\n * Interface representing reCAPTCHA parameters.\n *\n * See the [reCAPTCHA docs](https://developers.google.com/recaptcha/docs/display#render_param) for the list of accepted parameters. All parameters are accepted except for `sitekey`: Firebase Auth provisions a reCAPTCHA for each project and will configure the site key upon rendering.\n *\n * For an invisible reCAPTCHA, set the `size` key to `invisible`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RecaptchaParameters "
            }
          ],
          "releaseTag": "Public",
          "name": "RecaptchaParameters",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@firebase/auth!RecaptchaParameters:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/auth!RecaptchaVerifier:class",
          "docComment": "/**\n * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\n *\n * @remarks\n *\n * `RecaptchaVerifier` does not work in a Node.js environment.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class RecaptchaVerifier implements "
            },
            {
              "kind": "Reference",
              "text": "ApplicationVerifierInternal",
              "canonicalReference": "@firebase/auth!ApplicationVerifierInternal:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "RecaptchaVerifier",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@firebase/auth!RecaptchaVerifier:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `RecaptchaVerifier` class\n *\n * @remarks\n *\n * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value 'invisible'.\n *\n * @param authExtern - The corresponding Firebase {@link Auth} instance.\n *\n * @param containerOrId - The reCAPTCHA container parameter.\n *\n * @param parameters - The optional reCAPTCHA parameters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(authExtern: "
                },
                {
                  "kind": "Reference",
                  "text": "Auth",
                  "canonicalReference": "@firebase/auth!Auth:interface"
                },
                {
                  "kind": "Content",
                  "text": ", containerOrId: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string"
                },
                {
                  "kind": "Content",
                  "text": ", parameters?: "
                },
                {
                  "kind": "Reference",
                  "text": "RecaptchaParameters",
                  "canonicalReference": "@firebase/auth!RecaptchaParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "authExtern",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "containerOrId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "parameters",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!RecaptchaVerifier#clear:member(1)",
              "docComment": "/**\n * Clears the reCAPTCHA widget from the page and destroys the instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!RecaptchaVerifier#render:member(1)",
              "docComment": "/**\n * Renders the reCAPTCHA widget on the page.\n *\n * @returns A Promise that resolves with the reCAPTCHA widget ID.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!RecaptchaVerifier#type:member",
              "docComment": "/**\n * The application verifier type.\n *\n * @remarks\n *\n * For a reCAPTCHA verifier, this is 'recaptcha'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type = \"recaptcha\";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!RecaptchaVerifier#verify:member(1)",
              "docComment": "/**\n * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\n *\n * @returns A Promise for the reCAPTCHA token.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "verify(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "verify"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!reload:function(1)",
          "docComment": "/**\n * Reloads user account data, if signed in.\n *\n * @param user - The user.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function reload(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "reload"
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/auth!SAMLAuthProvider:class",
          "docComment": "/**\n * An {@link AuthProvider} for SAML.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SAMLAuthProvider extends "
            },
            {
              "kind": "Reference",
              "text": "FederatedAuthProvider",
              "canonicalReference": "@firebase/auth!FederatedAuthProvider:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SAMLAuthProvider",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@firebase/auth!SAMLAuthProvider:constructor(1)",
              "docComment": "/**\n * Constructor. The providerId must start with \"saml.\"\n *\n * @param providerId - SAML provider ID.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(providerId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "providerId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!SAMLAuthProvider.credentialFromError:member(1)",
              "docComment": "/**\n * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was thrown during a sign-in, link, or reauthenticate operation.\n *\n * @param userCredential - The user credential.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credentialFromError(error: "
                },
                {
                  "kind": "Reference",
                  "text": "FirebaseError",
                  "canonicalReference": "@firebase/util!FirebaseError:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AuthCredential",
                  "canonicalReference": "@firebase/auth!AuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credentialFromError"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!SAMLAuthProvider.credentialFromJSON:member(1)",
              "docComment": "/**\n * Creates an {@link AuthCredential} from a JSON string or a plain object.\n *\n * @param json - A plain object or a JSON string\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credentialFromJSON(json: "
                },
                {
                  "kind": "Content",
                  "text": "string | object"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AuthCredential",
                  "canonicalReference": "@firebase/auth!AuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "json",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credentialFromJSON"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!SAMLAuthProvider.credentialFromResult:member(1)",
              "docComment": "/**\n * Generates an {@link AuthCredential} from a {@link UserCredential} after a successful SAML flow completes.\n *\n * @remarks\n *\n * For example, to get an {@link AuthCredential}, you could write the following code:\n * ```js\n * const userCredential = await signInWithPopup(auth, samlProvider);\n * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\n * ```\n *\n * @param userCredential - The user credential.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credentialFromResult(userCredential: "
                },
                {
                  "kind": "Reference",
                  "text": "UserCredential",
                  "canonicalReference": "@firebase/auth!UserCredential:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AuthCredential",
                  "canonicalReference": "@firebase/auth!AuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userCredential",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credentialFromResult"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!sendEmailVerification:function(1)",
          "docComment": "/**\n * Sends a verification email to a user.\n *\n * @remarks\n *\n * The verification process is completed by calling {@link applyActionCode}.\n *\n * @param user - The user.\n *\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendEmailVerification(user, actionCodeSettings);\n * // Obtain code from the user.\n * await applyActionCode(auth, code);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sendEmailVerification(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ", actionCodeSettings?: "
            },
            {
              "kind": "Reference",
              "text": "ActionCodeSettings",
              "canonicalReference": "@firebase/auth!ActionCodeSettings:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "actionCodeSettings",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "name": "sendEmailVerification"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!sendPasswordResetEmail:function(1)",
          "docComment": "/**\n * Sends a password reset email to the given email address.\n *\n * @remarks\n *\n * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in the email sent to the user, along with the new password specified by the user.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param email - The user's email address.\n *\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain code from user.\n * await confirmPasswordReset('user@example.com', code);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sendPasswordResetEmail(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", email: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", actionCodeSettings?: "
            },
            {
              "kind": "Reference",
              "text": "ActionCodeSettings",
              "canonicalReference": "@firebase/auth!ActionCodeSettings:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "email",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "actionCodeSettings",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "sendPasswordResetEmail"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!sendSignInLinkToEmail:function(1)",
          "docComment": "/**\n * Sends a sign-in email link to the user with the specified email.\n *\n * @remarks\n *\n * The sign-in operation has to always be completed in the app unlike other out of band email actions (password reset and email verifications). This is because, at the end of the flow, the user is expected to be signed in and their Auth state persisted within the app.\n *\n * To complete sign in with the email link, call {@link signInWithEmailLink} with the email address and the email link supplied in the email sent to the user.\n *\n * @param authInternal - The {@link Auth} instance.\n *\n * @param email - The user's email address.\n *\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain emailLink from the user.\n * if(isSignInWithEmailLink(auth, emailLink)) {\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n * }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sendSignInLinkToEmail(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", email: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", actionCodeSettings: "
            },
            {
              "kind": "Reference",
              "text": "ActionCodeSettings",
              "canonicalReference": "@firebase/auth!ActionCodeSettings:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "email",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "actionCodeSettings",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "sendSignInLinkToEmail"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!setPersistence:function(1)",
          "docComment": "/**\n * Changes the type of persistence on the {@link Auth} instance for the currently saved `Auth` session and applies this type of persistence for future sign-in requests, including sign-in with redirect requests.\n *\n * @remarks\n *\n * This makes it easy for a user signing in to specify whether their session should be remembered or not. It also makes it easier to never persist the `Auth` state for applications that are shared by other users or have sensitive data.\n *\n * This method does not work in a Node.js environment.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param persistence - The {@link Persistence} to use.\n *\n * @returns A `Promise` that resolves once the persistence change has completed\n *\n * @example\n * ```javascript\n * setPersistence(auth, browserSessionPersistence);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setPersistence(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", persistence: "
            },
            {
              "kind": "Reference",
              "text": "Persistence",
              "canonicalReference": "@firebase/auth!Persistence:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "persistence",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "setPersistence"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!signInAnonymously:function(1)",
          "docComment": "/**\n * Asynchronously signs in as an anonymous user.\n *\n * @remarks\n *\n * If there is already an anonymous user signed in, that user will be returned; otherwise, a new anonymous user identity will be created and returned.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function signInAnonymously(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UserCredential",
              "canonicalReference": "@firebase/auth!UserCredential:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "signInAnonymously"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@firebase/auth!SignInMethod:var",
          "docComment": "/**\n * Enumeration of supported sign-in methods.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SignInMethod: "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly EMAIL_LINK: \"emailLink\";\n    readonly EMAIL_PASSWORD: \"password\";\n    readonly FACEBOOK: \"facebook.com\";\n    readonly GITHUB: \"github.com\";\n    readonly GOOGLE: \"google.com\";\n    readonly PHONE: \"phone\";\n    readonly TWITTER: \"twitter.com\";\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "SignInMethod",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!signInWithCredential:function(1)",
          "docComment": "/**\n * Asynchronously signs in with the given credentials.\n *\n * @remarks\n *\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param credential - The auth credential.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function signInWithCredential(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", credential: "
            },
            {
              "kind": "Reference",
              "text": "AuthCredential",
              "canonicalReference": "@firebase/auth!AuthCredential:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UserCredential",
              "canonicalReference": "@firebase/auth!UserCredential:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "credential",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "signInWithCredential"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!signInWithCustomToken:function(1)",
          "docComment": "/**\n * Asynchronously signs in using a custom token.\n *\n * @remarks\n *\n * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must be generated by an auth backend using the {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken} method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\n *\n * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param customToken - The custom token to sign in with.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function signInWithCustomToken(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", customToken: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UserCredential",
              "canonicalReference": "@firebase/auth!UserCredential:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "customToken",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "signInWithCustomToken"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!signInWithEmailAndPassword:function(1)",
          "docComment": "/**\n * Asynchronously signs in using an email and password.\n *\n * @remarks\n *\n * Fails with an error if the email address and password do not match.\n *\n * Note: The user's password is NOT the password used to access the user's email account. The email address serves as a unique identifier for the user, and the password is used to access the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param email - The users email address.\n *\n * @param password - The users password.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function signInWithEmailAndPassword(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", email: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", password: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UserCredential",
              "canonicalReference": "@firebase/auth!UserCredential:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "email",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "password",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "signInWithEmailAndPassword"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!signInWithEmailLink:function(1)",
          "docComment": "/**\n * Asynchronously signs in using an email and sign-in email link.\n *\n * @remarks\n *\n * If no link is passed, the link is inferred from the current URL.\n *\n * Fails with an error if the email address is invalid or OTP in email link expires.\n *\n * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param email - The user's email address.\n *\n * @param emailLink - The link sent to the user's email address.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain emailLink from the user.\n * if(isSignInWithEmailLink(auth, emailLink)) {\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n * }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function signInWithEmailLink(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", email: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", emailLink?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UserCredential",
              "canonicalReference": "@firebase/auth!UserCredential:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "email",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "emailLink",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "signInWithEmailLink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!signInWithPhoneNumber:function(1)",
          "docComment": "/**\n * Asynchronously signs in using a phone number.\n *\n * @remarks\n *\n * This method sends a code via SMS to the given phone number, and returns a {@link ConfirmationResult}. After the user provides the code sent to their phone, call {@link ConfirmationResult.confirm} with the code to sign the user in.\n *\n * For abuse prevention, this method also requires a {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}. This function can work on other platforms that do not support the {@link RecaptchaVerifier} (like React Native), but you need to use a third-party {@link ApplicationVerifier} implementation.\n *\n * This method does not work in a Node.js environment.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n *\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @example\n * ```javascript\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\n * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n * // Obtain a verificationCode from the user.\n * const credential = await confirmationResult.confirm(verificationCode);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function signInWithPhoneNumber(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", phoneNumber: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", appVerifier: "
            },
            {
              "kind": "Reference",
              "text": "ApplicationVerifier",
              "canonicalReference": "@firebase/auth!ApplicationVerifier:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ConfirmationResult",
              "canonicalReference": "@firebase/auth!ConfirmationResult:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "phoneNumber",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "appVerifier",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "signInWithPhoneNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!signInWithPopup:function(1)",
          "docComment": "/**\n * Authenticates a Firebase client using a popup-based OAuth authentication flow.\n *\n * @remarks\n *\n * If succeeds, returns the signed in user along with the provider's credential. If sign in was unsuccessful, returns an error object containing additional information about the error.\n *\n * This method does not work in a Node.js environment.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}. Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n *\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Facebook Access Token.\n * const credential = provider.credentialFromResult(auth, result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function signInWithPopup(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", provider: "
            },
            {
              "kind": "Reference",
              "text": "AuthProvider",
              "canonicalReference": "@firebase/auth!AuthProvider:interface"
            },
            {
              "kind": "Content",
              "text": ", resolver?: "
            },
            {
              "kind": "Reference",
              "text": "PopupRedirectResolver",
              "canonicalReference": "@firebase/auth!PopupRedirectResolver:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UserCredential",
              "canonicalReference": "@firebase/auth!UserCredential:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "provider",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "resolver",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "signInWithPopup"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!signInWithRedirect:function(1)",
          "docComment": "/**\n * Authenticates a Firebase client using a full-page redirect flow.\n *\n * @remarks\n *\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}. Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices | best practices} when using {@link signInWithRedirect}.\n *\n * This method does not work in a Node.js environment.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}. Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n *\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // You can add additional scopes to the provider:\n * provider.addScope('user_birthday');\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * // As this API can be used for sign-in, linking and reauthentication,\n * // check the operationType to determine what triggered this redirect\n * // operation.\n * const operationType = result.operationType;\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function signInWithRedirect(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", provider: "
            },
            {
              "kind": "Reference",
              "text": "AuthProvider",
              "canonicalReference": "@firebase/auth!AuthProvider:interface"
            },
            {
              "kind": "Content",
              "text": ", resolver?: "
            },
            {
              "kind": "Reference",
              "text": "PopupRedirectResolver",
              "canonicalReference": "@firebase/auth!PopupRedirectResolver:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<never>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "provider",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "resolver",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "signInWithRedirect"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!signOut:function(1)",
          "docComment": "/**\n * Signs out the current user.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function signOut(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "signOut"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!TotpMultiFactorAssertion:interface",
          "docComment": "/**\n * The class for asserting ownership of a TOTP second factor. Provided by {@link TotpMultiFactorGenerator.assertionForEnrollment} and {@link TotpMultiFactorGenerator.assertionForSignIn}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TotpMultiFactorAssertion extends "
            },
            {
              "kind": "Reference",
              "text": "MultiFactorAssertion",
              "canonicalReference": "@firebase/auth!MultiFactorAssertion:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TotpMultiFactorAssertion",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/auth!TotpMultiFactorGenerator:class",
          "docComment": "/**\n * Provider for generating a {@link TotpMultiFactorAssertion}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TotpMultiFactorGenerator "
            }
          ],
          "releaseTag": "Public",
          "name": "TotpMultiFactorGenerator",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!TotpMultiFactorGenerator.assertionForEnrollment:member(1)",
              "docComment": "/**\n * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP (time-based one-time password) second factor. This assertion is used to complete enrollment in TOTP second factor.\n *\n * @param secret - A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\n *\n * @param oneTimePassword - One-time password from TOTP App.\n *\n * @returns A {@link TotpMultiFactorAssertion} which can be used with {@link MultiFactorUser.enroll}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static assertionForEnrollment(secret: "
                },
                {
                  "kind": "Reference",
                  "text": "TotpSecret",
                  "canonicalReference": "@firebase/auth!TotpSecret:class"
                },
                {
                  "kind": "Content",
                  "text": ", oneTimePassword: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TotpMultiFactorAssertion",
                  "canonicalReference": "@firebase/auth!TotpMultiFactorAssertion:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "secret",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "oneTimePassword",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "assertionForEnrollment"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!TotpMultiFactorGenerator.assertionForSignIn:member(1)",
              "docComment": "/**\n * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor. This assertion is used to complete signIn with TOTP as the second factor.\n *\n * @param enrollmentId - identifies the enrolled TOTP second factor.\n *\n * @param oneTimePassword - One-time password from TOTP App.\n *\n * @returns A {@link TotpMultiFactorAssertion} which can be used with {@link MultiFactorResolver.resolveSignIn}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static assertionForSignIn(enrollmentId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", oneTimePassword: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TotpMultiFactorAssertion",
                  "canonicalReference": "@firebase/auth!TotpMultiFactorAssertion:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "enrollmentId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "oneTimePassword",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "assertionForSignIn"
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!TotpMultiFactorGenerator.FACTOR_ID:member",
              "docComment": "/**\n * The identifier of the TOTP second factor: `totp`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static FACTOR_ID: "
                },
                {
                  "kind": "Content",
                  "text": "'totp'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "FACTOR_ID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!TotpMultiFactorGenerator.generateSecret:member(1)",
              "docComment": "/**\n * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters. Creates a TOTP secret as part of enrolling a TOTP second factor. Used for generating a QR code URL or inputting into a TOTP app. This method uses the auth instance corresponding to the user in the multiFactorSession.\n *\n * @param session - The {@link MultiFactorSession} that the user is part of.\n *\n * @returns A promise to {@link TotpSecret}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static generateSecret(session: "
                },
                {
                  "kind": "Reference",
                  "text": "MultiFactorSession",
                  "canonicalReference": "@firebase/auth!MultiFactorSession:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TotpSecret",
                  "canonicalReference": "@firebase/auth!TotpSecret:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "session",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "generateSecret"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!TotpMultiFactorInfo:interface",
          "docComment": "/**\n * The subclass of the {@link MultiFactorInfo} interface for TOTP second factors. The `factorId` of this second factor is {@link FactorId}.TOTP.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TotpMultiFactorInfo extends "
            },
            {
              "kind": "Reference",
              "text": "MultiFactorInfo",
              "canonicalReference": "@firebase/auth!MultiFactorInfo:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TotpMultiFactorInfo",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/auth!TotpSecret:class",
          "docComment": "/**\n * Provider for generating a {@link TotpMultiFactorAssertion}.\n *\n * Stores the shared secret key and other parameters to generate time-based OTPs. Implements methods to retrieve the shared secret key and generate a QR code URL.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TotpSecret "
            }
          ],
          "releaseTag": "Public",
          "name": "TotpSecret",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!TotpSecret#codeIntervalSeconds:member",
              "docComment": "/**\n * The interval (in seconds) when the OTP codes should change.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly codeIntervalSeconds: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "codeIntervalSeconds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!TotpSecret#codeLength:member",
              "docComment": "/**\n * Length of the one-time passwords to be generated.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly codeLength: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "codeLength",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!TotpSecret#enrollmentCompletionDeadline:member",
              "docComment": "/**\n * The timestamp (UTC string) by which TOTP enrollment should be completed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly enrollmentCompletionDeadline: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "enrollmentCompletionDeadline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!TotpSecret#generateQrCodeUrl:member(1)",
              "docComment": "/**\n * Returns a QR code URL as described in https://github.com/google/google-authenticator/wiki/Key-Uri-Format This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator. If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\n *\n * @param accountName - the name of the account/app along with a user identifier.\n *\n * @param issuer - issuer of the TOTP (likely the app name).\n *\n * @returns A QR code URL string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "generateQrCodeUrl(accountName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", issuer?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "accountName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "issuer",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "generateQrCodeUrl"
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!TotpSecret#hashingAlgorithm:member",
              "docComment": "/**\n * Hashing algorithm used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly hashingAlgorithm: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hashingAlgorithm",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!TotpSecret#secretKey:member",
              "docComment": "/**\n * Shared secret key/seed used for enrolling in TOTP MFA and generating OTPs.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly secretKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "secretKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@firebase/auth!TwitterAuthProvider:class",
          "docComment": "/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new TwitterAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Twitter Access Token and Secret.\n *   const credential = TwitterAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n *   const secret = credential.secret;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new TwitterAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Twitter Access Token and Secret.\n * const credential = TwitterAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * const secret = credential.secret;\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TwitterAuthProvider extends "
            },
            {
              "kind": "Reference",
              "text": "BaseOAuthProvider",
              "canonicalReference": "@firebase/auth!BaseOAuthProvider:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TwitterAuthProvider",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@firebase/auth!TwitterAuthProvider:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `TwitterAuthProvider` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!TwitterAuthProvider.credential:member(1)",
              "docComment": "/**\n * Creates a credential for Twitter.\n *\n * @param token - Twitter access token.\n *\n * @param secret - Twitter secret.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credential(token: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", secret: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredential",
                  "canonicalReference": "@firebase/auth!OAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "token",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "secret",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "credential"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!TwitterAuthProvider.credentialFromError:member(1)",
              "docComment": "/**\n * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was thrown during a sign-in, link, or reauthenticate operation.\n *\n * @param userCredential - The user credential.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credentialFromError(error: "
                },
                {
                  "kind": "Reference",
                  "text": "FirebaseError",
                  "canonicalReference": "@firebase/util!FirebaseError:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredential",
                  "canonicalReference": "@firebase/auth!OAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credentialFromError"
            },
            {
              "kind": "Method",
              "canonicalReference": "@firebase/auth!TwitterAuthProvider.credentialFromResult:member(1)",
              "docComment": "/**\n * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n *\n * @param userCredential - The user credential.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static credentialFromResult(userCredential: "
                },
                {
                  "kind": "Reference",
                  "text": "UserCredential",
                  "canonicalReference": "@firebase/auth!UserCredential:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "OAuthCredential",
                  "canonicalReference": "@firebase/auth!OAuthCredential:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userCredential",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "credentialFromResult"
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!TwitterAuthProvider.PROVIDER_ID:member",
              "docComment": "/**\n * Always set to {@link ProviderId}.TWITTER.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly PROVIDER_ID: "
                },
                {
                  "kind": "Content",
                  "text": "'twitter.com'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "PROVIDER_ID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@firebase/auth!TwitterAuthProvider.TWITTER_SIGN_IN_METHOD:member",
              "docComment": "/**\n * Always set to {@link SignInMethod}.TWITTER.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly TWITTER_SIGN_IN_METHOD: "
                },
                {
                  "kind": "Content",
                  "text": "'twitter.com'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "TWITTER_SIGN_IN_METHOD",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!unlink:function(1)",
          "docComment": "/**\n * Unlinks a provider from a user account.\n *\n * @param user - The user.\n *\n * @param providerId - The provider to unlink.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function unlink(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ", providerId: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "providerId",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "unlink"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!updateCurrentUser:function(1)",
          "docComment": "/**\n * Asynchronously sets the provided user as {@link Auth.currentUser} on the {@link Auth} instance.\n *\n * @remarks\n *\n * A new instance copy of the user provided will be made and set as currentUser.\n *\n * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners like other sign in methods.\n *\n * The operation fails with an error if the user to be updated belongs to a different Firebase project.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param user - The new {@link User}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updateCurrentUser(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "name": "updateCurrentUser"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!updateEmail:function(1)",
          "docComment": "/**\n * Updates the user's email address.\n *\n * @remarks\n *\n * An email will be sent to the original email address (if it was set) that allows to revoke the email address change, in order to protect them from account hijacking.\n *\n * Important: this is a security sensitive operation that requires the user to have recently signed in. If this requirement isn't met, ask the user to authenticate again and then call {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n *\n * @param newEmail - The new email address.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updateEmail(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ", newEmail: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "newEmail",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "updateEmail"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!updatePassword:function(1)",
          "docComment": "/**\n * Updates the user's password.\n *\n * @remarks\n *\n * Important: this is a security sensitive operation that requires the user to have recently signed in. If this requirement isn't met, ask the user to authenticate again and then call {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n *\n * @param newPassword - The new password.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updatePassword(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ", newPassword: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "newPassword",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "updatePassword"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!updatePhoneNumber:function(1)",
          "docComment": "/**\n * Updates the user's phone number.\n *\n * @remarks\n *\n * This method does not work in a Node.js environment.\n *\n * @param user - The user.\n *\n * @param credential - A credential authenticating the new phone number.\n *\n * @example\n * ```\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n * // Obtain the verificationCode from the user.\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * await updatePhoneNumber(user, phoneCredential);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updatePhoneNumber(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ", credential: "
            },
            {
              "kind": "Reference",
              "text": "PhoneAuthCredential",
              "canonicalReference": "@firebase/auth!PhoneAuthCredential:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "credential",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "updatePhoneNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!updateProfile:function(1)",
          "docComment": "/**\n * Updates a user's profile data.\n *\n * @param user - The user.\n *\n * @param profile - The profile's `displayName` and `photoURL` to update.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updateProfile(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ", { displayName, "
            },
            {
              "kind": "Reference",
              "text": "photoURL",
              "canonicalReference": "@firebase/auth!~__type#photoURL"
            },
            {
              "kind": "Content",
              "text": ": photoUrl }: "
            },
            {
              "kind": "Content",
              "text": "{\n    displayName?: string | null;\n    photoURL?: string | null;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "{ displayName, photoURL: photoUrl }",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "updateProfile"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!useDeviceLanguage:function(1)",
          "docComment": "/**\n * Sets the current language to the default device/browser preference.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useDeviceLanguage(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "useDeviceLanguage"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!User:interface",
          "docComment": "/**\n * A user account.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface User extends "
            },
            {
              "kind": "Reference",
              "text": "UserInfo",
              "canonicalReference": "@firebase/auth!UserInfo:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "User",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!User#delete:member(1)",
              "docComment": "/**\n * Deletes and signs out the user.\n *\n * @remarks\n *\n * Important: this is a security-sensitive operation that requires the user to have recently signed in. If this requirement isn't met, ask the user to authenticate again and then call one of the reauthentication methods like {@link reauthenticateWithCredential}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delete(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "delete"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!User#emailVerified:member",
              "docComment": "/**\n * Whether the email has been verified with {@link sendEmailVerification} and {@link applyActionCode}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly emailVerified: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "emailVerified",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!User#getIdToken:member(1)",
              "docComment": "/**\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n *\n * Returns the current token if it has not expired or if it will not expire in the next five minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param forceRefresh - Force refresh regardless of token expiration.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getIdToken(forceRefresh?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "forceRefresh",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getIdToken"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!User#getIdTokenResult:member(1)",
              "docComment": "/**\n * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n *\n * Returns the current token if it has not expired or if it will not expire in the next five minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param forceRefresh - Force refresh regardless of token expiration.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getIdTokenResult(forceRefresh?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IdTokenResult",
                  "canonicalReference": "@firebase/auth!IdTokenResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "forceRefresh",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getIdTokenResult"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!User#isAnonymous:member",
              "docComment": "/**\n * Whether the user is authenticated using the {@link ProviderId}.ANONYMOUS provider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly isAnonymous: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isAnonymous",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!User#metadata:member",
              "docComment": "/**\n * Additional metadata around user creation and sign-in times.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly metadata: "
                },
                {
                  "kind": "Reference",
                  "text": "UserMetadata",
                  "canonicalReference": "@firebase/auth!UserMetadata:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "metadata",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!User#providerData:member",
              "docComment": "/**\n * Additional per provider such as displayName and profile information.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly providerData: "
                },
                {
                  "kind": "Reference",
                  "text": "UserInfo",
                  "canonicalReference": "@firebase/auth!UserInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "providerData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!User#refreshToken:member",
              "docComment": "/**\n * Refresh token used to reauthenticate the user. Avoid using this directly and prefer {@link User.getIdToken} to refresh the ID token instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly refreshToken: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refreshToken",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!User#reload:member(1)",
              "docComment": "/**\n * Refreshes the user, if signed in.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reload(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "reload"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!User#tenantId:member",
              "docComment": "/**\n * The user's tenant ID.\n *\n * @remarks\n *\n * This is a read-only property, which indicates the tenant ID used to sign in the user. This is null if the user is signed in from the parent project.\n *\n * @example\n * ```javascript\n * // Set the tenant ID on Auth instance.\n * auth.tenantId = 'TENANT_PROJECT_ID';\n *\n * // All future sign-in request now include tenant ID.\n * const result = await signInWithEmailAndPassword(auth, email, password);\n * // result.user.tenantId should be 'TENANT_PROJECT_ID'.\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tenantId: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tenantId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@firebase/auth!User#toJSON:member(1)",
              "docComment": "/**\n * Returns a JSON-serializable representation of this object.\n *\n * @returns A JSON-serializable representation of this object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toJSON"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!UserCredential:interface",
          "docComment": "/**\n * A structure containing a {@link User}, the {@link OperationType}, and the provider ID.\n *\n * @remarks\n *\n * `operationType` could be {@link OperationType}.SIGN_IN for a sign-in operation, {@link OperationType}.LINK for a linking operation and {@link OperationType}.REAUTHENTICATE for a reauthentication operation.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UserCredential "
            }
          ],
          "releaseTag": "Public",
          "name": "UserCredential",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!UserCredential#operationType:member",
              "docComment": "/**\n * The type of operation which was used to authenticate the user (such as sign-in or link).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "operationType: "
                },
                {
                  "kind": "Content",
                  "text": "(typeof "
                },
                {
                  "kind": "Reference",
                  "text": "OperationTypeMap",
                  "canonicalReference": "@firebase/auth!OperationType:var"
                },
                {
                  "kind": "Content",
                  "text": ")[keyof typeof "
                },
                {
                  "kind": "Reference",
                  "text": "OperationTypeMap",
                  "canonicalReference": "@firebase/auth!OperationType:var"
                },
                {
                  "kind": "Content",
                  "text": "]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "operationType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!UserCredential#providerId:member",
              "docComment": "/**\n * The provider which was used to authenticate the user.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "providerId: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "providerId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!UserCredential#user:member",
              "docComment": "/**\n * The user authenticated by this credential.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "user: "
                },
                {
                  "kind": "Reference",
                  "text": "User",
                  "canonicalReference": "@firebase/auth!User:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "user",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!UserInfo:interface",
          "docComment": "/**\n * User profile information, visible only to the Firebase project's apps.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UserInfo "
            }
          ],
          "releaseTag": "Public",
          "name": "UserInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!UserInfo#displayName:member",
              "docComment": "/**\n * The display name of the user.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly displayName: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "displayName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!UserInfo#email:member",
              "docComment": "/**\n * The email of the user.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly email: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "email",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!UserInfo#phoneNumber:member",
              "docComment": "/**\n * The phone number normalized based on the E.164 standard (e.g. +16505550101) for the user.\n *\n * @remarks\n *\n * This is null if the user has no phone credential linked to the account.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly phoneNumber: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "phoneNumber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!UserInfo#photoURL:member",
              "docComment": "/**\n * The profile photo URL of the user.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly photoURL: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "photoURL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!UserInfo#providerId:member",
              "docComment": "/**\n * The provider used to authenticate the user.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly providerId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "providerId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!UserInfo#uid:member",
              "docComment": "/**\n * The user's unique ID, scoped to the project.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly uid: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "uid",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@firebase/auth!UserMetadata:interface",
          "docComment": "/**\n * Interface representing a user's metadata.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UserMetadata "
            }
          ],
          "releaseTag": "Public",
          "name": "UserMetadata",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!UserMetadata#creationTime:member",
              "docComment": "/**\n * Time the user was created.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly creationTime?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "creationTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@firebase/auth!UserMetadata#lastSignInTime:member",
              "docComment": "/**\n * Time the user last signed in.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly lastSignInTime?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "lastSignInTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@firebase/auth!UserProfile:type",
          "docComment": "/**\n * User profile used in {@link AdditionalUserInfo}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type UserProfile = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UserProfile",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!validatePassword:function(1)",
          "docComment": "/**\n * Validates the password against the password policy configured for the project or tenant.\n *\n * @remarks\n *\n * If no tenant ID is set on the `Auth` instance, then this method will use the password policy configured for the project. Otherwise, this method will use the policy configured for the tenant. If a password policy has not been configured, then the default policy configured for all projects will be used.\n *\n * If an auth flow fails because a submitted password does not meet the password policy requirements and this method has previously been called, then this method will use the most recent policy available when called again.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param password - The password to validate.\n *\n * @example\n * ```javascript\n * validatePassword(auth, 'some-password');\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function validatePassword(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", password: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PasswordValidationStatus",
              "canonicalReference": "@firebase/auth!PasswordValidationStatus:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "password",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "validatePassword"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!verifyBeforeUpdateEmail:function(1)",
          "docComment": "/**\n * Sends a verification email to a new email address.\n *\n * @remarks\n *\n * The user's email will be updated to the new one after being verified.\n *\n * If you have a custom email action handler, you can complete the verification process by calling {@link applyActionCode}.\n *\n * @param user - The user.\n *\n * @param newEmail - The new email address to be verified before update.\n *\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\n * // Obtain code from the user.\n * await applyActionCode(auth, code);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function verifyBeforeUpdateEmail(user: "
            },
            {
              "kind": "Reference",
              "text": "User",
              "canonicalReference": "@firebase/auth!User:interface"
            },
            {
              "kind": "Content",
              "text": ", newEmail: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", actionCodeSettings?: "
            },
            {
              "kind": "Reference",
              "text": "ActionCodeSettings",
              "canonicalReference": "@firebase/auth!ActionCodeSettings:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "newEmail",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "actionCodeSettings",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            }
          ],
          "name": "verifyBeforeUpdateEmail"
        },
        {
          "kind": "Function",
          "canonicalReference": "@firebase/auth!verifyPasswordResetCode:function(1)",
          "docComment": "/**\n * Checks a password reset code sent to the user by email or other out-of-band mechanism.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @param code - A verification code sent to the user.\n *\n * @returns the user's email address if valid.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function verifyPasswordResetCode(auth: "
            },
            {
              "kind": "Reference",
              "text": "Auth",
              "canonicalReference": "@firebase/auth!Auth:interface"
            },
            {
              "kind": "Content",
              "text": ", code: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "auth",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "code",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "verifyPasswordResetCode"
        }
      ]
    }
  ]
}
